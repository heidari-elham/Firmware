
Firmware2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a030  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800a268  0800a268  0000b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a5fc  0800a5fc  0000b5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a604  0800a604  0000b604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a608  0800a608  0000b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000e0  20000000  0800a60c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000030c  200000e0  0800a6ec  0000c0e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003ec  0800a6ec  0000c3ec  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002459e  00000000  00000000  0000c116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003917  00000000  00000000  000306b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f08  00000000  00000000  00033fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017d4  00000000  00000000  00035ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036eb9  00000000  00000000  000376ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f786  00000000  00000000  0006e565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c97a  00000000  00000000  0008dceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001da665  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008acc  00000000  00000000  001da6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  001e3174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000e0 	.word	0x200000e0
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a250 	.word	0x0800a250

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000e4 	.word	0x200000e4
 8000274:	0800a250 	.word	0x0800a250

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000298:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800029c:	f000 b97e 	b.w	800059c <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	460c      	mov	r4, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14d      	bne.n	8000360 <__udivmoddi4+0xa8>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	460f      	mov	r7, r1
 80002c8:	4684      	mov	ip, r0
 80002ca:	4696      	mov	lr, r2
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	d960      	bls.n	8000394 <__udivmoddi4+0xdc>
 80002d2:	b14b      	cbz	r3, 80002e8 <__udivmoddi4+0x30>
 80002d4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e2:	fa20 f202 	lsr.w	r2, r0, r2
 80002e6:	4317      	orrs	r7, r2
 80002e8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002ec:	fa1f f48e 	uxth.w	r4, lr
 80002f0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002f8:	fb06 7711 	mls	r7, r6, r1, r7
 80002fc:	fb01 f004 	mul.w	r0, r1, r4
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x62>
 8000308:	eb1e 0202 	adds.w	r2, lr, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x60>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 812d 	bhi.w	8000572 <__udivmoddi4+0x2ba>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fa1f fc8c 	uxth.w	ip, ip
 8000320:	fbb2 f0f6 	udiv	r0, r2, r6
 8000324:	fb06 2210 	mls	r2, r6, r0, r2
 8000328:	fb00 f404 	mul.w	r4, r0, r4
 800032c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000330:	4564      	cmp	r4, ip
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x8e>
 8000334:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x8c>
 800033e:	4564      	cmp	r4, ip
 8000340:	f200 811a 	bhi.w	8000578 <__udivmoddi4+0x2c0>
 8000344:	4610      	mov	r0, r2
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	ebac 0c04 	sub.w	ip, ip, r4
 800034e:	2100      	movs	r1, #0
 8000350:	b125      	cbz	r5, 800035c <__udivmoddi4+0xa4>
 8000352:	fa2c f303 	lsr.w	r3, ip, r3
 8000356:	2200      	movs	r2, #0
 8000358:	e9c5 3200 	strd	r3, r2, [r5]
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	428b      	cmp	r3, r1
 8000362:	d905      	bls.n	8000370 <__udivmoddi4+0xb8>
 8000364:	b10d      	cbz	r5, 800036a <__udivmoddi4+0xb2>
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	2100      	movs	r1, #0
 800036c:	4608      	mov	r0, r1
 800036e:	e7f5      	b.n	800035c <__udivmoddi4+0xa4>
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14d      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000378:	42a3      	cmp	r3, r4
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4290      	cmp	r0, r2
 8000380:	f080 80ef 	bcs.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4606      	mov	r6, r0
 8000386:	4623      	mov	r3, r4
 8000388:	4608      	mov	r0, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e6      	beq.n	800035c <__udivmoddi4+0xa4>
 800038e:	e9c5 6300 	strd	r6, r3, [r5]
 8000392:	e7e3      	b.n	800035c <__udivmoddi4+0xa4>
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 80a2 	bne.w	80004de <__udivmoddi4+0x226>
 800039a:	1a8a      	subs	r2, r1, r2
 800039c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a0:	fa1f f68e 	uxth.w	r6, lr
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003aa:	fb07 2014 	mls	r0, r7, r4, r2
 80003ae:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b6:	fb06 f004 	mul.w	r0, r6, r4
 80003ba:	4290      	cmp	r0, r2
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1e 0202 	adds.w	r2, lr, r2
 80003c2:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4290      	cmp	r0, r2
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80c8 	beq.w	800056c <__udivmoddi4+0x2b4>
 80003dc:	4644      	mov	r4, r8
 80003de:	1a12      	subs	r2, r2, r0
 80003e0:	fa1f fc8c 	uxth.w	ip, ip
 80003e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e8:	fb07 2210 	mls	r2, r7, r0, r2
 80003ec:	fb00 f606 	mul.w	r6, r0, r6
 80003f0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f4:	4566      	cmp	r6, ip
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x152>
 80003f8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x150>
 8000402:	4566      	cmp	r6, ip
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2c6>
 8000408:	4610      	mov	r0, r2
 800040a:	ebac 0c06 	sub.w	ip, ip, r6
 800040e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa04 fe01 	lsl.w	lr, r4, r1
 800041e:	fa22 f706 	lsr.w	r7, r2, r6
 8000422:	fa20 fc06 	lsr.w	ip, r0, r6
 8000426:	40f4      	lsrs	r4, r6
 8000428:	408a      	lsls	r2, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	ea4e 030c 	orr.w	r3, lr, ip
 8000430:	fa00 fe01 	lsl.w	lr, r0, r1
 8000434:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fa1f fc87 	uxth.w	ip, r7
 8000440:	fbb4 f0f8 	udiv	r0, r4, r8
 8000444:	fb08 4410 	mls	r4, r8, r0, r4
 8000448:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044c:	fb00 f90c 	mul.w	r9, r0, ip
 8000450:	45a1      	cmp	r9, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1ba>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a1      	cmp	r9, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b8>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 8093 	beq.w	8000596 <__udivmoddi4+0x2de>
 8000470:	4650      	mov	r0, sl
 8000472:	eba4 0409 	sub.w	r4, r4, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb4 f3f8 	udiv	r3, r4, r8
 800047e:	fb08 4413 	mls	r4, r8, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1e4>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1e2>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d87a      	bhi.n	8000590 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a0:	eba4 040c 	sub.w	r4, r4, ip
 80004a4:	fba0 9802 	umull	r9, r8, r0, r2
 80004a8:	4544      	cmp	r4, r8
 80004aa:	46cc      	mov	ip, r9
 80004ac:	4643      	mov	r3, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1fe>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x208>
 80004b2:	45ce      	cmp	lr, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x208>
 80004b6:	3801      	subs	r0, #1
 80004b8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004bc:	eb68 0307 	sbc.w	r3, r8, r7
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x222>
 80004c2:	ebbe 020c 	subs.w	r2, lr, ip
 80004c6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ca:	fa04 f606 	lsl.w	r6, r4, r6
 80004ce:	fa22 f301 	lsr.w	r3, r2, r1
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	431e      	orrs	r6, r3
 80004d6:	e9c5 6400 	strd	r6, r4, [r5]
 80004da:	2100      	movs	r1, #0
 80004dc:	e73e      	b.n	800035c <__udivmoddi4+0xa4>
 80004de:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e2:	f1c3 0120 	rsb	r1, r3, #32
 80004e6:	fa04 f203 	lsl.w	r2, r4, r3
 80004ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ee:	40cc      	lsrs	r4, r1
 80004f0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f4:	fa20 f101 	lsr.w	r1, r0, r1
 80004f8:	fa1f f68e 	uxth.w	r6, lr
 80004fc:	fbb4 f0f7 	udiv	r0, r4, r7
 8000500:	430a      	orrs	r2, r1
 8000502:	fb07 4410 	mls	r4, r7, r0, r4
 8000506:	0c11      	lsrs	r1, r2, #16
 8000508:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800050c:	fb00 f406 	mul.w	r4, r0, r6
 8000510:	428c      	cmp	r4, r1
 8000512:	d90e      	bls.n	8000532 <__udivmoddi4+0x27a>
 8000514:	eb1e 0101 	adds.w	r1, lr, r1
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800051c:	bf2c      	ite	cs
 800051e:	f04f 0901 	movcs.w	r9, #1
 8000522:	f04f 0900 	movcc.w	r9, #0
 8000526:	428c      	cmp	r4, r1
 8000528:	d902      	bls.n	8000530 <__udivmoddi4+0x278>
 800052a:	f1b9 0f00 	cmp.w	r9, #0
 800052e:	d02c      	beq.n	800058a <__udivmoddi4+0x2d2>
 8000530:	4640      	mov	r0, r8
 8000532:	1b09      	subs	r1, r1, r4
 8000534:	b292      	uxth	r2, r2
 8000536:	fbb1 f4f7 	udiv	r4, r1, r7
 800053a:	fb07 1114 	mls	r1, r7, r4, r1
 800053e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000542:	fb04 f106 	mul.w	r1, r4, r6
 8000546:	4291      	cmp	r1, r2
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x2a2>
 800054a:	eb1e 0202 	adds.w	r2, lr, r2
 800054e:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000552:	d201      	bcs.n	8000558 <__udivmoddi4+0x2a0>
 8000554:	4291      	cmp	r1, r2
 8000556:	d815      	bhi.n	8000584 <__udivmoddi4+0x2cc>
 8000558:	4644      	mov	r4, r8
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000560:	e721      	b.n	80003a6 <__udivmoddi4+0xee>
 8000562:	1a86      	subs	r6, r0, r2
 8000564:	eb64 0303 	sbc.w	r3, r4, r3
 8000568:	2001      	movs	r0, #1
 800056a:	e70e      	b.n	800038a <__udivmoddi4+0xd2>
 800056c:	3c02      	subs	r4, #2
 800056e:	4472      	add	r2, lr
 8000570:	e735      	b.n	80003de <__udivmoddi4+0x126>
 8000572:	3902      	subs	r1, #2
 8000574:	4472      	add	r2, lr
 8000576:	e6d0      	b.n	800031a <__udivmoddi4+0x62>
 8000578:	44f4      	add	ip, lr
 800057a:	3802      	subs	r0, #2
 800057c:	e6e3      	b.n	8000346 <__udivmoddi4+0x8e>
 800057e:	44f4      	add	ip, lr
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x152>
 8000584:	3c02      	subs	r4, #2
 8000586:	4472      	add	r2, lr
 8000588:	e7e7      	b.n	800055a <__udivmoddi4+0x2a2>
 800058a:	3802      	subs	r0, #2
 800058c:	4471      	add	r1, lr
 800058e:	e7d0      	b.n	8000532 <__udivmoddi4+0x27a>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e782      	b.n	800049c <__udivmoddi4+0x1e4>
 8000596:	3802      	subs	r0, #2
 8000598:	443c      	add	r4, r7
 800059a:	e76a      	b.n	8000472 <__udivmoddi4+0x1ba>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <UART_Debug_Print>:

extern UART_HandleTypeDef huart4;


void UART_Debug_Print(const char *msg)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe65 	bl	8000278 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <UART_Debug_Print+0x28>)
 80005ba:	f008 fa25 	bl	8008a08 <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000120 	.word	0x20000120

080005cc <MX_ssm_Init>:



void MX_ssm_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	int32_t ret;

	printf("===== Smart Sensor Monitor =====\n");
 80005d2:	4811      	ldr	r0, [pc, #68]	@ (8000618 <MX_ssm_Init+0x4c>)
 80005d4:	f009 faa8 	bl	8009b28 <puts>

	ret = ssm_smart_sensor_mlc_init();
 80005d8:	f000 f9de 	bl	8000998 <ssm_smart_sensor_mlc_init>
 80005dc:	6078      	str	r0, [r7, #4]
	if (ret != BSP_ERROR_NONE)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d004      	beq.n	80005ee <MX_ssm_Init+0x22>
	{
		printf("===== Error in mlc initialization =====\n");
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <MX_ssm_Init+0x50>)
 80005e6:	f009 fa9f 	bl	8009b28 <puts>
		Error_Handler();
 80005ea:	f000 f9c7 	bl	800097c <Error_Handler>
	}

	UART_Debug_Print("===== mlc initialization Done =====\n");
 80005ee:	480c      	ldr	r0, [pc, #48]	@ (8000620 <MX_ssm_Init+0x54>)
 80005f0:	f7ff ffd6 	bl	80005a0 <UART_Debug_Print>

	ret = ssm_smart_sensor_mlc_configure_ucf();
 80005f4:	f000 f9e8 	bl	80009c8 <ssm_smart_sensor_mlc_configure_ucf>
 80005f8:	6078      	str	r0, [r7, #4]
	if (ret != BSP_ERROR_NONE)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d004      	beq.n	800060a <MX_ssm_Init+0x3e>
	{   UART_Debug_Print("===== Error in ucf configuration =====\n");
 8000600:	4808      	ldr	r0, [pc, #32]	@ (8000624 <MX_ssm_Init+0x58>)
 8000602:	f7ff ffcd 	bl	80005a0 <UART_Debug_Print>
		Error_Handler();
 8000606:	f000 f9b9 	bl	800097c <Error_Handler>
	}

	UART_Debug_Print("===== ucf configuration Done =====\n");
 800060a:	4807      	ldr	r0, [pc, #28]	@ (8000628 <MX_ssm_Init+0x5c>)
 800060c:	f7ff ffc8 	bl	80005a0 <UART_Debug_Print>
	}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	0800a268 	.word	0x0800a268
 800061c:	0800a28c 	.word	0x0800a28c
 8000620:	0800a2b4 	.word	0x0800a2b4
 8000624:	0800a2dc 	.word	0x0800a2dc
 8000628:	0800a304 	.word	0x0800a304

0800062c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <__io_putchar+0x20>)
 800063e:	f008 f9e3 	bl	8008a08 <HAL_UART_Transmit>
  return ch;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000120 	.word	0x20000120

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f002 fcf6 	bl	8003044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f80c 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f8e0 	bl	8000820 <MX_GPIO_Init>
  MX_UART4_Init();
 8000660:	f000 f892 	bl	8000788 <MX_UART4_Init>
  MX_ICACHE_Init();
 8000664:	f000 f884 	bl	8000770 <MX_ICACHE_Init>
  MX_CRC_Init();
 8000668:	f000 f860 	bl	800072c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_ssm_Init();
 800066c:	f7ff ffae 	bl	80005cc <MX_ssm_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0x20>

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b09e      	sub	sp, #120	@ 0x78
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	2260      	movs	r2, #96	@ 0x60
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f009 fa58 	bl	8009b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
 8000696:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000698:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800069c:	f003 fb0e 	bl	8003cbc <HAL_PWREx_ControlVoltageScaling>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006a6:	f000 f969 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006aa:	2310      	movs	r3, #16
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ae:	2301      	movs	r3, #1
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006b2:	2310      	movs	r3, #16
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c0:	2301      	movs	r3, #1
 80006c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006cc:	2328      	movs	r3, #40	@ 0x28
 80006ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006dc:	2300      	movs	r3, #0
 80006de:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0318 	add.w	r3, r7, #24
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fb73 	bl	8003dd4 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006f4:	f000 f942 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	231f      	movs	r3, #31
 80006fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2303      	movs	r3, #3
 80006fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	2104      	movs	r1, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fa39 	bl	8004b8c <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000720:	f000 f92c 	bl	800097c <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3778      	adds	r7, #120	@ 0x78
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <MX_CRC_Init+0x3c>)
 8000732:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <MX_CRC_Init+0x40>)
 8000734:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_CRC_Init+0x3c>)
 8000738:	2200      	movs	r2, #0
 800073a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_CRC_Init+0x3c>)
 800073e:	2200      	movs	r2, #0
 8000740:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_CRC_Init+0x3c>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_CRC_Init+0x3c>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_CRC_Init+0x3c>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_CRC_Init+0x3c>)
 8000756:	f002 fec7 	bl	80034e8 <HAL_CRC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000760:	f000 f90c 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000fc 	.word	0x200000fc
 800076c:	40023000 	.word	0x40023000

08000770 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000774:	f003 fa92 	bl	8003c9c <HAL_ICACHE_Enable>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800077e:	f000 f8fd 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_UART4_Init+0x90>)
 800078e:	4a23      	ldr	r2, [pc, #140]	@ (800081c <MX_UART4_Init+0x94>)
 8000790:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_UART4_Init+0x90>)
 8000794:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000798:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_UART4_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <MX_UART4_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_UART4_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_UART4_Init+0x90>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_UART4_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_UART4_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_UART4_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_UART4_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_UART4_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007d0:	4811      	ldr	r0, [pc, #68]	@ (8000818 <MX_UART4_Init+0x90>)
 80007d2:	f008 f8c9 	bl	8008968 <HAL_UART_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 f8ce 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <MX_UART4_Init+0x90>)
 80007e4:	f008 fda8 	bl	8009338 <HAL_UARTEx_SetTxFifoThreshold>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80007ee:	f000 f8c5 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4808      	ldr	r0, [pc, #32]	@ (8000818 <MX_UART4_Init+0x90>)
 80007f6:	f008 fddd 	bl	80093b4 <HAL_UARTEx_SetRxFifoThreshold>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000800:	f000 f8bc 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_UART4_Init+0x90>)
 8000806:	f008 fd5e 	bl	80092c6 <HAL_UARTEx_DisableFifoMode>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 f8b4 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000120 	.word	0x20000120
 800081c:	40004c00 	.word	0x40004c00

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000836:	4b4b      	ldr	r3, [pc, #300]	@ (8000964 <MX_GPIO_Init+0x144>)
 8000838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083c:	4a49      	ldr	r2, [pc, #292]	@ (8000964 <MX_GPIO_Init+0x144>)
 800083e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000842:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000846:	4b47      	ldr	r3, [pc, #284]	@ (8000964 <MX_GPIO_Init+0x144>)
 8000848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000854:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MX_GPIO_Init+0x144>)
 8000856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085a:	4a42      	ldr	r2, [pc, #264]	@ (8000964 <MX_GPIO_Init+0x144>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000864:	4b3f      	ldr	r3, [pc, #252]	@ (8000964 <MX_GPIO_Init+0x144>)
 8000866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b3c      	ldr	r3, [pc, #240]	@ (8000964 <MX_GPIO_Init+0x144>)
 8000874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000878:	4a3a      	ldr	r2, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x144>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000882:	4b38      	ldr	r3, [pc, #224]	@ (8000964 <MX_GPIO_Init+0x144>)
 8000884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000890:	4b34      	ldr	r3, [pc, #208]	@ (8000964 <MX_GPIO_Init+0x144>)
 8000892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000896:	4a33      	ldr	r2, [pc, #204]	@ (8000964 <MX_GPIO_Init+0x144>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008a0:	4b30      	ldr	r3, [pc, #192]	@ (8000964 <MX_GPIO_Init+0x144>)
 80008a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <MX_GPIO_Init+0x144>)
 80008b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000964 <MX_GPIO_Init+0x144>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008be:	4b29      	ldr	r3, [pc, #164]	@ (8000964 <MX_GPIO_Init+0x144>)
 80008c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, SPI_SEN_CS_G_Pin|MCU_SEL_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2121      	movs	r1, #33	@ 0x21
 80008d0:	4825      	ldr	r0, [pc, #148]	@ (8000968 <MX_GPIO_Init+0x148>)
 80008d2:	f003 f9b1 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008dc:	4823      	ldr	r0, [pc, #140]	@ (800096c <MX_GPIO_Init+0x14c>)
 80008de:	f003 f9ab 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2140      	movs	r1, #64	@ 0x40
 80008e6:	4822      	ldr	r0, [pc, #136]	@ (8000970 <MX_GPIO_Init+0x150>)
 80008e8:	f003 f9a6 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_SEN_CS_G_Pin MCU_SEL_Pin */
  GPIO_InitStruct.Pin = SPI_SEN_CS_G_Pin|MCU_SEL_Pin;
 80008ec:	2321      	movs	r3, #33	@ 0x21
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4819      	ldr	r0, [pc, #100]	@ (8000968 <MX_GPIO_Init+0x148>)
 8000904:	f002 fee2 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4812      	ldr	r0, [pc, #72]	@ (800096c <MX_GPIO_Init+0x14c>)
 8000922:	f002 fed3 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000926:	2340      	movs	r3, #64	@ 0x40
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <MX_GPIO_Init+0x150>)
 800093e:	f002 fec5 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8000942:	2310      	movs	r3, #16
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_GPIO_Init+0x154>)
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4808      	ldr	r0, [pc, #32]	@ (8000978 <MX_GPIO_Init+0x158>)
 8000956:	f002 feb9 	bl	80036cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	@ 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	46020c00 	.word	0x46020c00
 8000968:	42022000 	.word	0x42022000
 800096c:	42021c00 	.word	0x42021c00
 8000970:	42021400 	.word	0x42021400
 8000974:	10110000 	.word	0x10110000
 8000978:	42020000 	.word	0x42020000

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_6);
 8000980:	2140      	movs	r1, #64	@ 0x40
 8000982:	4804      	ldr	r0, [pc, #16]	@ (8000994 <Error_Handler+0x18>)
 8000984:	f003 f970 	bl	8003c68 <HAL_GPIO_TogglePin>
	    HAL_Delay(500);
 8000988:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800098c:	f002 fc20 	bl	80031d0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_6);
 8000990:	bf00      	nop
 8000992:	e7f5      	b.n	8000980 <Error_Handler+0x4>
 8000994:	42021400 	.word	0x42021400

08000998 <ssm_smart_sensor_mlc_init>:

#define SSM_MLC_FUNC_CFG_ENABLE 0x80
#define SSM_MLC_FUNC_CFG_DISABLE 0x00

int32_t ssm_smart_sensor_mlc_init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	int32_t ret;
	ret = CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSV16X_0, MOTION_ACCELERO);
 800099e:	2102      	movs	r1, #2
 80009a0:	2000      	movs	r0, #0
 80009a2:	f008 fd93 	bl	80094cc <CUSTOM_MOTION_SENSOR_Init>
 80009a6:	6078      	str	r0, [r7, #4]
	if (ret != BSP_ERROR_NONE)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d004      	beq.n	80009b8 <ssm_smart_sensor_mlc_init+0x20>
	{
		printf("CUSTOM_MOTION_SENSOR_Init failed.\n");
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <ssm_smart_sensor_mlc_init+0x2c>)
 80009b0:	f009 f8ba 	bl	8009b28 <puts>

	    return ret;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	e000      	b.n	80009ba <ssm_smart_sensor_mlc_init+0x22>
	}
	return BSP_ERROR_NONE;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	0800a338 	.word	0x0800a338

080009c8 <ssm_smart_sensor_mlc_configure_ucf>:

int32_t ssm_smart_sensor_mlc_configure_ucf(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
	int32_t ret = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]

	/* Load UCF configuration */
	for (uint16_t i = 0; i < (sizeof(mlc_configuration) / sizeof(ucf_line_t)); i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	807b      	strh	r3, [r7, #2]
 80009d6:	e013      	b.n	8000a00 <ssm_smart_sensor_mlc_configure_ucf+0x38>
		ret |= CUSTOM_MOTION_SENSOR_Write_Register(
 80009d8:	887b      	ldrh	r3, [r7, #2]
			CUSTOM_LSM6DSV16X_0,
			mlc_configuration[i].address,
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <ssm_smart_sensor_mlc_configure_ucf+0x54>)
 80009dc:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
		ret |= CUSTOM_MOTION_SENSOR_Write_Register(
 80009e0:	887b      	ldrh	r3, [r7, #2]
			mlc_configuration[i].data
 80009e2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a1c <ssm_smart_sensor_mlc_configure_ucf+0x54>)
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	785b      	ldrb	r3, [r3, #1]
		ret |= CUSTOM_MOTION_SENSOR_Write_Register(
 80009ea:	461a      	mov	r2, r3
 80009ec:	2000      	movs	r0, #0
 80009ee:	f008 ff59 	bl	80098a4 <CUSTOM_MOTION_SENSOR_Write_Register>
 80009f2:	4602      	mov	r2, r0
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	607b      	str	r3, [r7, #4]
	for (uint16_t i = 0; i < (sizeof(mlc_configuration) / sizeof(ucf_line_t)); i++) {
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	3301      	adds	r3, #1
 80009fe:	807b      	strh	r3, [r7, #2]
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	2bce      	cmp	r3, #206	@ 0xce
 8000a04:	d9e8      	bls.n	80009d8 <ssm_smart_sensor_mlc_configure_ucf+0x10>
		);
	}

	if (ret != BSP_ERROR_NONE)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <ssm_smart_sensor_mlc_configure_ucf+0x48>
		return ret;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	e000      	b.n	8000a12 <ssm_smart_sensor_mlc_configure_ucf+0x4a>

	return BSP_ERROR_NONE;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	0800a35c 	.word	0x0800a35c

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_MspInit+0x30>)
 8000a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x30>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x30>)
 8000a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	46020c00 	.word	0x46020c00

08000a54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <HAL_CRC_MspInit+0x3c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10e      	bne.n	8000a84 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <HAL_CRC_MspInit+0x40>)
 8000a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6c:	4a09      	ldr	r2, [pc, #36]	@ (8000a94 <HAL_CRC_MspInit+0x40>)
 8000a6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a72:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000a76:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <HAL_CRC_MspInit+0x40>)
 8000a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	40023000 	.word	0x40023000
 8000a94:	46020c00 	.word	0x46020c00

08000a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0bc      	sub	sp, #240	@ 0xf0
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	22c8      	movs	r2, #200	@ 0xc8
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f009 f83d 	bl	8009b38 <memset>
  if(huart->Instance==UART4)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a26      	ldr	r2, [pc, #152]	@ (8000b5c <HAL_UART_MspInit+0xc4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d144      	bne.n	8000b52 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ac8:	f04f 0208 	mov.w	r2, #8
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fc25 	bl	800532c <HAL_RCCEx_PeriphCLKConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000ae8:	f7ff ff48 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000af2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000af4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000af8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b10:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b40:	2308      	movs	r3, #8
 8000b42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b4e:	f002 fdbd 	bl	80036cc <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000b52:	bf00      	nop
 8000b54:	37f0      	adds	r7, #240	@ 0xf0
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40004c00 	.word	0x40004c00
 8000b60:	46020c00 	.word	0x46020c00
 8000b64:	42020000 	.word	0x42020000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbe:	f002 fae7 	bl	8003190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e00a      	b.n	8000bee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd8:	f3af 8000 	nop.w
 8000bdc:	4601      	mov	r1, r0
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	60ba      	str	r2, [r7, #8]
 8000be4:	b2ca      	uxtb	r2, r1
 8000be6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3301      	adds	r3, #1
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dbf0      	blt.n	8000bd8 <_read+0x12>
  }

  return len;
 8000bf6:	687b      	ldr	r3, [r7, #4]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e009      	b.n	8000c26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	60ba      	str	r2, [r7, #8]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fd06 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3301      	adds	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	dbf1      	blt.n	8000c12 <_write+0x12>
  }
  return len;
 8000c2e:	687b      	ldr	r3, [r7, #4]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_close>:

int _close(int file)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c60:	605a      	str	r2, [r3, #4]
  return 0;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_isatty>:

int _isatty(int file)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f008 ff3a 	bl	8009b48 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200c0000 	.word	0x200c0000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	200001b4 	.word	0x200001b4
 8000d08:	200003f0 	.word	0x200003f0

08000d0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <SystemInit+0x68>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d16:	4a17      	ldr	r2, [pc, #92]	@ (8000d74 <SystemInit+0x68>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <SystemInit+0x6c>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <SystemInit+0x6c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <SystemInit+0x6c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <SystemInit+0x6c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <SystemInit+0x6c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d78 <SystemInit+0x6c>)
 8000d3e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000d42:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000d46:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <SystemInit+0x6c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <SystemInit+0x6c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a09      	ldr	r2, [pc, #36]	@ (8000d78 <SystemInit+0x6c>)
 8000d54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <SystemInit+0x6c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <SystemInit+0x68>)
 8000d62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d66:	609a      	str	r2, [r3, #8]
  #endif
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00
 8000d78:	46020c00 	.word	0x46020c00

08000d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d80:	f7ff ffc4 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d86:	e003      	b.n	8000d90 <LoopCopyDataInit>

08000d88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d88:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d8e:	3104      	adds	r1, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d90:	480a      	ldr	r0, [pc, #40]	@ (8000dbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d98:	d3f6      	bcc.n	8000d88 <CopyDataInit>
	ldr	r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d9c:	e002      	b.n	8000da4 <LoopFillZerobss>

08000d9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000da0:	f842 3b04 	str.w	r3, [r2], #4

08000da4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <LoopForever+0x16>)
	cmp	r2, r3
 8000da6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000da8:	d3f9      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f008 fed3 	bl	8009b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dae:	f7ff fc4f 	bl	8000650 <main>

08000db2 <LoopForever>:

LoopForever:
    b LoopForever
 8000db2:	e7fe      	b.n	8000db2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000db4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000db8:	0800a60c 	.word	0x0800a60c
	ldr	r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dc0:	200000e0 	.word	0x200000e0
	ldr	r2, =_sbss
 8000dc4:	200000e0 	.word	0x200000e0
	ldr	r3, = _ebss
 8000dc8:	200003ec 	.word	0x200003ec

08000dcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_IRQHandler>
	...

08000dd0 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d103      	bne.n	8000dec <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 8000de4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	e05d      	b.n	8000ea8 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	7b1a      	ldrb	r2, [r3, #12]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	699a      	ldr	r2, [r3, #24]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a23      	ldr	r2, [pc, #140]	@ (8000eb4 <LSM6DSV16X_RegisterBusIO+0xe4>)
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a22      	ldr	r2, [pc, #136]	@ (8000eb8 <LSM6DSV16X_RegisterBusIO+0xe8>)
 8000e2e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	69da      	ldr	r2, [r3, #28]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d103      	bne.n	8000e4e <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	e02c      	b.n	8000ea8 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4798      	blx	r3
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e022      	b.n	8000ea8 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d11e      	bne.n	8000ea8 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d119      	bne.n	8000ea8 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8000e74:	2304      	movs	r3, #4
 8000e76:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8000e78:	7afb      	ldrb	r3, [r7, #11]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2112      	movs	r1, #18
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 ff18 	bl	8001cb4 <LSM6DSV16X_Write_Reg>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e8e:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8000e90:	7afb      	ldrb	r3, [r7, #11]
 8000e92:	461a      	mov	r2, r3
 8000e94:	2103      	movs	r1, #3
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 ff0c 	bl	8001cb4 <LSM6DSV16X_Write_Reg>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ea6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	080021f5 	.word	0x080021f5
 8000eb8:	0800222b 	.word	0x0800222b

08000ebc <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 ff0f 	bl	8001cea <LSM6DSV16X_Set_Mem_Bank>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ed6:	e070      	b.n	8000fba <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3320      	adds	r3, #32
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fcf2 	bl	80028c8 <lsm6dsv16x_auto_increment_set>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eee:	e064      	b.n	8000fba <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3320      	adds	r3, #32
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fd0c 	bl	8002914 <lsm6dsv16x_block_data_update_set>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f06:	e058      	b.n	8000fba <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3320      	adds	r3, #32
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fea2 	bl	8002c58 <lsm6dsv16x_fifo_mode_set>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d002      	beq.n	8000f20 <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1e:	e04c      	b.n	8000fba <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2206      	movs	r2, #6
 8000f24:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3320      	adds	r3, #32
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fa08 	bl	8002344 <lsm6dsv16x_xl_data_rate_set>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f3e:	e03c      	b.n	8000fba <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3320      	adds	r3, #32
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fd88 	bl	8002a5c <lsm6dsv16x_xl_full_scale_set>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f56:	e030      	b.n	8000fba <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2206      	movs	r2, #6
 8000f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3320      	adds	r3, #32
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 fb4e 	bl	8002608 <lsm6dsv16x_gy_data_rate_set>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f76:	e020      	b.n	8000fba <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3320      	adds	r3, #32
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fcee 	bl	8002960 <lsm6dsv16x_gy_full_scale_set>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f8e:	e014      	b.n	8000fba <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3320      	adds	r3, #32
 8000f9c:	7b39      	ldrb	r1, [r7, #12]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fe80 	bl	8002ca4 <lsm6dsv16x_ah_qvar_mode_set>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fae:	e004      	b.n	8000fba <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f898 	bl	8001100 <LSM6DSV16X_ACC_Disable>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fda:	e025      	b.n	8001028 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fb6a 	bl	80016b6 <LSM6DSV16X_GYRO_Disable>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fec:	e01c      	b.n	8001028 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	f36f 0300 	bfc	r3, #0, #1
 8001004:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3320      	adds	r3, #32
 800100a:	7b39      	ldrb	r1, [r7, #12]
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fe49 	bl	8002ca4 <lsm6dsv16x_ah_qvar_mode_set>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800101c:	e004      	b.n	8001028 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3320      	adds	r3, #32
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f001 f96e 	bl	8002322 <lsm6dsv16x_device_id_get>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 800104c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001050:	e000      	b.n	8001054 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2201      	movs	r2, #1
 8001070:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2200      	movs	r2, #0
 8001076:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2201      	movs	r2, #1
 800107c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001084:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2210      	movs	r2, #16
 800108a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	@ (80010b4 <LSM6DSV16X_GetCapabilities+0x58>)
 8001096:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	4a06      	ldr	r2, [pc, #24]	@ (80010b4 <LSM6DSV16X_GetCapabilities+0x58>)
 800109c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	45f00000 	.word	0x45f00000

080010b8 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e014      	b.n	80010f8 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f103 0220 	add.w	r2, r3, #32
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80010da:	4619      	mov	r1, r3
 80010dc:	4610      	mov	r0, r2
 80010de:	f001 f931 	bl	8002344 <lsm6dsv16x_xl_data_rate_set>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ec:	e004      	b.n	80010f8 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e01f      	b.n	8001156 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f103 0220 	add.w	r2, r3, #32
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3333      	adds	r3, #51	@ 0x33
 8001120:	4619      	mov	r1, r3
 8001122:	4610      	mov	r0, r2
 8001124:	f001 f960 	bl	80023e8 <lsm6dsv16x_xl_data_rate_get>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001132:	e010      	b.n	8001156 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3320      	adds	r3, #32
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f001 f902 	bl	8002344 <lsm6dsv16x_xl_data_rate_set>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114a:	e004      	b.n	8001156 <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3320      	adds	r3, #32
 8001172:	f107 020b 	add.w	r2, r7, #11
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fc95 	bl	8002aa8 <lsm6dsv16x_xl_full_scale_get>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8001184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001188:	e023      	b.n	80011d2 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 800118a:	7afb      	ldrb	r3, [r7, #11]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d81b      	bhi.n	80011c8 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 8001190:	a201      	add	r2, pc, #4	@ (adr r2, 8001198 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011b1 	.word	0x080011b1
 80011a0:	080011b9 	.word	0x080011b9
 80011a4:	080011c1 	.word	0x080011c1
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4a0c      	ldr	r2, [pc, #48]	@ (80011dc <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 80011ac:	601a      	str	r2, [r3, #0]
      break;
 80011ae:	e00f      	b.n	80011d0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 80011b4:	601a      	str	r2, [r3, #0]
      break;
 80011b6:	e00b      	b.n	80011d0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 80011bc:	601a      	str	r2, [r3, #0]
      break;
 80011be:	e007      	b.n	80011d0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 80011c4:	601a      	str	r2, [r3, #0]
      break;
 80011c6:	e003      	b.n	80011d0 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011cc:	60fb      	str	r3, [r7, #12]
      break;
 80011ce:	bf00      	nop
  }

  return ret;
 80011d0:	68fb      	ldr	r3, [r7, #12]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	3d79db23 	.word	0x3d79db23
 80011e0:	3df9db23 	.word	0x3df9db23
 80011e4:	3e79db23 	.word	0x3e79db23
 80011e8:	3ef9db23 	.word	0x3ef9db23

080011ec <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3320      	adds	r3, #32
 80011fe:	f107 020b 	add.w	r2, r7, #11
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f001 f8ef 	bl	80023e8 <lsm6dsv16x_xl_data_rate_get>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001214:	e0ea      	b.n	80013ec <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	2b2c      	cmp	r3, #44	@ 0x2c
 800121a:	f200 80e2 	bhi.w	80013e2 <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 800121e:	a201      	add	r2, pc, #4	@ (adr r2, 8001224 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	080012d9 	.word	0x080012d9
 8001228:	080012e3 	.word	0x080012e3
 800122c:	080012eb 	.word	0x080012eb
 8001230:	080012fb 	.word	0x080012fb
 8001234:	08001313 	.word	0x08001313
 8001238:	0800132b 	.word	0x0800132b
 800123c:	08001343 	.word	0x08001343
 8001240:	0800135b 	.word	0x0800135b
 8001244:	08001373 	.word	0x08001373
 8001248:	0800138b 	.word	0x0800138b
 800124c:	080013a3 	.word	0x080013a3
 8001250:	080013bb 	.word	0x080013bb
 8001254:	080013d3 	.word	0x080013d3
 8001258:	080013e3 	.word	0x080013e3
 800125c:	080013e3 	.word	0x080013e3
 8001260:	080013e3 	.word	0x080013e3
 8001264:	080013e3 	.word	0x080013e3
 8001268:	080013e3 	.word	0x080013e3
 800126c:	080013e3 	.word	0x080013e3
 8001270:	08001303 	.word	0x08001303
 8001274:	0800131b 	.word	0x0800131b
 8001278:	08001333 	.word	0x08001333
 800127c:	0800134b 	.word	0x0800134b
 8001280:	08001363 	.word	0x08001363
 8001284:	0800137b 	.word	0x0800137b
 8001288:	08001393 	.word	0x08001393
 800128c:	080013ab 	.word	0x080013ab
 8001290:	080013c3 	.word	0x080013c3
 8001294:	080013db 	.word	0x080013db
 8001298:	080013e3 	.word	0x080013e3
 800129c:	080013e3 	.word	0x080013e3
 80012a0:	080013e3 	.word	0x080013e3
 80012a4:	080013e3 	.word	0x080013e3
 80012a8:	080013e3 	.word	0x080013e3
 80012ac:	080013e3 	.word	0x080013e3
 80012b0:	080012f3 	.word	0x080012f3
 80012b4:	0800130b 	.word	0x0800130b
 80012b8:	08001323 	.word	0x08001323
 80012bc:	0800133b 	.word	0x0800133b
 80012c0:	08001353 	.word	0x08001353
 80012c4:	0800136b 	.word	0x0800136b
 80012c8:	08001383 	.word	0x08001383
 80012cc:	0800139b 	.word	0x0800139b
 80012d0:	080013b3 	.word	0x080013b3
 80012d4:	080013cb 	.word	0x080013cb
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
      break;
 80012e0:	e083      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	4a43      	ldr	r2, [pc, #268]	@ (80013f4 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 80012e6:	601a      	str	r2, [r3, #0]
      break;
 80012e8:	e07f      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	4a42      	ldr	r2, [pc, #264]	@ (80013f8 <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 80012ee:	601a      	str	r2, [r3, #0]
      break;
 80012f0:	e07b      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	4a41      	ldr	r2, [pc, #260]	@ (80013fc <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 80012f6:	601a      	str	r2, [r3, #0]
      break;
 80012f8:	e077      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	4a40      	ldr	r2, [pc, #256]	@ (8001400 <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 80012fe:	601a      	str	r2, [r3, #0]
      break;
 8001300:	e073      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	4a3f      	ldr	r2, [pc, #252]	@ (8001404 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 8001306:	601a      	str	r2, [r3, #0]
      break;
 8001308:	e06f      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	4a3e      	ldr	r2, [pc, #248]	@ (8001408 <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 800130e:	601a      	str	r2, [r3, #0]
      break;
 8001310:	e06b      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	4a3d      	ldr	r2, [pc, #244]	@ (800140c <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 8001316:	601a      	str	r2, [r3, #0]
      break;
 8001318:	e067      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	4a3c      	ldr	r2, [pc, #240]	@ (8001410 <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 800131e:	601a      	str	r2, [r3, #0]
      break;
 8001320:	e063      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4a3b      	ldr	r2, [pc, #236]	@ (8001414 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 8001326:	601a      	str	r2, [r3, #0]
      break;
 8001328:	e05f      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	4a3a      	ldr	r2, [pc, #232]	@ (8001418 <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 800132e:	601a      	str	r2, [r3, #0]
      break;
 8001330:	e05b      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	4a39      	ldr	r2, [pc, #228]	@ (800141c <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 8001336:	601a      	str	r2, [r3, #0]
      break;
 8001338:	e057      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	4a38      	ldr	r2, [pc, #224]	@ (8001420 <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 800133e:	601a      	str	r2, [r3, #0]
      break;
 8001340:	e053      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4a37      	ldr	r2, [pc, #220]	@ (8001424 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 8001346:	601a      	str	r2, [r3, #0]
      break;
 8001348:	e04f      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4a36      	ldr	r2, [pc, #216]	@ (8001428 <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 800134e:	601a      	str	r2, [r3, #0]
      break;
 8001350:	e04b      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	4a35      	ldr	r2, [pc, #212]	@ (800142c <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 8001356:	601a      	str	r2, [r3, #0]
      break;
 8001358:	e047      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4a34      	ldr	r2, [pc, #208]	@ (8001430 <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 800135e:	601a      	str	r2, [r3, #0]
      break;
 8001360:	e043      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4a33      	ldr	r2, [pc, #204]	@ (8001434 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 8001366:	601a      	str	r2, [r3, #0]
      break;
 8001368:	e03f      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	4a32      	ldr	r2, [pc, #200]	@ (8001438 <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 800136e:	601a      	str	r2, [r3, #0]
      break;
 8001370:	e03b      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4a31      	ldr	r2, [pc, #196]	@ (800143c <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 8001376:	601a      	str	r2, [r3, #0]
      break;
 8001378:	e037      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4a30      	ldr	r2, [pc, #192]	@ (8001440 <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 800137e:	601a      	str	r2, [r3, #0]
      break;
 8001380:	e033      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	4a2f      	ldr	r2, [pc, #188]	@ (8001444 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 8001386:	601a      	str	r2, [r3, #0]
      break;
 8001388:	e02f      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	4a2e      	ldr	r2, [pc, #184]	@ (8001448 <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 800138e:	601a      	str	r2, [r3, #0]
      break;
 8001390:	e02b      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4a2d      	ldr	r2, [pc, #180]	@ (800144c <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 8001396:	601a      	str	r2, [r3, #0]
      break;
 8001398:	e027      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4a2c      	ldr	r2, [pc, #176]	@ (8001450 <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 800139e:	601a      	str	r2, [r3, #0]
      break;
 80013a0:	e023      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001454 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 80013a6:	601a      	str	r2, [r3, #0]
      break;
 80013a8:	e01f      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001458 <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 80013ae:	601a      	str	r2, [r3, #0]
      break;
 80013b0:	e01b      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	4a29      	ldr	r2, [pc, #164]	@ (800145c <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 80013b6:	601a      	str	r2, [r3, #0]
      break;
 80013b8:	e017      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	4a28      	ldr	r2, [pc, #160]	@ (8001460 <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 80013be:	601a      	str	r2, [r3, #0]
      break;
 80013c0:	e013      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	4a27      	ldr	r2, [pc, #156]	@ (8001464 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 80013c6:	601a      	str	r2, [r3, #0]
      break;
 80013c8:	e00f      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	4a26      	ldr	r2, [pc, #152]	@ (8001468 <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 80013ce:	601a      	str	r2, [r3, #0]
      break;
 80013d0:	e00b      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	4a25      	ldr	r2, [pc, #148]	@ (800146c <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 80013d6:	601a      	str	r2, [r3, #0]
      break;
 80013d8:	e007      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4a24      	ldr	r2, [pc, #144]	@ (8001470 <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 80013de:	601a      	str	r2, [r3, #0]
      break;
 80013e0:	e003      	b.n	80013ea <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e6:	60fb      	str	r3, [r7, #12]
      break;
 80013e8:	bf00      	nop
  }

  return ret;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	3ff00000 	.word	0x3ff00000
 80013f8:	40f00000 	.word	0x40f00000
 80013fc:	41480000 	.word	0x41480000
 8001400:	41700000 	.word	0x41700000
 8001404:	417a0000 	.word	0x417a0000
 8001408:	41c80000 	.word	0x41c80000
 800140c:	41f00000 	.word	0x41f00000
 8001410:	41fa0000 	.word	0x41fa0000
 8001414:	42480000 	.word	0x42480000
 8001418:	42700000 	.word	0x42700000
 800141c:	427a0000 	.word	0x427a0000
 8001420:	42c80000 	.word	0x42c80000
 8001424:	42f00000 	.word	0x42f00000
 8001428:	42fa0000 	.word	0x42fa0000
 800142c:	43480000 	.word	0x43480000
 8001430:	43700000 	.word	0x43700000
 8001434:	437a0000 	.word	0x437a0000
 8001438:	43c80000 	.word	0x43c80000
 800143c:	43f00000 	.word	0x43f00000
 8001440:	43fa0000 	.word	0x43fa0000
 8001444:	44480000 	.word	0x44480000
 8001448:	44700000 	.word	0x44700000
 800144c:	447a0000 	.word	0x447a0000
 8001450:	44c80000 	.word	0x44c80000
 8001454:	44f00000 	.word	0x44f00000
 8001458:	44fa0000 	.word	0x44fa0000
 800145c:	45480000 	.word	0x45480000
 8001460:	45700000 	.word	0x45700000
 8001464:	457a0000 	.word	0x457a0000
 8001468:	45c80000 	.word	0x45c80000
 800146c:	45f00000 	.word	0x45f00000
 8001470:	45fa0000 	.word	0x45fa0000

08001474 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001486:	2b01      	cmp	r3, #1
 8001488:	d106      	bne.n	8001498 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800148a:	ed97 0a00 	vldr	s0, [r7]
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fc52 	bl	8001d38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 8001494:	4603      	mov	r3, r0
 8001496:	e005      	b.n	80014a4 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001498:	ed97 0a00 	vldr	s0, [r7]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fced 	bl	8001e7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 80014a2:	4603      	mov	r3, r0
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3320      	adds	r3, #32
 80014be:	f107 020b 	add.w	r2, r7, #11
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 faef 	bl	8002aa8 <lsm6dsv16x_xl_full_scale_get>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014d4:	e023      	b.n	800151e <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80014d6:	7afb      	ldrb	r3, [r7, #11]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d81b      	bhi.n	8001514 <LSM6DSV16X_ACC_GetFullScale+0x68>
 80014dc:	a201      	add	r2, pc, #4	@ (adr r2, 80014e4 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	080014fd 	.word	0x080014fd
 80014ec:	08001505 	.word	0x08001505
 80014f0:	0800150d 	.word	0x0800150d
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2202      	movs	r2, #2
 80014f8:	601a      	str	r2, [r3, #0]
      break;
 80014fa:	e00f      	b.n	800151c <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2204      	movs	r2, #4
 8001500:	601a      	str	r2, [r3, #0]
      break;
 8001502:	e00b      	b.n	800151c <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2208      	movs	r2, #8
 8001508:	601a      	str	r2, [r3, #0]
      break;
 800150a:	e007      	b.n	800151c <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2210      	movs	r2, #16
 8001510:	601a      	str	r2, [r3, #0]
      break;
 8001512:	e003      	b.n	800151c <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001518:	60fb      	str	r3, [r7, #12]
      break;
 800151a:	bf00      	nop
  }

  return ret;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop

08001528 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2b02      	cmp	r3, #2
 8001536:	dd0b      	ble.n	8001550 <LSM6DSV16X_ACC_SetFullScale+0x28>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2b04      	cmp	r3, #4
 800153c:	dd06      	ble.n	800154c <LSM6DSV16X_ACC_SetFullScale+0x24>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b08      	cmp	r3, #8
 8001542:	dc01      	bgt.n	8001548 <LSM6DSV16X_ACC_SetFullScale+0x20>
 8001544:	2302      	movs	r3, #2
 8001546:	e004      	b.n	8001552 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8001548:	2303      	movs	r3, #3
 800154a:	e002      	b.n	8001552 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8001550:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 8001552:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3320      	adds	r3, #32
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fa7d 	bl	8002a5c <lsm6dsv16x_xl_full_scale_set>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800156c:	e000      	b.n	8001570 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3320      	adds	r3, #32
 8001586:	f107 0208 	add.w	r2, r7, #8
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fb16 	bl	8002bbe <lsm6dsv16x_acceleration_raw_get>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800159c:	e00c      	b.n	80015b8 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 800159e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80015a6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80015ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3320      	adds	r3, #32
 80015d4:	f107 0210 	add.w	r2, r7, #16
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 faef 	bl	8002bbe <lsm6dsv16x_acceleration_raw_get>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ea:	e03c      	b.n	8001666 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fdb4 	bl	8001160 <LSM6DSV16X_ACC_GetSensitivity>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001602:	e030      	b.n	8001666 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001604:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001610:	edd7 7a03 	vldr	s15, [r7, #12]
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800161c:	ee17 2a90 	vmov	r2, s15
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001624:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001630:	edd7 7a03 	vldr	s15, [r7, #12]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163c:	ee17 2a90 	vmov	r2, s15
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001644:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001650:	edd7 7a03 	vldr	s15, [r7, #12]
 8001654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165c:	ee17 2a90 	vmov	r2, s15
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e014      	b.n	80016ae <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f103 0220 	add.w	r2, r3, #32
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f000 ffb8 	bl	8002608 <lsm6dsv16x_gy_data_rate_set>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016a2:	e004      	b.n	80016ae <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e01f      	b.n	800170c <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f103 0220 	add.w	r2, r3, #32
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3334      	adds	r3, #52	@ 0x34
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f000 ffe5 	bl	80026a8 <lsm6dsv16x_gy_data_rate_get>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e8:	e010      	b.n	800170c <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3320      	adds	r3, #32
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 ff89 	bl	8002608 <lsm6dsv16x_gy_data_rate_set>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001700:	e004      	b.n	800170c <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3320      	adds	r3, #32
 8001726:	f107 020b 	add.w	r2, r7, #11
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f001 f93d 	bl	80029ac <lsm6dsv16x_gy_full_scale_get>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800173c:	e03d      	b.n	80017ba <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 800173e:	7afb      	ldrb	r3, [r7, #11]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d835      	bhi.n	80017b0 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 8001744:	a201      	add	r2, pc, #4	@ (adr r2, 800174c <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 8001746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174a:	bf00      	nop
 800174c:	08001781 	.word	0x08001781
 8001750:	08001789 	.word	0x08001789
 8001754:	08001791 	.word	0x08001791
 8001758:	08001799 	.word	0x08001799
 800175c:	080017a1 	.word	0x080017a1
 8001760:	080017b1 	.word	0x080017b1
 8001764:	080017b1 	.word	0x080017b1
 8001768:	080017b1 	.word	0x080017b1
 800176c:	080017b1 	.word	0x080017b1
 8001770:	080017b1 	.word	0x080017b1
 8001774:	080017b1 	.word	0x080017b1
 8001778:	080017b1 	.word	0x080017b1
 800177c:	080017a9 	.word	0x080017a9
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8001784:	601a      	str	r2, [r3, #0]
      break;
 8001786:	e017      	b.n	80017b8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 800178c:	601a      	str	r2, [r3, #0]
      break;
 800178e:	e013      	b.n	80017b8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4a0e      	ldr	r2, [pc, #56]	@ (80017cc <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 8001794:	601a      	str	r2, [r3, #0]
      break;
 8001796:	e00f      	b.n	80017b8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 800179c:	601a      	str	r2, [r3, #0]
      break;
 800179e:	e00b      	b.n	80017b8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4a0c      	ldr	r2, [pc, #48]	@ (80017d4 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 80017a4:	601a      	str	r2, [r3, #0]
      break;
 80017a6:	e007      	b.n	80017b8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 80017ac:	601a      	str	r2, [r3, #0]
      break;
 80017ae:	e003      	b.n	80017b8 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b4:	60fb      	str	r3, [r7, #12]
      break;
 80017b6:	bf00      	nop
  }

  return ret;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	408c0000 	.word	0x408c0000
 80017c8:	410c0000 	.word	0x410c0000
 80017cc:	418c0000 	.word	0x418c0000
 80017d0:	420c0000 	.word	0x420c0000
 80017d4:	428c0000 	.word	0x428c0000
 80017d8:	430c0000 	.word	0x430c0000

080017dc <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3320      	adds	r3, #32
 80017ee:	f107 020b 	add.w	r2, r7, #11
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 ff57 	bl	80026a8 <lsm6dsv16x_gy_data_rate_get>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001804:	e0ea      	b.n	80019dc <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8001806:	7afb      	ldrb	r3, [r7, #11]
 8001808:	2b2c      	cmp	r3, #44	@ 0x2c
 800180a:	f200 80e2 	bhi.w	80019d2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 800180e:	a201      	add	r2, pc, #4	@ (adr r2, 8001814 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	080018c9 	.word	0x080018c9
 8001818:	080018d3 	.word	0x080018d3
 800181c:	080018db 	.word	0x080018db
 8001820:	080018eb 	.word	0x080018eb
 8001824:	08001903 	.word	0x08001903
 8001828:	0800191b 	.word	0x0800191b
 800182c:	08001933 	.word	0x08001933
 8001830:	0800194b 	.word	0x0800194b
 8001834:	08001963 	.word	0x08001963
 8001838:	0800197b 	.word	0x0800197b
 800183c:	08001993 	.word	0x08001993
 8001840:	080019ab 	.word	0x080019ab
 8001844:	080019c3 	.word	0x080019c3
 8001848:	080019d3 	.word	0x080019d3
 800184c:	080019d3 	.word	0x080019d3
 8001850:	080019d3 	.word	0x080019d3
 8001854:	080019d3 	.word	0x080019d3
 8001858:	080019d3 	.word	0x080019d3
 800185c:	080019d3 	.word	0x080019d3
 8001860:	080018f3 	.word	0x080018f3
 8001864:	0800190b 	.word	0x0800190b
 8001868:	08001923 	.word	0x08001923
 800186c:	0800193b 	.word	0x0800193b
 8001870:	08001953 	.word	0x08001953
 8001874:	0800196b 	.word	0x0800196b
 8001878:	08001983 	.word	0x08001983
 800187c:	0800199b 	.word	0x0800199b
 8001880:	080019b3 	.word	0x080019b3
 8001884:	080019cb 	.word	0x080019cb
 8001888:	080019d3 	.word	0x080019d3
 800188c:	080019d3 	.word	0x080019d3
 8001890:	080019d3 	.word	0x080019d3
 8001894:	080019d3 	.word	0x080019d3
 8001898:	080019d3 	.word	0x080019d3
 800189c:	080019d3 	.word	0x080019d3
 80018a0:	080018e3 	.word	0x080018e3
 80018a4:	080018fb 	.word	0x080018fb
 80018a8:	08001913 	.word	0x08001913
 80018ac:	0800192b 	.word	0x0800192b
 80018b0:	08001943 	.word	0x08001943
 80018b4:	0800195b 	.word	0x0800195b
 80018b8:	08001973 	.word	0x08001973
 80018bc:	0800198b 	.word	0x0800198b
 80018c0:	080019a3 	.word	0x080019a3
 80018c4:	080019bb 	.word	0x080019bb
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
      break;
 80018d0:	e083      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4a43      	ldr	r2, [pc, #268]	@ (80019e4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 80018d6:	601a      	str	r2, [r3, #0]
      break;
 80018d8:	e07f      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	4a42      	ldr	r2, [pc, #264]	@ (80019e8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 80018de:	601a      	str	r2, [r3, #0]
      break;
 80018e0:	e07b      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	4a41      	ldr	r2, [pc, #260]	@ (80019ec <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 80018e6:	601a      	str	r2, [r3, #0]
      break;
 80018e8:	e077      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	4a40      	ldr	r2, [pc, #256]	@ (80019f0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 80018ee:	601a      	str	r2, [r3, #0]
      break;
 80018f0:	e073      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4a3f      	ldr	r2, [pc, #252]	@ (80019f4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 80018f6:	601a      	str	r2, [r3, #0]
      break;
 80018f8:	e06f      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	4a3e      	ldr	r2, [pc, #248]	@ (80019f8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 80018fe:	601a      	str	r2, [r3, #0]
      break;
 8001900:	e06b      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4a3d      	ldr	r2, [pc, #244]	@ (80019fc <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 8001906:	601a      	str	r2, [r3, #0]
      break;
 8001908:	e067      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a00 <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 800190e:	601a      	str	r2, [r3, #0]
      break;
 8001910:	e063      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	4a3b      	ldr	r2, [pc, #236]	@ (8001a04 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 8001916:	601a      	str	r2, [r3, #0]
      break;
 8001918:	e05f      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a08 <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 800191e:	601a      	str	r2, [r3, #0]
      break;
 8001920:	e05b      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	4a39      	ldr	r2, [pc, #228]	@ (8001a0c <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 8001926:	601a      	str	r2, [r3, #0]
      break;
 8001928:	e057      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	4a38      	ldr	r2, [pc, #224]	@ (8001a10 <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 800192e:	601a      	str	r2, [r3, #0]
      break;
 8001930:	e053      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	4a37      	ldr	r2, [pc, #220]	@ (8001a14 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 8001936:	601a      	str	r2, [r3, #0]
      break;
 8001938:	e04f      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	4a36      	ldr	r2, [pc, #216]	@ (8001a18 <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 800193e:	601a      	str	r2, [r3, #0]
      break;
 8001940:	e04b      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	4a35      	ldr	r2, [pc, #212]	@ (8001a1c <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 8001946:	601a      	str	r2, [r3, #0]
      break;
 8001948:	e047      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	4a34      	ldr	r2, [pc, #208]	@ (8001a20 <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 800194e:	601a      	str	r2, [r3, #0]
      break;
 8001950:	e043      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	4a33      	ldr	r2, [pc, #204]	@ (8001a24 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 8001956:	601a      	str	r2, [r3, #0]
      break;
 8001958:	e03f      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	4a32      	ldr	r2, [pc, #200]	@ (8001a28 <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 800195e:	601a      	str	r2, [r3, #0]
      break;
 8001960:	e03b      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	4a31      	ldr	r2, [pc, #196]	@ (8001a2c <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 8001966:	601a      	str	r2, [r3, #0]
      break;
 8001968:	e037      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4a30      	ldr	r2, [pc, #192]	@ (8001a30 <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 800196e:	601a      	str	r2, [r3, #0]
      break;
 8001970:	e033      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	4a2f      	ldr	r2, [pc, #188]	@ (8001a34 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 8001976:	601a      	str	r2, [r3, #0]
      break;
 8001978:	e02f      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a38 <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 800197e:	601a      	str	r2, [r3, #0]
      break;
 8001980:	e02b      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	4a2d      	ldr	r2, [pc, #180]	@ (8001a3c <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 8001986:	601a      	str	r2, [r3, #0]
      break;
 8001988:	e027      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a40 <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 800198e:	601a      	str	r2, [r3, #0]
      break;
 8001990:	e023      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	4a2b      	ldr	r2, [pc, #172]	@ (8001a44 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 8001996:	601a      	str	r2, [r3, #0]
      break;
 8001998:	e01f      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a48 <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 800199e:	601a      	str	r2, [r3, #0]
      break;
 80019a0:	e01b      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	4a29      	ldr	r2, [pc, #164]	@ (8001a4c <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 80019a6:	601a      	str	r2, [r3, #0]
      break;
 80019a8:	e017      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4a28      	ldr	r2, [pc, #160]	@ (8001a50 <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 80019ae:	601a      	str	r2, [r3, #0]
      break;
 80019b0:	e013      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	4a27      	ldr	r2, [pc, #156]	@ (8001a54 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 80019b6:	601a      	str	r2, [r3, #0]
      break;
 80019b8:	e00f      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	4a26      	ldr	r2, [pc, #152]	@ (8001a58 <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 80019be:	601a      	str	r2, [r3, #0]
      break;
 80019c0:	e00b      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	4a25      	ldr	r2, [pc, #148]	@ (8001a5c <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 80019c6:	601a      	str	r2, [r3, #0]
      break;
 80019c8:	e007      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	4a24      	ldr	r2, [pc, #144]	@ (8001a60 <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 80019ce:	601a      	str	r2, [r3, #0]
      break;
 80019d0:	e003      	b.n	80019da <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019d6:	60fb      	str	r3, [r7, #12]
      break;
 80019d8:	bf00      	nop
  }

  return ret;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	3ff00000 	.word	0x3ff00000
 80019e8:	40f00000 	.word	0x40f00000
 80019ec:	41480000 	.word	0x41480000
 80019f0:	41700000 	.word	0x41700000
 80019f4:	417a0000 	.word	0x417a0000
 80019f8:	41c80000 	.word	0x41c80000
 80019fc:	41f00000 	.word	0x41f00000
 8001a00:	41fa0000 	.word	0x41fa0000
 8001a04:	42480000 	.word	0x42480000
 8001a08:	42700000 	.word	0x42700000
 8001a0c:	427a0000 	.word	0x427a0000
 8001a10:	42c80000 	.word	0x42c80000
 8001a14:	42f00000 	.word	0x42f00000
 8001a18:	42fa0000 	.word	0x42fa0000
 8001a1c:	43480000 	.word	0x43480000
 8001a20:	43700000 	.word	0x43700000
 8001a24:	437a0000 	.word	0x437a0000
 8001a28:	43c80000 	.word	0x43c80000
 8001a2c:	43f00000 	.word	0x43f00000
 8001a30:	43fa0000 	.word	0x43fa0000
 8001a34:	44480000 	.word	0x44480000
 8001a38:	44700000 	.word	0x44700000
 8001a3c:	447a0000 	.word	0x447a0000
 8001a40:	44c80000 	.word	0x44c80000
 8001a44:	44f00000 	.word	0x44f00000
 8001a48:	44fa0000 	.word	0x44fa0000
 8001a4c:	45480000 	.word	0x45480000
 8001a50:	45700000 	.word	0x45700000
 8001a54:	457a0000 	.word	0x457a0000
 8001a58:	45c80000 	.word	0x45c80000
 8001a5c:	45f00000 	.word	0x45f00000
 8001a60:	45fa0000 	.word	0x45fa0000

08001a64 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d106      	bne.n	8001a88 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001a7a:	ed97 0a00 	vldr	s0, [r7]
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fa94 	bl	8001fac <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	e005      	b.n	8001a94 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001a88:	ed97 0a00 	vldr	s0, [r7]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fb23 	bl	80020d8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8001a92:	4603      	mov	r3, r0
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3320      	adds	r3, #32
 8001aae:	f107 020b 	add.w	r2, r7, #11
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 ff79 	bl	80029ac <lsm6dsv16x_gy_full_scale_get>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac4:	e041      	b.n	8001b4a <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d839      	bhi.n	8001b40 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8001acc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001b09 	.word	0x08001b09
 8001ad8:	08001b11 	.word	0x08001b11
 8001adc:	08001b19 	.word	0x08001b19
 8001ae0:	08001b23 	.word	0x08001b23
 8001ae4:	08001b2d 	.word	0x08001b2d
 8001ae8:	08001b41 	.word	0x08001b41
 8001aec:	08001b41 	.word	0x08001b41
 8001af0:	08001b41 	.word	0x08001b41
 8001af4:	08001b41 	.word	0x08001b41
 8001af8:	08001b41 	.word	0x08001b41
 8001afc:	08001b41 	.word	0x08001b41
 8001b00:	08001b41 	.word	0x08001b41
 8001b04:	08001b37 	.word	0x08001b37
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	227d      	movs	r2, #125	@ 0x7d
 8001b0c:	601a      	str	r2, [r3, #0]
      break;
 8001b0e:	e01b      	b.n	8001b48 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	22fa      	movs	r2, #250	@ 0xfa
 8001b14:	601a      	str	r2, [r3, #0]
      break;
 8001b16:	e017      	b.n	8001b48 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b1e:	601a      	str	r2, [r3, #0]
      break;
 8001b20:	e012      	b.n	8001b48 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b28:	601a      	str	r2, [r3, #0]
      break;
 8001b2a:	e00d      	b.n	8001b48 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b32:	601a      	str	r2, [r3, #0]
      break;
 8001b34:	e008      	b.n	8001b48 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001b3c:	601a      	str	r2, [r3, #0]
      break;
 8001b3e:	e003      	b.n	8001b48 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b44:	60fb      	str	r3, [r7, #12]
      break;
 8001b46:	bf00      	nop
  }

  return ret;
 8001b48:	68fb      	ldr	r3, [r7, #12]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop

08001b54 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b7d      	cmp	r3, #125	@ 0x7d
 8001b62:	dd18      	ble.n	8001b96 <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2bfa      	cmp	r3, #250	@ 0xfa
 8001b68:	dd13      	ble.n	8001b92 <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b70:	dd0d      	ble.n	8001b8e <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b78:	dd07      	ble.n	8001b8a <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b80:	dc01      	bgt.n	8001b86 <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8001b82:	2304      	movs	r3, #4
 8001b84:	e008      	b.n	8001b98 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8001b86:	230c      	movs	r3, #12
 8001b88:	e006      	b.n	8001b98 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e004      	b.n	8001b98 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e002      	b.n	8001b98 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8001b96:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8001b98:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3320      	adds	r3, #32
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fedc 	bl	8002960 <lsm6dsv16x_gy_full_scale_set>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb2:	e000      	b.n	8001bb6 <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3320      	adds	r3, #32
 8001bcc:	f107 0208 	add.w	r2, r7, #8
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 ffa6 	bl	8002b24 <lsm6dsv16x_angular_rate_raw_get>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001be2:	e00c      	b.n	8001bfe <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8001be4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8001bec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8001bf4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3320      	adds	r3, #32
 8001c1a:	f107 0210 	add.w	r2, r7, #16
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 ff7f 	bl	8002b24 <lsm6dsv16x_angular_rate_raw_get>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c30:	e03c      	b.n	8001cac <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fd6b 	bl	8001714 <LSM6DSV16X_GYRO_GetSensitivity>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c48:	e030      	b.n	8001cac <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001c4a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c62:	ee17 2a90 	vmov	r2, s15
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001c6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c82:	ee17 2a90 	vmov	r2, s15
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001c8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca2:	ee17 2a90 	vmov	r2, s15
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f103 0020 	add.w	r0, r3, #32
 8001cca:	1cba      	adds	r2, r7, #2
 8001ccc:	78f9      	ldrb	r1, [r7, #3]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f000 fade 	bl	8002290 <lsm6dsv16x_write_reg>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cde:	e000      	b.n	8001ce2 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d006      	beq.n	8001d0e <LSM6DSV16X_Set_Mem_Bank+0x24>
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d101      	bne.n	8001d0a <LSM6DSV16X_Set_Mem_Bank+0x20>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e002      	b.n	8001d10 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8001d0e:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8001d10:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3320      	adds	r3, #32
 8001d16:	7afa      	ldrb	r2, [r7, #11]
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fad0 	bl	80022c0 <lsm6dsv16x_mem_bank_set>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d2a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8001d44:	edd7 7a00 	vldr	s15, [r7]
 8001d48:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8001d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	d801      	bhi.n	8001d5a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e06e      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001d5a:	edd7 7a00 	vldr	s15, [r7]
 8001d5e:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8001d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	d801      	bhi.n	8001d70 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e063      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001d70:	edd7 7a00 	vldr	s15, [r7]
 8001d74:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	d801      	bhi.n	8001d86 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e058      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001d86:	edd7 7a00 	vldr	s15, [r7]
 8001d8a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	d801      	bhi.n	8001d9c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8001d98:	2304      	movs	r3, #4
 8001d9a:	e04d      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001d9c:	edd7 7a00 	vldr	s15, [r7]
 8001da0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001e60 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8001da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	d801      	bhi.n	8001db2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e042      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001db2:	edd7 7a00 	vldr	s15, [r7]
 8001db6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001e64 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8001dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d801      	bhi.n	8001dc8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8001dc4:	2306      	movs	r3, #6
 8001dc6:	e037      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001dc8:	edd7 7a00 	vldr	s15, [r7]
 8001dcc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001e68 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8001dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd8:	d801      	bhi.n	8001dde <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e02c      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001dde:	edd7 7a00 	vldr	s15, [r7]
 8001de2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001e6c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8001de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	d801      	bhi.n	8001df4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8001df0:	2308      	movs	r3, #8
 8001df2:	e021      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001df4:	edd7 7a00 	vldr	s15, [r7]
 8001df8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001e70 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8001dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	d801      	bhi.n	8001e0a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8001e06:	2309      	movs	r3, #9
 8001e08:	e016      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001e0a:	edd7 7a00 	vldr	s15, [r7]
 8001e0e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001e74 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1a:	d801      	bhi.n	8001e20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	e00b      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001e20:	edd7 7a00 	vldr	s15, [r7]
 8001e24:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001e78 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8001e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	d801      	bhi.n	8001e36 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8001e32:	230b      	movs	r3, #11
 8001e34:	e000      	b.n	8001e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001e36:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8001e38:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3320      	adds	r3, #32
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fa7e 	bl	8002344 <lsm6dsv16x_xl_data_rate_set>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e52:	e000      	b.n	8001e56 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	42700000 	.word	0x42700000
 8001e64:	42f00000 	.word	0x42f00000
 8001e68:	43700000 	.word	0x43700000
 8001e6c:	43f00000 	.word	0x43f00000
 8001e70:	44700000 	.word	0x44700000
 8001e74:	44f00000 	.word	0x44f00000
 8001e78:	45700000 	.word	0x45700000

08001e7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8001e88:	edd7 7a00 	vldr	s15, [r7]
 8001e8c:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8001e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	d801      	bhi.n	8001e9e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e06e      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001e9e:	edd7 7a00 	vldr	s15, [r7]
 8001ea2:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8001ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	d801      	bhi.n	8001eb4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e063      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001eb4:	edd7 7a00 	vldr	s15, [r7]
 8001eb8:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	d801      	bhi.n	8001eca <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e058      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001eca:	edd7 7a00 	vldr	s15, [r7]
 8001ece:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	d801      	bhi.n	8001ee0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e04d      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001ee0:	edd7 7a00 	vldr	s15, [r7]
 8001ee4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001f90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8001ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	d801      	bhi.n	8001ef6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e042      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001ef6:	edd7 7a00 	vldr	s15, [r7]
 8001efa:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d801      	bhi.n	8001f0c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8001f08:	2306      	movs	r3, #6
 8001f0a:	e037      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001f0c:	edd7 7a00 	vldr	s15, [r7]
 8001f10:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001f98 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8001f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	d801      	bhi.n	8001f22 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e02c      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001f22:	edd7 7a00 	vldr	s15, [r7]
 8001f26:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001f9c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8001f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	d801      	bhi.n	8001f38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8001f34:	2308      	movs	r3, #8
 8001f36:	e021      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001f38:	edd7 7a00 	vldr	s15, [r7]
 8001f3c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001fa0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8001f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f48:	d801      	bhi.n	8001f4e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8001f4a:	2309      	movs	r3, #9
 8001f4c:	e016      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001f4e:	edd7 7a00 	vldr	s15, [r7]
 8001f52:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001fa4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8001f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	d801      	bhi.n	8001f64 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001f60:	230a      	movs	r3, #10
 8001f62:	e00b      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001f64:	edd7 7a00 	vldr	s15, [r7]
 8001f68:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001fa8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8001f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	d801      	bhi.n	8001f7a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8001f76:	230b      	movs	r3, #11
 8001f78:	e000      	b.n	8001f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001f7a:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	42700000 	.word	0x42700000
 8001f94:	42f00000 	.word	0x42f00000
 8001f98:	43700000 	.word	0x43700000
 8001f9c:	43f00000 	.word	0x43f00000
 8001fa0:	44700000 	.word	0x44700000
 8001fa4:	44f00000 	.word	0x44f00000
 8001fa8:	45700000 	.word	0x45700000

08001fac <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8001fb8:	edd7 7a00 	vldr	s15, [r7]
 8001fbc:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8001fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	d801      	bhi.n	8001fce <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e063      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8001fce:	edd7 7a00 	vldr	s15, [r7]
 8001fd2:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d801      	bhi.n	8001fe4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e058      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8001fe4:	edd7 7a00 	vldr	s15, [r7]
 8001fe8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	d801      	bhi.n	8001ffa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e04d      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8001ffa:	edd7 7a00 	vldr	s15, [r7]
 8001ffe:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80020bc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8002002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	d801      	bhi.n	8002010 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800200c:	2305      	movs	r3, #5
 800200e:	e042      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8002010:	edd7 7a00 	vldr	s15, [r7]
 8002014:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80020c0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8002018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	d801      	bhi.n	8002026 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8002022:	2306      	movs	r3, #6
 8002024:	e037      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8002026:	edd7 7a00 	vldr	s15, [r7]
 800202a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80020c4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 800202e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	d801      	bhi.n	800203c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8002038:	2307      	movs	r3, #7
 800203a:	e02c      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800203c:	edd7 7a00 	vldr	s15, [r7]
 8002040:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80020c8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8002044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	d801      	bhi.n	8002052 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800204e:	2308      	movs	r3, #8
 8002050:	e021      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8002052:	edd7 7a00 	vldr	s15, [r7]
 8002056:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80020cc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 800205a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	d801      	bhi.n	8002068 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8002064:	2309      	movs	r3, #9
 8002066:	e016      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8002068:	edd7 7a00 	vldr	s15, [r7]
 800206c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80020d0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8002070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002078:	d801      	bhi.n	800207e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800207a:	230a      	movs	r3, #10
 800207c:	e00b      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800207e:	edd7 7a00 	vldr	s15, [r7]
 8002082:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80020d4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 8002086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	d801      	bhi.n	8002094 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 8002090:	230b      	movs	r3, #11
 8002092:	e000      	b.n	8002096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8002094:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8002096:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3320      	adds	r3, #32
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fab1 	bl	8002608 <lsm6dsv16x_gy_data_rate_set>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020b0:	e000      	b.n	80020b4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	42700000 	.word	0x42700000
 80020c0:	42f00000 	.word	0x42f00000
 80020c4:	43700000 	.word	0x43700000
 80020c8:	43f00000 	.word	0x43f00000
 80020cc:	44700000 	.word	0x44700000
 80020d0:	44f00000 	.word	0x44f00000
 80020d4:	45700000 	.word	0x45700000

080020d8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 80020e4:	edd7 7a00 	vldr	s15, [r7]
 80020e8:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80020ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f4:	d801      	bhi.n	80020fa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e063      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80020fa:	edd7 7a00 	vldr	s15, [r7]
 80020fe:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8002102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	d801      	bhi.n	8002110 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800210c:	2303      	movs	r3, #3
 800210e:	e058      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8002110:	edd7 7a00 	vldr	s15, [r7]
 8002114:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	d801      	bhi.n	8002126 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8002122:	2304      	movs	r3, #4
 8002124:	e04d      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8002126:	edd7 7a00 	vldr	s15, [r7]
 800212a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80021d8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800212e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002136:	d801      	bhi.n	800213c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8002138:	2305      	movs	r3, #5
 800213a:	e042      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800213c:	edd7 7a00 	vldr	s15, [r7]
 8002140:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80021dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 8002144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	d801      	bhi.n	8002152 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800214e:	2306      	movs	r3, #6
 8002150:	e037      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8002152:	edd7 7a00 	vldr	s15, [r7]
 8002156:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80021e0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 800215a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	d801      	bhi.n	8002168 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8002164:	2307      	movs	r3, #7
 8002166:	e02c      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8002168:	edd7 7a00 	vldr	s15, [r7]
 800216c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80021e4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8002170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	d801      	bhi.n	800217e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800217a:	2308      	movs	r3, #8
 800217c:	e021      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800217e:	edd7 7a00 	vldr	s15, [r7]
 8002182:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80021e8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 8002186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218e:	d801      	bhi.n	8002194 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8002190:	2309      	movs	r3, #9
 8002192:	e016      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8002194:	edd7 7a00 	vldr	s15, [r7]
 8002198:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80021ec <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 800219c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	d801      	bhi.n	80021aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80021a6:	230a      	movs	r3, #10
 80021a8:	e00b      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80021aa:	edd7 7a00 	vldr	s15, [r7]
 80021ae:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80021f0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 80021b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ba:	d801      	bhi.n	80021c0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80021bc:	230b      	movs	r3, #11
 80021be:	e000      	b.n	80021c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80021c0:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	42700000 	.word	0x42700000
 80021dc:	42f00000 	.word	0x42f00000
 80021e0:	43700000 	.word	0x43700000
 80021e4:	43f00000 	.word	0x43f00000
 80021e8:	44700000 	.word	0x44700000
 80021ec:	44f00000 	.word	0x44f00000
 80021f0:	45700000 	.word	0x45700000

080021f4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	461a      	mov	r2, r3
 8002200:	460b      	mov	r3, r1
 8002202:	72fb      	strb	r3, [r7, #11]
 8002204:	4613      	mov	r3, r2
 8002206:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	695c      	ldr	r4, [r3, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	7b1b      	ldrb	r3, [r3, #12]
 8002214:	4618      	mov	r0, r3
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	b299      	uxth	r1, r3
 800221a:	893b      	ldrh	r3, [r7, #8]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	47a0      	blx	r4
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}

0800222a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800222a:	b590      	push	{r4, r7, lr}
 800222c:	b087      	sub	sp, #28
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	461a      	mov	r2, r3
 8002236:	460b      	mov	r3, r1
 8002238:	72fb      	strb	r3, [r7, #11]
 800223a:	4613      	mov	r3, r2
 800223c:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	691c      	ldr	r4, [r3, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	7b1b      	ldrb	r3, [r3, #12]
 800224a:	4618      	mov	r0, r3
 800224c:	7afb      	ldrb	r3, [r7, #11]
 800224e:	b299      	uxth	r1, r3
 8002250:	893b      	ldrh	r3, [r7, #8]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	47a0      	blx	r4
 8002256:	4603      	mov	r3, r0
}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}

08002260 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	460b      	mov	r3, r1
 800226e:	72fb      	strb	r3, [r7, #11]
 8002270:	4613      	mov	r3, r2
 8002272:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685c      	ldr	r4, [r3, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68d8      	ldr	r0, [r3, #12]
 800227c:	893b      	ldrh	r3, [r7, #8]
 800227e:	7af9      	ldrb	r1, [r7, #11]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	47a0      	blx	r4
 8002284:	6178      	str	r0, [r7, #20]

  return ret;
 8002286:	697b      	ldr	r3, [r7, #20]
}
 8002288:	4618      	mov	r0, r3
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd90      	pop	{r4, r7, pc}

08002290 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	461a      	mov	r2, r3
 800229c:	460b      	mov	r3, r1
 800229e:	72fb      	strb	r3, [r7, #11]
 80022a0:	4613      	mov	r3, r2
 80022a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681c      	ldr	r4, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68d8      	ldr	r0, [r3, #12]
 80022ac:	893b      	ldrh	r3, [r7, #8]
 80022ae:	7af9      	ldrb	r1, [r7, #11]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	47a0      	blx	r4
 80022b4:	6178      	str	r0, [r7, #20]

  return ret;
 80022b6:	697b      	ldr	r3, [r7, #20]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80022cc:	f107 0208 	add.w	r2, r7, #8
 80022d0:	2301      	movs	r3, #1
 80022d2:	2101      	movs	r1, #1
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffc3 	bl	8002260 <lsm6dsv16x_read_reg>
 80022da:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <lsm6dsv16x_mem_bank_set+0x26>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	e019      	b.n	800231a <lsm6dsv16x_mem_bank_set+0x5a>

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	7a3b      	ldrb	r3, [r7, #8]
 80022f2:	f362 1386 	bfi	r3, r2, #6, #1
 80022f6:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	7a3b      	ldrb	r3, [r7, #8]
 8002302:	f362 13c7 	bfi	r3, r2, #7, #1
 8002306:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002308:	f107 0208 	add.w	r2, r7, #8
 800230c:	2301      	movs	r3, #1
 800230e:	2101      	movs	r1, #1
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ffbd 	bl	8002290 <lsm6dsv16x_write_reg>
 8002316:	60f8      	str	r0, [r7, #12]

  return ret;
 8002318:	68fb      	ldr	r3, [r7, #12]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800232c:	2301      	movs	r3, #1
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	210f      	movs	r1, #15
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff94 	bl	8002260 <lsm6dsv16x_read_reg>
 8002338:	60f8      	str	r0, [r7, #12]

  return ret;
 800233a:	68fb      	ldr	r3, [r7, #12]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002350:	f107 0210 	add.w	r2, r7, #16
 8002354:	2301      	movs	r3, #1
 8002356:	2110      	movs	r1, #16
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff81 	bl	8002260 <lsm6dsv16x_read_reg>
 800235e:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <lsm6dsv16x_xl_data_rate_set+0x26>
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	e039      	b.n	80023de <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	b2da      	uxtb	r2, r3
 8002372:	7c3b      	ldrb	r3, [r7, #16]
 8002374:	f362 0303 	bfi	r3, r2, #0, #4
 8002378:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800237a:	f107 0210 	add.w	r2, r7, #16
 800237e:	2301      	movs	r3, #1
 8002380:	2110      	movs	r1, #16
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff84 	bl	8002290 <lsm6dsv16x_write_reg>
 8002388:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <lsm6dsv16x_xl_data_rate_set+0x50>
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	e024      	b.n	80023de <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01d      	beq.n	80023dc <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80023a0:	f107 020c 	add.w	r2, r7, #12
 80023a4:	2301      	movs	r3, #1
 80023a6:	2162      	movs	r1, #98	@ 0x62
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff59 	bl	8002260 <lsm6dsv16x_read_reg>
 80023ae:	4602      	mov	r2, r0
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4413      	add	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	7b3b      	ldrb	r3, [r7, #12]
 80023c0:	f362 0301 	bfi	r3, r2, #0, #2
 80023c4:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80023c6:	f107 020c 	add.w	r2, r7, #12
 80023ca:	2301      	movs	r3, #1
 80023cc:	2162      	movs	r1, #98	@ 0x62
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff5e 	bl	8002290 <lsm6dsv16x_write_reg>
 80023d4:	4602      	mov	r2, r0
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4413      	add	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80023dc:	697b      	ldr	r3, [r7, #20]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80023f2:	f107 0210 	add.w	r2, r7, #16
 80023f6:	2301      	movs	r3, #1
 80023f8:	2110      	movs	r1, #16
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ff30 	bl	8002260 <lsm6dsv16x_read_reg>
 8002400:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002402:	f107 020c 	add.w	r2, r7, #12
 8002406:	2301      	movs	r3, #1
 8002408:	2162      	movs	r1, #98	@ 0x62
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff28 	bl	8002260 <lsm6dsv16x_read_reg>
 8002410:	4602      	mov	r2, r0
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4413      	add	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <lsm6dsv16x_xl_data_rate_get+0x3a>
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	e0ed      	b.n	80025fe <lsm6dsv16x_xl_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 8002422:	7b3b      	ldrb	r3, [r7, #12]
 8002424:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002428:	b2db      	uxtb	r3, r3
 800242a:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 800242c:	7c3b      	ldrb	r3, [r7, #16]
 800242e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b0c      	cmp	r3, #12
 8002436:	f200 80dd 	bhi.w	80025f4 <lsm6dsv16x_xl_data_rate_get+0x20c>
 800243a:	a201      	add	r2, pc, #4	@ (adr r2, 8002440 <lsm6dsv16x_xl_data_rate_get+0x58>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002475 	.word	0x08002475
 8002444:	0800247d 	.word	0x0800247d
 8002448:	08002485 	.word	0x08002485
 800244c:	0800248d 	.word	0x0800248d
 8002450:	080024b1 	.word	0x080024b1
 8002454:	080024d5 	.word	0x080024d5
 8002458:	080024f9 	.word	0x080024f9
 800245c:	0800251d 	.word	0x0800251d
 8002460:	08002541 	.word	0x08002541
 8002464:	08002565 	.word	0x08002565
 8002468:	08002589 	.word	0x08002589
 800246c:	080025ad 	.word	0x080025ad
 8002470:	080025d1 	.word	0x080025d1
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
      break;
 800247a:	e0bf      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
      break;
 8002482:	e0bb      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2202      	movs	r2, #2
 8002488:	701a      	strb	r2, [r3, #0]
      break;
 800248a:	e0b7      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d005      	beq.n	800249e <lsm6dsv16x_xl_data_rate_get+0xb6>
 8002492:	2b02      	cmp	r3, #2
 8002494:	d007      	beq.n	80024a6 <lsm6dsv16x_xl_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2203      	movs	r2, #3
 800249a:	701a      	strb	r2, [r3, #0]
        break;
 800249c:	e007      	b.n	80024ae <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2213      	movs	r2, #19
 80024a2:	701a      	strb	r2, [r3, #0]
        break;
 80024a4:	e003      	b.n	80024ae <lsm6dsv16x_xl_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2223      	movs	r2, #35	@ 0x23
 80024aa:	701a      	strb	r2, [r3, #0]
        break;
 80024ac:	bf00      	nop
      }
      break;
 80024ae:	e0a5      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d005      	beq.n	80024c2 <lsm6dsv16x_xl_data_rate_get+0xda>
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d007      	beq.n	80024ca <lsm6dsv16x_xl_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2204      	movs	r2, #4
 80024be:	701a      	strb	r2, [r3, #0]
        break;
 80024c0:	e007      	b.n	80024d2 <lsm6dsv16x_xl_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2214      	movs	r2, #20
 80024c6:	701a      	strb	r2, [r3, #0]
        break;
 80024c8:	e003      	b.n	80024d2 <lsm6dsv16x_xl_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2224      	movs	r2, #36	@ 0x24
 80024ce:	701a      	strb	r2, [r3, #0]
        break;
 80024d0:	bf00      	nop
      }
      break;
 80024d2:	e093      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d005      	beq.n	80024e6 <lsm6dsv16x_xl_data_rate_get+0xfe>
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d007      	beq.n	80024ee <lsm6dsv16x_xl_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2205      	movs	r2, #5
 80024e2:	701a      	strb	r2, [r3, #0]
        break;
 80024e4:	e007      	b.n	80024f6 <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2215      	movs	r2, #21
 80024ea:	701a      	strb	r2, [r3, #0]
        break;
 80024ec:	e003      	b.n	80024f6 <lsm6dsv16x_xl_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2225      	movs	r2, #37	@ 0x25
 80024f2:	701a      	strb	r2, [r3, #0]
        break;
 80024f4:	bf00      	nop
      }
      break;
 80024f6:	e081      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d005      	beq.n	800250a <lsm6dsv16x_xl_data_rate_get+0x122>
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d007      	beq.n	8002512 <lsm6dsv16x_xl_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2206      	movs	r2, #6
 8002506:	701a      	strb	r2, [r3, #0]
        break;
 8002508:	e007      	b.n	800251a <lsm6dsv16x_xl_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2216      	movs	r2, #22
 800250e:	701a      	strb	r2, [r3, #0]
        break;
 8002510:	e003      	b.n	800251a <lsm6dsv16x_xl_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2226      	movs	r2, #38	@ 0x26
 8002516:	701a      	strb	r2, [r3, #0]
        break;
 8002518:	bf00      	nop
      }
      break;
 800251a:	e06f      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <lsm6dsv16x_xl_data_rate_get+0x146>
 8002522:	2b02      	cmp	r3, #2
 8002524:	d007      	beq.n	8002536 <lsm6dsv16x_xl_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2207      	movs	r2, #7
 800252a:	701a      	strb	r2, [r3, #0]
        break;
 800252c:	e007      	b.n	800253e <lsm6dsv16x_xl_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2217      	movs	r2, #23
 8002532:	701a      	strb	r2, [r3, #0]
        break;
 8002534:	e003      	b.n	800253e <lsm6dsv16x_xl_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2227      	movs	r2, #39	@ 0x27
 800253a:	701a      	strb	r2, [r3, #0]
        break;
 800253c:	bf00      	nop
      }
      break;
 800253e:	e05d      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d005      	beq.n	8002552 <lsm6dsv16x_xl_data_rate_get+0x16a>
 8002546:	2b02      	cmp	r3, #2
 8002548:	d007      	beq.n	800255a <lsm6dsv16x_xl_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2208      	movs	r2, #8
 800254e:	701a      	strb	r2, [r3, #0]
        break;
 8002550:	e007      	b.n	8002562 <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2218      	movs	r2, #24
 8002556:	701a      	strb	r2, [r3, #0]
        break;
 8002558:	e003      	b.n	8002562 <lsm6dsv16x_xl_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2228      	movs	r2, #40	@ 0x28
 800255e:	701a      	strb	r2, [r3, #0]
        break;
 8002560:	bf00      	nop
      }
      break;
 8002562:	e04b      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d005      	beq.n	8002576 <lsm6dsv16x_xl_data_rate_get+0x18e>
 800256a:	2b02      	cmp	r3, #2
 800256c:	d007      	beq.n	800257e <lsm6dsv16x_xl_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2209      	movs	r2, #9
 8002572:	701a      	strb	r2, [r3, #0]
        break;
 8002574:	e007      	b.n	8002586 <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2219      	movs	r2, #25
 800257a:	701a      	strb	r2, [r3, #0]
        break;
 800257c:	e003      	b.n	8002586 <lsm6dsv16x_xl_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2229      	movs	r2, #41	@ 0x29
 8002582:	701a      	strb	r2, [r3, #0]
        break;
 8002584:	bf00      	nop
      }
      break;
 8002586:	e039      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d005      	beq.n	800259a <lsm6dsv16x_xl_data_rate_get+0x1b2>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d007      	beq.n	80025a2 <lsm6dsv16x_xl_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	220a      	movs	r2, #10
 8002596:	701a      	strb	r2, [r3, #0]
        break;
 8002598:	e007      	b.n	80025aa <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	221a      	movs	r2, #26
 800259e:	701a      	strb	r2, [r3, #0]
        break;
 80025a0:	e003      	b.n	80025aa <lsm6dsv16x_xl_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	222a      	movs	r2, #42	@ 0x2a
 80025a6:	701a      	strb	r2, [r3, #0]
        break;
 80025a8:	bf00      	nop
      }
      break;
 80025aa:	e027      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d005      	beq.n	80025be <lsm6dsv16x_xl_data_rate_get+0x1d6>
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d007      	beq.n	80025c6 <lsm6dsv16x_xl_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	220b      	movs	r2, #11
 80025ba:	701a      	strb	r2, [r3, #0]
        break;
 80025bc:	e007      	b.n	80025ce <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	221b      	movs	r2, #27
 80025c2:	701a      	strb	r2, [r3, #0]
        break;
 80025c4:	e003      	b.n	80025ce <lsm6dsv16x_xl_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	222b      	movs	r2, #43	@ 0x2b
 80025ca:	701a      	strb	r2, [r3, #0]
        break;
 80025cc:	bf00      	nop
      }
      break;
 80025ce:	e015      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d005      	beq.n	80025e2 <lsm6dsv16x_xl_data_rate_get+0x1fa>
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d007      	beq.n	80025ea <lsm6dsv16x_xl_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	220c      	movs	r2, #12
 80025de:	701a      	strb	r2, [r3, #0]
        break;
 80025e0:	e007      	b.n	80025f2 <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	221c      	movs	r2, #28
 80025e6:	701a      	strb	r2, [r3, #0]
        break;
 80025e8:	e003      	b.n	80025f2 <lsm6dsv16x_xl_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	222c      	movs	r2, #44	@ 0x2c
 80025ee:	701a      	strb	r2, [r3, #0]
        break;
 80025f0:	bf00      	nop
      }
      break;
 80025f2:	e003      	b.n	80025fc <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
      break;
 80025fa:	bf00      	nop
  }

  return ret;
 80025fc:	697b      	ldr	r3, [r7, #20]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop

08002608 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002614:	f107 0210 	add.w	r2, r7, #16
 8002618:	2301      	movs	r3, #1
 800261a:	2111      	movs	r1, #17
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff fe1f 	bl	8002260 <lsm6dsv16x_read_reg>
 8002622:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	b2da      	uxtb	r2, r3
 800262c:	7c3b      	ldrb	r3, [r7, #16]
 800262e:	f362 0303 	bfi	r3, r2, #0, #4
 8002632:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002634:	f107 0210 	add.w	r2, r7, #16
 8002638:	2301      	movs	r3, #1
 800263a:	2111      	movs	r1, #17
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff fe27 	bl	8002290 <lsm6dsv16x_write_reg>
 8002642:	4602      	mov	r2, r0
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	e024      	b.n	800269e <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01d      	beq.n	800269c <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002660:	f107 020c 	add.w	r2, r7, #12
 8002664:	2301      	movs	r3, #1
 8002666:	2162      	movs	r1, #98	@ 0x62
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fdf9 	bl	8002260 <lsm6dsv16x_read_reg>
 800266e:	4602      	mov	r2, r0
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	4413      	add	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	b2da      	uxtb	r2, r3
 800267e:	7b3b      	ldrb	r3, [r7, #12]
 8002680:	f362 0301 	bfi	r3, r2, #0, #2
 8002684:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002686:	f107 020c 	add.w	r2, r7, #12
 800268a:	2301      	movs	r3, #1
 800268c:	2162      	movs	r1, #98	@ 0x62
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff fdfe 	bl	8002290 <lsm6dsv16x_write_reg>
 8002694:	4602      	mov	r2, r0
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	4413      	add	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800269c:	697b      	ldr	r3, [r7, #20]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80026b2:	f107 0210 	add.w	r2, r7, #16
 80026b6:	2301      	movs	r3, #1
 80026b8:	2111      	movs	r1, #17
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fdd0 	bl	8002260 <lsm6dsv16x_read_reg>
 80026c0:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80026c2:	f107 020c 	add.w	r2, r7, #12
 80026c6:	2301      	movs	r3, #1
 80026c8:	2162      	movs	r1, #98	@ 0x62
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fdc8 	bl	8002260 <lsm6dsv16x_read_reg>
 80026d0:	4602      	mov	r2, r0
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	4413      	add	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <lsm6dsv16x_gy_data_rate_get+0x3a>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	e0ed      	b.n	80028be <lsm6dsv16x_gy_data_rate_get+0x216>

  sel = haodr.haodr_sel;
 80026e2:	7b3b      	ldrb	r3, [r7, #12]
 80026e4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 80026ec:	7c3b      	ldrb	r3, [r7, #16]
 80026ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	f200 80dd 	bhi.w	80028b4 <lsm6dsv16x_gy_data_rate_get+0x20c>
 80026fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <lsm6dsv16x_gy_data_rate_get+0x58>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	08002735 	.word	0x08002735
 8002704:	0800273d 	.word	0x0800273d
 8002708:	08002745 	.word	0x08002745
 800270c:	0800274d 	.word	0x0800274d
 8002710:	08002771 	.word	0x08002771
 8002714:	08002795 	.word	0x08002795
 8002718:	080027b9 	.word	0x080027b9
 800271c:	080027dd 	.word	0x080027dd
 8002720:	08002801 	.word	0x08002801
 8002724:	08002825 	.word	0x08002825
 8002728:	08002849 	.word	0x08002849
 800272c:	0800286d 	.word	0x0800286d
 8002730:	08002891 	.word	0x08002891
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
      break;
 800273a:	e0bf      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
      break;
 8002742:	e0bb      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2202      	movs	r2, #2
 8002748:	701a      	strb	r2, [r3, #0]
      break;
 800274a:	e0b7      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel) {
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d005      	beq.n	800275e <lsm6dsv16x_gy_data_rate_get+0xb6>
 8002752:	2b02      	cmp	r3, #2
 8002754:	d007      	beq.n	8002766 <lsm6dsv16x_gy_data_rate_get+0xbe>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_15Hz;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2203      	movs	r2, #3
 800275a:	701a      	strb	r2, [r3, #0]
        break;
 800275c:	e007      	b.n	800276e <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2213      	movs	r2, #19
 8002762:	701a      	strb	r2, [r3, #0]
        break;
 8002764:	e003      	b.n	800276e <lsm6dsv16x_gy_data_rate_get+0xc6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2223      	movs	r2, #35	@ 0x23
 800276a:	701a      	strb	r2, [r3, #0]
        break;
 800276c:	bf00      	nop
      }
      break;
 800276e:	e0a5      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel) {
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d005      	beq.n	8002782 <lsm6dsv16x_gy_data_rate_get+0xda>
 8002776:	2b02      	cmp	r3, #2
 8002778:	d007      	beq.n	800278a <lsm6dsv16x_gy_data_rate_get+0xe2>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_30Hz;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2204      	movs	r2, #4
 800277e:	701a      	strb	r2, [r3, #0]
        break;
 8002780:	e007      	b.n	8002792 <lsm6dsv16x_gy_data_rate_get+0xea>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2214      	movs	r2, #20
 8002786:	701a      	strb	r2, [r3, #0]
        break;
 8002788:	e003      	b.n	8002792 <lsm6dsv16x_gy_data_rate_get+0xea>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2224      	movs	r2, #36	@ 0x24
 800278e:	701a      	strb	r2, [r3, #0]
        break;
 8002790:	bf00      	nop
      }
      break;
 8002792:	e093      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel) {
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d005      	beq.n	80027a6 <lsm6dsv16x_gy_data_rate_get+0xfe>
 800279a:	2b02      	cmp	r3, #2
 800279c:	d007      	beq.n	80027ae <lsm6dsv16x_gy_data_rate_get+0x106>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_60Hz;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2205      	movs	r2, #5
 80027a2:	701a      	strb	r2, [r3, #0]
        break;
 80027a4:	e007      	b.n	80027b6 <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2215      	movs	r2, #21
 80027aa:	701a      	strb	r2, [r3, #0]
        break;
 80027ac:	e003      	b.n	80027b6 <lsm6dsv16x_gy_data_rate_get+0x10e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2225      	movs	r2, #37	@ 0x25
 80027b2:	701a      	strb	r2, [r3, #0]
        break;
 80027b4:	bf00      	nop
      }
      break;
 80027b6:	e081      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel) {
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d005      	beq.n	80027ca <lsm6dsv16x_gy_data_rate_get+0x122>
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d007      	beq.n	80027d2 <lsm6dsv16x_gy_data_rate_get+0x12a>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_120Hz;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2206      	movs	r2, #6
 80027c6:	701a      	strb	r2, [r3, #0]
        break;
 80027c8:	e007      	b.n	80027da <lsm6dsv16x_gy_data_rate_get+0x132>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2216      	movs	r2, #22
 80027ce:	701a      	strb	r2, [r3, #0]
        break;
 80027d0:	e003      	b.n	80027da <lsm6dsv16x_gy_data_rate_get+0x132>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2226      	movs	r2, #38	@ 0x26
 80027d6:	701a      	strb	r2, [r3, #0]
        break;
 80027d8:	bf00      	nop
      }
      break;
 80027da:	e06f      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel) {
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d005      	beq.n	80027ee <lsm6dsv16x_gy_data_rate_get+0x146>
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d007      	beq.n	80027f6 <lsm6dsv16x_gy_data_rate_get+0x14e>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_240Hz;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2207      	movs	r2, #7
 80027ea:	701a      	strb	r2, [r3, #0]
        break;
 80027ec:	e007      	b.n	80027fe <lsm6dsv16x_gy_data_rate_get+0x156>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2217      	movs	r2, #23
 80027f2:	701a      	strb	r2, [r3, #0]
        break;
 80027f4:	e003      	b.n	80027fe <lsm6dsv16x_gy_data_rate_get+0x156>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2227      	movs	r2, #39	@ 0x27
 80027fa:	701a      	strb	r2, [r3, #0]
        break;
 80027fc:	bf00      	nop
      }
      break;
 80027fe:	e05d      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel) {
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d005      	beq.n	8002812 <lsm6dsv16x_gy_data_rate_get+0x16a>
 8002806:	2b02      	cmp	r3, #2
 8002808:	d007      	beq.n	800281a <lsm6dsv16x_gy_data_rate_get+0x172>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_480Hz;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2208      	movs	r2, #8
 800280e:	701a      	strb	r2, [r3, #0]
        break;
 8002810:	e007      	b.n	8002822 <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2218      	movs	r2, #24
 8002816:	701a      	strb	r2, [r3, #0]
        break;
 8002818:	e003      	b.n	8002822 <lsm6dsv16x_gy_data_rate_get+0x17a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2228      	movs	r2, #40	@ 0x28
 800281e:	701a      	strb	r2, [r3, #0]
        break;
 8002820:	bf00      	nop
      }
      break;
 8002822:	e04b      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel) {
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d005      	beq.n	8002836 <lsm6dsv16x_gy_data_rate_get+0x18e>
 800282a:	2b02      	cmp	r3, #2
 800282c:	d007      	beq.n	800283e <lsm6dsv16x_gy_data_rate_get+0x196>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_960Hz;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2209      	movs	r2, #9
 8002832:	701a      	strb	r2, [r3, #0]
        break;
 8002834:	e007      	b.n	8002846 <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2219      	movs	r2, #25
 800283a:	701a      	strb	r2, [r3, #0]
        break;
 800283c:	e003      	b.n	8002846 <lsm6dsv16x_gy_data_rate_get+0x19e>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2229      	movs	r2, #41	@ 0x29
 8002842:	701a      	strb	r2, [r3, #0]
        break;
 8002844:	bf00      	nop
      }
      break;
 8002846:	e039      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel) {
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d005      	beq.n	800285a <lsm6dsv16x_gy_data_rate_get+0x1b2>
 800284e:	2b02      	cmp	r3, #2
 8002850:	d007      	beq.n	8002862 <lsm6dsv16x_gy_data_rate_get+0x1ba>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_1920Hz;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	220a      	movs	r2, #10
 8002856:	701a      	strb	r2, [r3, #0]
        break;
 8002858:	e007      	b.n	800286a <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	221a      	movs	r2, #26
 800285e:	701a      	strb	r2, [r3, #0]
        break;
 8002860:	e003      	b.n	800286a <lsm6dsv16x_gy_data_rate_get+0x1c2>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	222a      	movs	r2, #42	@ 0x2a
 8002866:	701a      	strb	r2, [r3, #0]
        break;
 8002868:	bf00      	nop
      }
      break;
 800286a:	e027      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel) {
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <lsm6dsv16x_gy_data_rate_get+0x1d6>
 8002872:	2b02      	cmp	r3, #2
 8002874:	d007      	beq.n	8002886 <lsm6dsv16x_gy_data_rate_get+0x1de>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_3840Hz;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	220b      	movs	r2, #11
 800287a:	701a      	strb	r2, [r3, #0]
        break;
 800287c:	e007      	b.n	800288e <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	221b      	movs	r2, #27
 8002882:	701a      	strb	r2, [r3, #0]
        break;
 8002884:	e003      	b.n	800288e <lsm6dsv16x_gy_data_rate_get+0x1e6>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	222b      	movs	r2, #43	@ 0x2b
 800288a:	701a      	strb	r2, [r3, #0]
        break;
 800288c:	bf00      	nop
      }
      break;
 800288e:	e015      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel) {
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d005      	beq.n	80028a2 <lsm6dsv16x_gy_data_rate_get+0x1fa>
 8002896:	2b02      	cmp	r3, #2
 8002898:	d007      	beq.n	80028aa <lsm6dsv16x_gy_data_rate_get+0x202>
      default:
      case 0:
        *val = LSM6DSV16X_ODR_AT_7680Hz;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	220c      	movs	r2, #12
 800289e:	701a      	strb	r2, [r3, #0]
        break;
 80028a0:	e007      	b.n	80028b2 <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 1:
        *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	221c      	movs	r2, #28
 80028a6:	701a      	strb	r2, [r3, #0]
        break;
 80028a8:	e003      	b.n	80028b2 <lsm6dsv16x_gy_data_rate_get+0x20a>
      case 2:
        *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	222c      	movs	r2, #44	@ 0x2c
 80028ae:	701a      	strb	r2, [r3, #0]
        break;
 80028b0:	bf00      	nop
      }
      break;
 80028b2:	e003      	b.n	80028bc <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
      break;
 80028ba:	bf00      	nop
  }

  return ret;
 80028bc:	697b      	ldr	r3, [r7, #20]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop

080028c8 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80028d4:	f107 0208 	add.w	r2, r7, #8
 80028d8:	2301      	movs	r3, #1
 80028da:	2112      	movs	r1, #18
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff fcbf 	bl	8002260 <lsm6dsv16x_read_reg>
 80028e2:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	7a3b      	ldrb	r3, [r7, #8]
 80028f4:	f362 0382 	bfi	r3, r2, #2, #1
 80028f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80028fa:	f107 0208 	add.w	r2, r7, #8
 80028fe:	2301      	movs	r3, #1
 8002900:	2112      	movs	r1, #18
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff fcc4 	bl	8002290 <lsm6dsv16x_write_reg>
 8002908:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800290a:	68fb      	ldr	r3, [r7, #12]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002920:	f107 0208 	add.w	r2, r7, #8
 8002924:	2301      	movs	r3, #1
 8002926:	2112      	movs	r1, #18
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff fc99 	bl	8002260 <lsm6dsv16x_read_reg>
 800292e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	7a3b      	ldrb	r3, [r7, #8]
 8002940:	f362 1386 	bfi	r3, r2, #6, #1
 8002944:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002946:	f107 0208 	add.w	r2, r7, #8
 800294a:	2301      	movs	r3, #1
 800294c:	2112      	movs	r1, #18
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff fc9e 	bl	8002290 <lsm6dsv16x_write_reg>
 8002954:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002956:	68fb      	ldr	r3, [r7, #12]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800296c:	f107 0208 	add.w	r2, r7, #8
 8002970:	2301      	movs	r3, #1
 8002972:	2115      	movs	r1, #21
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff fc73 	bl	8002260 <lsm6dsv16x_read_reg>
 800297a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	b2da      	uxtb	r2, r3
 800298a:	7a3b      	ldrb	r3, [r7, #8]
 800298c:	f362 0303 	bfi	r3, r2, #0, #4
 8002990:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8002992:	f107 0208 	add.w	r2, r7, #8
 8002996:	2301      	movs	r3, #1
 8002998:	2115      	movs	r1, #21
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fc78 	bl	8002290 <lsm6dsv16x_write_reg>
 80029a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80029b6:	f107 0208 	add.w	r2, r7, #8
 80029ba:	2301      	movs	r3, #1
 80029bc:	2115      	movs	r1, #21
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff fc4e 	bl	8002260 <lsm6dsv16x_read_reg>
 80029c4:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <lsm6dsv16x_gy_full_scale_get+0x24>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	e040      	b.n	8002a52 <lsm6dsv16x_gy_full_scale_get+0xa6>

  switch (ctrl6.fs_g)
 80029d0:	7a3b      	ldrb	r3, [r7, #8]
 80029d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	d835      	bhi.n	8002a48 <lsm6dsv16x_gy_full_scale_get+0x9c>
 80029dc:	a201      	add	r2, pc, #4	@ (adr r2, 80029e4 <lsm6dsv16x_gy_full_scale_get+0x38>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	08002a19 	.word	0x08002a19
 80029e8:	08002a21 	.word	0x08002a21
 80029ec:	08002a29 	.word	0x08002a29
 80029f0:	08002a31 	.word	0x08002a31
 80029f4:	08002a39 	.word	0x08002a39
 80029f8:	08002a49 	.word	0x08002a49
 80029fc:	08002a49 	.word	0x08002a49
 8002a00:	08002a49 	.word	0x08002a49
 8002a04:	08002a49 	.word	0x08002a49
 8002a08:	08002a49 	.word	0x08002a49
 8002a0c:	08002a49 	.word	0x08002a49
 8002a10:	08002a49 	.word	0x08002a49
 8002a14:	08002a41 	.word	0x08002a41
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
      break;
 8002a1e:	e017      	b.n	8002a50 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
      break;
 8002a26:	e013      	b.n	8002a50 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
      break;
 8002a2e:	e00f      	b.n	8002a50 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2203      	movs	r2, #3
 8002a34:	701a      	strb	r2, [r3, #0]
      break;
 8002a36:	e00b      	b.n	8002a50 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	701a      	strb	r2, [r3, #0]
      break;
 8002a3e:	e007      	b.n	8002a50 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	220c      	movs	r2, #12
 8002a44:	701a      	strb	r2, [r3, #0]
      break;
 8002a46:	e003      	b.n	8002a50 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
      break;
 8002a4e:	bf00      	nop
  }

  return ret;
 8002a50:	68fb      	ldr	r3, [r7, #12]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop

08002a5c <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002a68:	f107 0208 	add.w	r2, r7, #8
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	2117      	movs	r1, #23
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fbf5 	bl	8002260 <lsm6dsv16x_read_reg>
 8002a76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	7a3b      	ldrb	r3, [r7, #8]
 8002a88:	f362 0301 	bfi	r3, r2, #0, #2
 8002a8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002a8e:	f107 0208 	add.w	r2, r7, #8
 8002a92:	2301      	movs	r3, #1
 8002a94:	2117      	movs	r1, #23
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fbfa 	bl	8002290 <lsm6dsv16x_write_reg>
 8002a9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002ab2:	f107 0208 	add.w	r2, r7, #8
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	2117      	movs	r1, #23
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fbd0 	bl	8002260 <lsm6dsv16x_read_reg>
 8002ac0:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <lsm6dsv16x_xl_full_scale_get+0x24>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	e026      	b.n	8002b1a <lsm6dsv16x_xl_full_scale_get+0x72>

  switch (ctrl8.fs_xl)
 8002acc:	7a3b      	ldrb	r3, [r7, #8]
 8002ace:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d81b      	bhi.n	8002b10 <lsm6dsv16x_xl_full_scale_get+0x68>
 8002ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae0 <lsm6dsv16x_xl_full_scale_get+0x38>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002af9 	.word	0x08002af9
 8002ae8:	08002b01 	.word	0x08002b01
 8002aec:	08002b09 	.word	0x08002b09
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
      break;
 8002af6:	e00f      	b.n	8002b18 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
      break;
 8002afe:	e00b      	b.n	8002b18 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
      break;
 8002b06:	e007      	b.n	8002b18 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	701a      	strb	r2, [r3, #0]
      break;
 8002b0e:	e003      	b.n	8002b18 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
      break;
 8002b16:	bf00      	nop
  }

  return ret;
 8002b18:	68fb      	ldr	r3, [r7, #12]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop

08002b24 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8002b2e:	f107 020c 	add.w	r2, r7, #12
 8002b32:	2306      	movs	r3, #6
 8002b34:	2122      	movs	r1, #34	@ 0x22
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fb92 	bl	8002260 <lsm6dsv16x_read_reg>
 8002b3c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <lsm6dsv16x_angular_rate_raw_get+0x24>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	e036      	b.n	8002bb6 <lsm6dsv16x_angular_rate_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8002b48:	7b7b      	ldrb	r3, [r7, #13]
 8002b4a:	b21a      	sxth	r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	7b3a      	ldrb	r2, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	b21a      	sxth	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	b212      	sxth	r2, r2
 8002b70:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	3302      	adds	r3, #2
 8002b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	7bba      	ldrb	r2, [r7, #14]
 8002b82:	4413      	add	r3, r2
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	3302      	adds	r3, #2
 8002b8a:	b212      	sxth	r2, r2
 8002b8c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002b8e:	7c7a      	ldrb	r2, [r7, #17]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	3304      	adds	r3, #4
 8002b94:	b212      	sxth	r2, r2
 8002b96:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	7c3a      	ldrb	r2, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	b212      	sxth	r2, r2
 8002bb2:	801a      	strh	r2, [r3, #0]

  return ret;
 8002bb4:	697b      	ldr	r3, [r7, #20]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8002bc8:	f107 020c 	add.w	r2, r7, #12
 8002bcc:	2306      	movs	r3, #6
 8002bce:	2128      	movs	r1, #40	@ 0x28
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fb45 	bl	8002260 <lsm6dsv16x_read_reg>
 8002bd6:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <lsm6dsv16x_acceleration_raw_get+0x24>
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	e036      	b.n	8002c50 <lsm6dsv16x_acceleration_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8002be2:	7b7b      	ldrb	r3, [r7, #13]
 8002be4:	b21a      	sxth	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	7b3a      	ldrb	r2, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	3302      	adds	r3, #2
 8002c08:	b212      	sxth	r2, r2
 8002c0a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	3302      	adds	r3, #2
 8002c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	7bba      	ldrb	r2, [r7, #14]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	3302      	adds	r3, #2
 8002c24:	b212      	sxth	r2, r2
 8002c26:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002c28:	7c7a      	ldrb	r2, [r7, #17]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	b212      	sxth	r2, r2
 8002c30:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3304      	adds	r3, #4
 8002c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	7c3a      	ldrb	r2, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	b212      	sxth	r2, r2
 8002c4c:	801a      	strh	r2, [r3, #0]

  return ret;
 8002c4e:	697b      	ldr	r3, [r7, #20]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002c64:	f107 0208 	add.w	r2, r7, #8
 8002c68:	2301      	movs	r3, #1
 8002c6a:	210a      	movs	r1, #10
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff faf7 	bl	8002260 <lsm6dsv16x_read_reg>
 8002c72:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	7a3b      	ldrb	r3, [r7, #8]
 8002c84:	f362 0302 	bfi	r3, r2, #0, #3
 8002c88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002c8a:	f107 0208 	add.w	r2, r7, #8
 8002c8e:	2301      	movs	r3, #1
 8002c90:	210a      	movs	r1, #10
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fafc 	bl	8002290 <lsm6dsv16x_write_reg>
 8002c98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8002cae:	f107 0208 	add.w	r2, r7, #8
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	2116      	movs	r1, #22
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff fad2 	bl	8002260 <lsm6dsv16x_read_reg>
 8002cbc:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10f      	bne.n	8002ce4 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8002cc4:	783b      	ldrb	r3, [r7, #0]
 8002cc6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	7a3b      	ldrb	r3, [r7, #8]
 8002cce:	f362 13c7 	bfi	r3, r2, #7, #1
 8002cd2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8002cd4:	f107 0208 	add.w	r2, r7, #8
 8002cd8:	2301      	movs	r3, #1
 8002cda:	2116      	movs	r1, #22
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fad7 	bl	8002290 <lsm6dsv16x_write_reg>
 8002ce2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8002cfa:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <BSP_SPI2_Init+0x54>)
 8002cfc:	4a12      	ldr	r2, [pc, #72]	@ (8002d48 <BSP_SPI2_Init+0x58>)
 8002cfe:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8002d00:	4b12      	ldr	r3, [pc, #72]	@ (8002d4c <BSP_SPI2_Init+0x5c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	4911      	ldr	r1, [pc, #68]	@ (8002d4c <BSP_SPI2_Init+0x5c>)
 8002d08:	600a      	str	r2, [r1, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d114      	bne.n	8002d38 <BSP_SPI2_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8002d0e:	480d      	ldr	r0, [pc, #52]	@ (8002d44 <BSP_SPI2_Init+0x54>)
 8002d10:	f005 fcf2 	bl	80086f8 <HAL_SPI_GetState>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10e      	bne.n	8002d38 <BSP_SPI2_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8002d1a:	480a      	ldr	r0, [pc, #40]	@ (8002d44 <BSP_SPI2_Init+0x54>)
 8002d1c:	f000 f8f4 	bl	8002f08 <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d108      	bne.n	8002d38 <BSP_SPI2_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8002d26:	4807      	ldr	r0, [pc, #28]	@ (8002d44 <BSP_SPI2_Init+0x54>)
 8002d28:	f000 f87a 	bl	8002e20 <MX_SPI2_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <BSP_SPI2_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002d32:	f06f 0307 	mvn.w	r3, #7
 8002d36:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002d38:	687b      	ldr	r3, [r7, #4]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200001b8 	.word	0x200001b8
 8002d48:	40003800 	.word	0x40003800
 8002d4c:	20000248 	.word	0x20000248

08002d50 <BSP_SPI2_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8002d56:	f06f 0307 	mvn.w	r3, #7
 8002d5a:	607b      	str	r3, [r7, #4]
  if (SPI2InitCounter > 0)
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <BSP_SPI2_DeInit+0x48>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <BSP_SPI2_DeInit+0x3c>
  {
    if (--SPI2InitCounter == 0)
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <BSP_SPI2_DeInit+0x48>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d98 <BSP_SPI2_DeInit+0x48>)
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d98 <BSP_SPI2_DeInit+0x48>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <BSP_SPI2_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI2_MspDeInit(&hspi2);
 8002d76:	4809      	ldr	r0, [pc, #36]	@ (8002d9c <BSP_SPI2_DeInit+0x4c>)
 8002d78:	f000 f944 	bl	8003004 <SPI2_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 8002d7c:	4807      	ldr	r0, [pc, #28]	@ (8002d9c <BSP_SPI2_DeInit+0x4c>)
 8002d7e:	f005 f8cb 	bl	8007f18 <HAL_SPI_DeInit>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <BSP_SPI2_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002d8c:	687b      	ldr	r3, [r7, #4]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000248 	.word	0x20000248
 8002d9c:	200001b8 	.word	0x200001b8

08002da0 <BSP_SPI2_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t Length)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8002db0:	887a      	ldrh	r2, [r7, #2]
 8002db2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4806      	ldr	r0, [pc, #24]	@ (8002dd4 <BSP_SPI2_Send+0x34>)
 8002dba:	f005 f8eb 	bl	8007f94 <HAL_SPI_Transmit>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <BSP_SPI2_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002dc4:	f06f 0305 	mvn.w	r3, #5
 8002dc8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200001b8 	.word	0x200001b8

08002dd8 <BSP_SPI2_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv(uint8_t *pData, uint16_t Length)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8002de8:	887a      	ldrh	r2, [r7, #2]
 8002dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4806      	ldr	r0, [pc, #24]	@ (8002e0c <BSP_SPI2_Recv+0x34>)
 8002df2:	f005 fadf 	bl	80083b4 <HAL_SPI_Receive>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <BSP_SPI2_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002dfc:	f06f 0305 	mvn.w	r3, #5
 8002e00:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200001b8 	.word	0x200001b8

08002e10 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002e14:	f000 f9d0 	bl	80031b8 <HAL_GetTick>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	75fb      	strb	r3, [r7, #23]
  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8002e2c:	f107 0308 	add.w	r3, r7, #8
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]

  hspi->Instance = SPI2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a32      	ldr	r2, [pc, #200]	@ (8002f04 <MX_SPI2_Init+0xe4>)
 8002e3c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e44:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2207      	movs	r2, #7
 8002e50:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e58:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e60:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e68:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002e70:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 0x7;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2207      	movs	r2, #7
 8002e88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi->Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi->Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f004 ff10 	bl	8007cec <HAL_SPI_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_SPI2_Init+0xb6>
  {
    ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
  }

  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8002eda:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002ede:	60fb      	str	r3, [r7, #12]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  if (HAL_SPIEx_SetConfigAutonomousMode(hspi, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f005 fcfb 	bl	80088e6 <HAL_SPIEx_SetConfigAutonomousMode>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_SPI2_Init+0xda>
  {
    ret = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40003800 	.word	0x40003800

08002f08 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b0bc      	sub	sp, #240	@ 0xf0
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	22c8      	movs	r2, #200	@ 0xc8
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f006 fe0d 	bl	8009b38 <memset>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002f1e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 f9f9 	bl	800532c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f3a:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <SPI2_MspInit+0xf4>)
 8002f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f40:	4a2e      	ldr	r2, [pc, #184]	@ (8002ffc <SPI2_MspInit+0xf4>)
 8002f42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f46:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ffc <SPI2_MspInit+0xf4>)
 8002f4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <SPI2_MspInit+0xf4>)
 8002f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f5e:	4a27      	ldr	r2, [pc, #156]	@ (8002ffc <SPI2_MspInit+0xf4>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f68:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <SPI2_MspInit+0xf4>)
 8002f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI3     ------> SPI2_MOSI
    PI2     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8002f76:	2302      	movs	r3, #2
 8002f78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8002f8e:	2305      	movs	r3, #5
 8002f90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002f94:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4819      	ldr	r0, [pc, #100]	@ (8003000 <SPI2_MspInit+0xf8>)
 8002f9c:	f000 fb96 	bl	80036cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8002fb8:	2305      	movs	r3, #5
 8002fba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002fbe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	480e      	ldr	r0, [pc, #56]	@ (8003000 <SPI2_MspInit+0xf8>)
 8002fc6:	f000 fb81 	bl	80036cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8002fe2:	2305      	movs	r3, #5
 8002fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002fe8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002fec:	4619      	mov	r1, r3
 8002fee:	4804      	ldr	r0, [pc, #16]	@ (8003000 <SPI2_MspInit+0xf8>)
 8002ff0:	f000 fb6c 	bl	80036cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	37f0      	adds	r7, #240	@ 0xf0
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	46020c00 	.word	0x46020c00
 8003000:	42022000 	.word	0x42022000

08003004 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <SPI2_MspDeInit+0x38>)
 800300e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003012:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <SPI2_MspDeInit+0x38>)
 8003014:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003018:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI3     ------> SPI2_MOSI
    PI2     ------> SPI2_MISO
    */
    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 800301c:	2102      	movs	r1, #2
 800301e:	4808      	ldr	r0, [pc, #32]	@ (8003040 <SPI2_MspDeInit+0x3c>)
 8003020:	f000 fd2c 	bl	8003a7c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 8003024:	2108      	movs	r1, #8
 8003026:	4806      	ldr	r0, [pc, #24]	@ (8003040 <SPI2_MspDeInit+0x3c>)
 8003028:	f000 fd28 	bl	8003a7c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 800302c:	2104      	movs	r1, #4
 800302e:	4804      	ldr	r0, [pc, #16]	@ (8003040 <SPI2_MspDeInit+0x3c>)
 8003030:	f000 fd24 	bl	8003a7c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	46020c00 	.word	0x46020c00
 8003040:	42022000 	.word	0x42022000

08003044 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003048:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_Init+0x50>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a11      	ldr	r2, [pc, #68]	@ (8003094 <HAL_Init+0x50>)
 800304e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003054:	2003      	movs	r0, #3
 8003056:	f000 f96e 	bl	8003336 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800305a:	f001 ff89 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <HAL_Init+0x54>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	490c      	ldr	r1, [pc, #48]	@ (800309c <HAL_Init+0x58>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
 8003070:	4a0b      	ldr	r2, [pc, #44]	@ (80030a0 <HAL_Init+0x5c>)
 8003072:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003074:	2004      	movs	r0, #4
 8003076:	f000 f9a5 	bl	80033c4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800307a:	200f      	movs	r0, #15
 800307c:	f000 f812 	bl	80030a4 <HAL_InitTick>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e002      	b.n	8003090 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800308a:	f7fd fcc9 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40022000 	.word	0x40022000
 8003098:	46020c00 	.word	0x46020c00
 800309c:	0800a4fc 	.word	0x0800a4fc
 80030a0:	20000000 	.word	0x20000000

080030a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80030b0:	4b33      	ldr	r3, [pc, #204]	@ (8003180 <HAL_InitTick+0xdc>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e05c      	b.n	8003176 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80030bc:	4b31      	ldr	r3, [pc, #196]	@ (8003184 <HAL_InitTick+0xe0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d10c      	bne.n	80030e2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80030c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003188 <HAL_InitTick+0xe4>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003180 <HAL_InitTick+0xdc>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	4619      	mov	r1, r3
 80030d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e037      	b.n	8003152 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80030e2:	f000 f9c7 	bl	8003474 <HAL_SYSTICK_GetCLKSourceConfig>
 80030e6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d023      	beq.n	8003136 <HAL_InitTick+0x92>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d82d      	bhi.n	8003150 <HAL_InitTick+0xac>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_InitTick+0x5e>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00d      	beq.n	800311c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003100:	e026      	b.n	8003150 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003102:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <HAL_InitTick+0xe4>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <HAL_InitTick+0xdc>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003110:	fbb3 f3f1 	udiv	r3, r3, r1
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	60fb      	str	r3, [r7, #12]
        break;
 800311a:	e01a      	b.n	8003152 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800311c:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <HAL_InitTick+0xdc>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003126:	fbb3 f3f2 	udiv	r3, r3, r2
 800312a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	60fb      	str	r3, [r7, #12]
        break;
 8003134:	e00d      	b.n	8003152 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_InitTick+0xdc>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003140:	fbb3 f3f2 	udiv	r3, r3, r2
 8003144:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	60fb      	str	r3, [r7, #12]
        break;
 800314e:	e000      	b.n	8003152 <HAL_InitTick+0xae>
        break;
 8003150:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f914 	bl	8003380 <HAL_SYSTICK_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e009      	b.n	8003176 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003162:	2200      	movs	r2, #0
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800316a:	f000 f8ef 	bl	800334c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800316e:	4a07      	ldr	r2, [pc, #28]	@ (800318c <HAL_InitTick+0xe8>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000060 	.word	0x20000060
 8003184:	e000e010 	.word	0xe000e010
 8003188:	20000000 	.word	0x20000000
 800318c:	2000005c 	.word	0x2000005c

08003190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_IncTick+0x20>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_IncTick+0x24>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	4a04      	ldr	r2, [pc, #16]	@ (80031b4 <HAL_IncTick+0x24>)
 80031a2:	6013      	str	r3, [r2, #0]
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000060 	.word	0x20000060
 80031b4:	2000024c 	.word	0x2000024c

080031b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return uwTick;
 80031bc:	4b03      	ldr	r3, [pc, #12]	@ (80031cc <HAL_GetTick+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	2000024c 	.word	0x2000024c

080031d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7ff ffee 	bl	80031b8 <HAL_GetTick>
 80031dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031e8:	d005      	beq.n	80031f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <HAL_Delay+0x44>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031f6:	bf00      	nop
 80031f8:	f7ff ffde 	bl	80031b8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	429a      	cmp	r2, r3
 8003206:	d8f7      	bhi.n	80031f8 <HAL_Delay+0x28>
  {
  }
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000060 	.word	0x20000060

08003218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	@ (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	@ (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db0a      	blt.n	80032a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	490c      	ldr	r1, [pc, #48]	@ (80032c8 <__NVIC_SetPriority+0x4c>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	440b      	add	r3, r1
 80032a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a4:	e00a      	b.n	80032bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4908      	ldr	r1, [pc, #32]	@ (80032cc <__NVIC_SetPriority+0x50>)
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3b04      	subs	r3, #4
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	440b      	add	r3, r1
 80032ba:	761a      	strb	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	@ 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	bf28      	it	cs
 80032ee:	2304      	movcs	r3, #4
 80032f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d902      	bls.n	8003300 <NVIC_EncodePriority+0x30>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b03      	subs	r3, #3
 80032fe:	e000      	b.n	8003302 <NVIC_EncodePriority+0x32>
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	401a      	ands	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003318:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	4313      	orrs	r3, r2
         );
}
 800332a:	4618      	mov	r0, r3
 800332c:	3724      	adds	r7, #36	@ 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff6a 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800335a:	f7ff ff81 	bl	8003260 <__NVIC_GetPriorityGrouping>
 800335e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	6978      	ldr	r0, [r7, #20]
 8003366:	f7ff ffb3 	bl	80032d0 <NVIC_EncodePriority>
 800336a:	4602      	mov	r2, r0
 800336c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ff82 	bl	800327c <__NVIC_SetPriority>
}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003390:	d301      	bcc.n	8003396 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003392:	2301      	movs	r3, #1
 8003394:	e00d      	b.n	80033b2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003396:	4a0a      	ldr	r2, [pc, #40]	@ (80033c0 <HAL_SYSTICK_Config+0x40>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800339e:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <HAL_SYSTICK_Config+0x40>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80033a4:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <HAL_SYSTICK_Config+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a05      	ldr	r2, [pc, #20]	@ (80033c0 <HAL_SYSTICK_Config+0x40>)
 80033aa:	f043 0303 	orr.w	r3, r3, #3
 80033ae:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e010 	.word	0xe000e010

080033c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d844      	bhi.n	800345c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80033d2:	a201      	add	r2, pc, #4	@ (adr r2, 80033d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033fb 	.word	0x080033fb
 80033dc:	08003419 	.word	0x08003419
 80033e0:	0800343b 	.word	0x0800343b
 80033e4:	0800345d 	.word	0x0800345d
 80033e8:	080033ed 	.word	0x080033ed
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80033ec:	4b1f      	ldr	r3, [pc, #124]	@ (800346c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1e      	ldr	r2, [pc, #120]	@ (800346c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80033f2:	f043 0304 	orr.w	r3, r3, #4
 80033f6:	6013      	str	r3, [r2, #0]
      break;
 80033f8:	e031      	b.n	800345e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80033fa:	4b1c      	ldr	r3, [pc, #112]	@ (800346c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1b      	ldr	r2, [pc, #108]	@ (800346c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003406:	4b1a      	ldr	r3, [pc, #104]	@ (8003470 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800340c:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800340e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003412:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003416:	e022      	b.n	800345e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003418:	4b14      	ldr	r3, [pc, #80]	@ (800346c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a13      	ldr	r2, [pc, #76]	@ (800346c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800341e:	f023 0304 	bic.w	r3, r3, #4
 8003422:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003424:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800342a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800342e:	4a10      	ldr	r2, [pc, #64]	@ (8003470 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003430:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003434:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003438:	e011      	b.n	800345e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800343a:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a0b      	ldr	r2, [pc, #44]	@ (800346c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003446:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800344c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003450:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003452:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003456:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800345a:	e000      	b.n	800345e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800345c:	bf00      	nop
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e010 	.word	0xe000e010
 8003470:	46020c00 	.word	0x46020c00

08003474 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003486:	2304      	movs	r3, #4
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	e021      	b.n	80034d0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800348e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003492:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003496:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800349e:	d011      	beq.n	80034c4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034a6:	d810      	bhi.n	80034ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034b4:	d003      	beq.n	80034be <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80034b6:	e008      	b.n	80034ca <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80034b8:	2300      	movs	r3, #0
 80034ba:	607b      	str	r3, [r7, #4]
        break;
 80034bc:	e008      	b.n	80034d0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80034be:	2301      	movs	r3, #1
 80034c0:	607b      	str	r3, [r7, #4]
        break;
 80034c2:	e005      	b.n	80034d0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80034c4:	2302      	movs	r3, #2
 80034c6:	607b      	str	r3, [r7, #4]
        break;
 80034c8:	e002      	b.n	80034d0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
        break;
 80034ce:	bf00      	nop
    }
  }
  return systick_source;
 80034d0:	687b      	ldr	r3, [r7, #4]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010
 80034e4:	46020c00 	.word	0x46020c00

080034e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e054      	b.n	80035a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7f5b      	ldrb	r3, [r3, #29]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd faa2 	bl	8000a54 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	791b      	ldrb	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10c      	bne.n	8003538 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a22      	ldr	r2, [pc, #136]	@ (80035ac <HAL_CRC_Init+0xc4>)
 8003524:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0218 	bic.w	r2, r2, #24
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	e00c      	b.n	8003552 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	461a      	mov	r2, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f834 	bl	80035b0 <HAL_CRCEx_Polynomial_Set>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e028      	b.n	80035a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	795b      	ldrb	r3, [r3, #5]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d105      	bne.n	8003566 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003562:	611a      	str	r2, [r3, #16]
 8003564:	e004      	b.n	8003570 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6912      	ldr	r2, [r2, #16]
 800356e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	04c11db7 	.word	0x04c11db7

080035b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80035c0:	231f      	movs	r3, #31
 80035c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
 80035d2:	e063      	b.n	800369c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80035d4:	bf00      	nop
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1e5a      	subs	r2, r3, #1
 80035da:	613a      	str	r2, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_CRCEx_Polynomial_Set+0x44>
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b18      	cmp	r3, #24
 80035f8:	d846      	bhi.n	8003688 <HAL_CRCEx_Polynomial_Set+0xd8>
 80035fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <HAL_CRCEx_Polynomial_Set+0x50>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	0800368f 	.word	0x0800368f
 8003604:	08003689 	.word	0x08003689
 8003608:	08003689 	.word	0x08003689
 800360c:	08003689 	.word	0x08003689
 8003610:	08003689 	.word	0x08003689
 8003614:	08003689 	.word	0x08003689
 8003618:	08003689 	.word	0x08003689
 800361c:	08003689 	.word	0x08003689
 8003620:	0800367d 	.word	0x0800367d
 8003624:	08003689 	.word	0x08003689
 8003628:	08003689 	.word	0x08003689
 800362c:	08003689 	.word	0x08003689
 8003630:	08003689 	.word	0x08003689
 8003634:	08003689 	.word	0x08003689
 8003638:	08003689 	.word	0x08003689
 800363c:	08003689 	.word	0x08003689
 8003640:	08003671 	.word	0x08003671
 8003644:	08003689 	.word	0x08003689
 8003648:	08003689 	.word	0x08003689
 800364c:	08003689 	.word	0x08003689
 8003650:	08003689 	.word	0x08003689
 8003654:	08003689 	.word	0x08003689
 8003658:	08003689 	.word	0x08003689
 800365c:	08003689 	.word	0x08003689
 8003660:	08003665 	.word	0x08003665
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b06      	cmp	r3, #6
 8003668:	d913      	bls.n	8003692 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800366e:	e010      	b.n	8003692 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b07      	cmp	r3, #7
 8003674:	d90f      	bls.n	8003696 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800367a:	e00c      	b.n	8003696 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b0f      	cmp	r3, #15
 8003680:	d90b      	bls.n	800369a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003686:	e008      	b.n	800369a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
        break;
 800368c:	e006      	b.n	800369c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800368e:	bf00      	nop
 8003690:	e004      	b.n	800369c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003692:	bf00      	nop
 8003694:	e002      	b.n	800369c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800369a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10d      	bne.n	80036be <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 0118 	bic.w	r1, r3, #24
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	@ 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80036de:	e1ba      	b.n	8003a56 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	2101      	movs	r1, #1
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	4013      	ands	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 81aa 	beq.w	8003a50 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a55      	ldr	r2, [pc, #340]	@ (8003854 <HAL_GPIO_Init+0x188>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d15d      	bne.n	80037c0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800370a:	2201      	movs	r2, #1
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	4013      	ands	r3, r2
 8003718:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0201 	and.w	r2, r3, #1
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	4313      	orrs	r3, r2
 800372c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003734:	4a48      	ldr	r2, [pc, #288]	@ (8003858 <HAL_GPIO_Init+0x18c>)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800373c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800373e:	4a46      	ldr	r2, [pc, #280]	@ (8003858 <HAL_GPIO_Init+0x18c>)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	08da      	lsrs	r2, r3, #3
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	3208      	adds	r2, #8
 8003752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003756:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	4013      	ands	r3, r2
 800376c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	220b      	movs	r2, #11
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	4313      	orrs	r3, r2
 8003780:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	08da      	lsrs	r2, r3, #3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	3208      	adds	r2, #8
 800378a:	69f9      	ldr	r1, [r7, #28]
 800378c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	2202      	movs	r2, #2
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e067      	b.n	8003890 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x104>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b12      	cmp	r3, #18
 80037ce:	d145      	bne.n	800385c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	4313      	orrs	r3, r2
 800380c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	08da      	lsrs	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3208      	adds	r2, #8
 8003816:	69f9      	ldr	r1, [r7, #28]
 8003818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	4013      	ands	r3, r2
 8003832:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	4313      	orrs	r3, r2
 8003848:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e01e      	b.n	8003890 <HAL_GPIO_Init+0x1c4>
 8003852:	bf00      	nop
 8003854:	46020000 	.word	0x46020000
 8003858:	0800a554 	.word	0x0800a554
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	2203      	movs	r2, #3
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	4013      	ands	r3, r2
 8003872:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0203 	and.w	r2, r3, #3
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	4313      	orrs	r3, r2
 8003888:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d00b      	beq.n	80038b0 <HAL_GPIO_Init+0x1e4>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d007      	beq.n	80038b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038a4:	2b11      	cmp	r3, #17
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b12      	cmp	r3, #18
 80038ae:	d130      	bne.n	8003912 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80038e6:	2201      	movs	r2, #1
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 0201 	and.w	r2, r3, #1
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	4313      	orrs	r3, r2
 800390a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d017      	beq.n	800394a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	2203      	movs	r2, #3
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	4013      	ands	r3, r2
 8003930:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	4313      	orrs	r3, r2
 8003942:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d07c      	beq.n	8003a50 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003956:	4a47      	ldr	r2, [pc, #284]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	3318      	adds	r3, #24
 800395e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003962:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	220f      	movs	r2, #15
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	4013      	ands	r3, r2
 8003978:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0a9a      	lsrs	r2, r3, #10
 800397e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a78 <HAL_GPIO_Init+0x3ac>)
 8003980:	4013      	ands	r3, r2
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	f002 0203 	and.w	r2, r2, #3
 8003988:	00d2      	lsls	r2, r2, #3
 800398a:	4093      	lsls	r3, r2
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	4313      	orrs	r3, r2
 8003990:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003992:	4938      	ldr	r1, [pc, #224]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3318      	adds	r3, #24
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80039a0:	4b34      	ldr	r3, [pc, #208]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80039c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80039ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	4013      	ands	r3, r2
 80039d8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80039ee:	4a21      	ldr	r2, [pc, #132]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80039f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 80039f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003a1a:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003a22:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 8003a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a28:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003a48:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <HAL_GPIO_Init+0x3a8>)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3301      	adds	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f ae3d 	bne.w	80036e0 <HAL_GPIO_Init+0x14>
  }
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	3724      	adds	r7, #36	@ 0x24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	46022000 	.word	0x46022000
 8003a78:	002f7f7f 	.word	0x002f7f7f

08003a7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b089      	sub	sp, #36	@ 0x24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003a8e:	e0bc      	b.n	8003c0a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003a90:	2201      	movs	r2, #1
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80ad 	beq.w	8003c04 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a5e      	ldr	r2, [pc, #376]	@ (8003c28 <HAL_GPIO_DeInit+0x1ac>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d115      	bne.n	8003ade <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8003ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8003c2c <HAL_GPIO_DeInit+0x1b0>)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003aba:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003abc:	4a5b      	ldr	r2, [pc, #364]	@ (8003c2c <HAL_GPIO_DeInit+0x1b0>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8003ac8:	4b57      	ldr	r3, [pc, #348]	@ (8003c28 <HAL_GPIO_DeInit+0x1ac>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2101      	movs	r1, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	4954      	ldr	r1, [pc, #336]	@ (8003c28 <HAL_GPIO_DeInit+0x1ac>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e053      	b.n	8003b86 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8003ade:	4a54      	ldr	r2, [pc, #336]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	3318      	adds	r3, #24
 8003ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aea:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4013      	ands	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0a9a      	lsrs	r2, r3, #10
 8003b04:	4b4b      	ldr	r3, [pc, #300]	@ (8003c34 <HAL_GPIO_DeInit+0x1b8>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	f002 0203 	and.w	r2, r2, #3
 8003b0e:	00d2      	lsls	r2, r2, #3
 8003b10:	4093      	lsls	r3, r2
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d136      	bne.n	8003b86 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8003b18:	4b45      	ldr	r3, [pc, #276]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	4943      	ldr	r1, [pc, #268]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8003b2a:	4b41      	ldr	r3, [pc, #260]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	493e      	ldr	r1, [pc, #248]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8003b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	493a      	ldr	r1, [pc, #232]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8003b4a:	4b39      	ldr	r3, [pc, #228]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	4937      	ldr	r1, [pc, #220]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	220f      	movs	r2, #15
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8003b68:	4a31      	ldr	r2, [pc, #196]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	3318      	adds	r3, #24
 8003b70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	43da      	mvns	r2, r3
 8003b78:	482d      	ldr	r0, [pc, #180]	@ (8003c30 <HAL_GPIO_DeInit+0x1b4>)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	400a      	ands	r2, r1
 8003b80:	3318      	adds	r3, #24
 8003b82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2103      	movs	r1, #3
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	431a      	orrs	r2, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	08da      	lsrs	r2, r3, #3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3208      	adds	r2, #8
 8003ba2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	220f      	movs	r2, #15
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	08d2      	lsrs	r2, r2, #3
 8003bba:	4019      	ands	r1, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3208      	adds	r2, #8
 8003bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	2103      	movs	r1, #3
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	2101      	movs	r1, #1
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	401a      	ands	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2103      	movs	r1, #3
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	401a      	ands	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	3301      	adds	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f47f af3c 	bne.w	8003a90 <HAL_GPIO_DeInit+0x14>
  }
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	3724      	adds	r7, #36	@ 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	46020000 	.word	0x46020000
 8003c2c:	0800a554 	.word	0x0800a554
 8003c30:	46022000 	.word	0x46022000
 8003c34:	002f7f7f 	.word	0x002f7f7f

08003c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	807b      	strh	r3, [r7, #2]
 8003c44:	4613      	mov	r3, r2
 8003c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c48:	787b      	ldrb	r3, [r7, #1]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003c54:	e002      	b.n	8003c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003c56:	887a      	ldrh	r2, [r7, #2]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	041a      	lsls	r2, r3, #16
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	43d9      	mvns	r1, r3
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	400b      	ands	r3, r1
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003ca0:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <HAL_ICACHE_Enable+0x1c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a04      	ldr	r2, [pc, #16]	@ (8003cb8 <HAL_ICACHE_Enable+0x1c>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40030400 	.word	0x40030400

08003cbc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003cc4:	4b39      	ldr	r3, [pc, #228]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ccc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d10b      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cdc:	d905      	bls.n	8003cea <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003cde:	4b33      	ldr	r3, [pc, #204]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a32      	ldr	r2, [pc, #200]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ce8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e057      	b.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf4:	d90a      	bls.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	4a2a      	ldr	r2, [pc, #168]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d08:	60d3      	str	r3, [r2, #12]
 8003d0a:	e007      	b.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003d0c:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003d14:	4925      	ldr	r1, [pc, #148]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003d1c:	4b24      	ldr	r3, [pc, #144]	@ (8003db0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a24      	ldr	r2, [pc, #144]	@ (8003db4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	099b      	lsrs	r3, r3, #6
 8003d28:	2232      	movs	r2, #50	@ 0x32
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	4a21      	ldr	r2, [pc, #132]	@ (8003db4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003d3a:	e002      	b.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003d42:	4b1a      	ldr	r3, [pc, #104]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f3      	bne.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01b      	beq.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	@ (8003db0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a15      	ldr	r2, [pc, #84]	@ (8003db4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	2232      	movs	r2, #50	@ 0x32
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	4a11      	ldr	r2, [pc, #68]	@ (8003db4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	099b      	lsrs	r3, r3, #6
 8003d74:	3301      	adds	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003d78:	e002      	b.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003d80:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f3      	bne.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e000      	b.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	46020800 	.word	0x46020800
 8003db0:	20000000 	.word	0x20000000
 8003db4:	10624dd3 	.word	0x10624dd3

08003db8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003dbc:	4b04      	ldr	r3, [pc, #16]	@ (8003dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	46020800 	.word	0x46020800

08003dd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08e      	sub	sp, #56	@ 0x38
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f000 bec8 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dee:	4b99      	ldr	r3, [pc, #612]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df8:	4b96      	ldr	r3, [pc, #600]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 816c 	beq.w	80040e8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <HAL_RCC_OscConfig+0x52>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	f040 80de 	bne.w	8003fda <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	f040 80da 	bne.w	8003fda <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f000 bea5 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e38:	4b86      	ldr	r3, [pc, #536]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_RCC_OscConfig+0x7a>
 8003e44:	4b83      	ldr	r3, [pc, #524]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e4c:	e005      	b.n	8003e5a <HAL_RCC_OscConfig+0x86>
 8003e4e:	4b81      	ldr	r3, [pc, #516]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d255      	bcs.n	8003f0a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 f9d9 	bl	8005220 <RCC_SetFlashLatencyFromMSIRange>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f000 be82 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003e7a:	4b76      	ldr	r3, [pc, #472]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4a75      	ldr	r2, [pc, #468]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003e80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e84:	6093      	str	r3, [r2, #8]
 8003e86:	4b73      	ldr	r3, [pc, #460]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	4970      	ldr	r1, [pc, #448]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ea0:	d309      	bcc.n	8003eb6 <HAL_RCC_OscConfig+0xe2>
 8003ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f023 021f 	bic.w	r2, r3, #31
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	4969      	ldr	r1, [pc, #420]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60cb      	str	r3, [r1, #12]
 8003eb4:	e07e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x1e0>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da0a      	bge.n	8003ed4 <HAL_RCC_OscConfig+0x100>
 8003ebe:	4b65      	ldr	r3, [pc, #404]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	015b      	lsls	r3, r3, #5
 8003ecc:	4961      	ldr	r1, [pc, #388]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60cb      	str	r3, [r1, #12]
 8003ed2:	e06f      	b.n	8003fb4 <HAL_RCC_OscConfig+0x1e0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003edc:	d30a      	bcc.n	8003ef4 <HAL_RCC_OscConfig+0x120>
 8003ede:	4b5d      	ldr	r3, [pc, #372]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	029b      	lsls	r3, r3, #10
 8003eec:	4959      	ldr	r1, [pc, #356]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60cb      	str	r3, [r1, #12]
 8003ef2:	e05f      	b.n	8003fb4 <HAL_RCC_OscConfig+0x1e0>
 8003ef4:	4b57      	ldr	r3, [pc, #348]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	03db      	lsls	r3, r3, #15
 8003f02:	4954      	ldr	r1, [pc, #336]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60cb      	str	r3, [r1, #12]
 8003f08:	e054      	b.n	8003fb4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003f0a:	4b52      	ldr	r3, [pc, #328]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4a51      	ldr	r2, [pc, #324]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f14:	6093      	str	r3, [r2, #8]
 8003f16:	4b4f      	ldr	r3, [pc, #316]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	494c      	ldr	r1, [pc, #304]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003f30:	d309      	bcc.n	8003f46 <HAL_RCC_OscConfig+0x172>
 8003f32:	4b48      	ldr	r3, [pc, #288]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f023 021f 	bic.w	r2, r3, #31
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4945      	ldr	r1, [pc, #276]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60cb      	str	r3, [r1, #12]
 8003f44:	e028      	b.n	8003f98 <HAL_RCC_OscConfig+0x1c4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	da0a      	bge.n	8003f64 <HAL_RCC_OscConfig+0x190>
 8003f4e:	4b41      	ldr	r3, [pc, #260]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	015b      	lsls	r3, r3, #5
 8003f5c:	493d      	ldr	r1, [pc, #244]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60cb      	str	r3, [r1, #12]
 8003f62:	e019      	b.n	8003f98 <HAL_RCC_OscConfig+0x1c4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f6c:	d30a      	bcc.n	8003f84 <HAL_RCC_OscConfig+0x1b0>
 8003f6e:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	029b      	lsls	r3, r3, #10
 8003f7c:	4935      	ldr	r1, [pc, #212]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60cb      	str	r3, [r1, #12]
 8003f82:	e009      	b.n	8003f98 <HAL_RCC_OscConfig+0x1c4>
 8003f84:	4b33      	ldr	r3, [pc, #204]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	03db      	lsls	r3, r3, #15
 8003f92:	4930      	ldr	r1, [pc, #192]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 f93c 	bl	8005220 <RCC_SetFlashLatencyFromMSIRange>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f000 bde5 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003fb4:	f001 f8de 	bl	8005174 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fb8:	4b27      	ldr	r3, [pc, #156]	@ (8004058 <HAL_RCC_OscConfig+0x284>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff f871 	bl	80030a4 <HAL_InitTick>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 808a 	beq.w	80040e6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fd6:	f000 bdd2 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d066      	beq.n	80040b0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fee:	f7ff f8e3 	bl	80031b8 <HAL_GetTick>
 8003ff2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003ff4:	e009      	b.n	800400a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ff6:	f7ff f8df 	bl	80031b8 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d902      	bls.n	800400a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	f000 bdba 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800400a:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ef      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004016:	4b0f      	ldr	r3, [pc, #60]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	4a0e      	ldr	r2, [pc, #56]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 800401c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004020:	6093      	str	r3, [r2, #8]
 8004022:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	4909      	ldr	r1, [pc, #36]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800403c:	d30e      	bcc.n	800405c <HAL_RCC_OscConfig+0x288>
 800403e:	4b05      	ldr	r3, [pc, #20]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f023 021f 	bic.w	r2, r3, #31
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4902      	ldr	r1, [pc, #8]	@ (8004054 <HAL_RCC_OscConfig+0x280>)
 800404c:	4313      	orrs	r3, r2
 800404e:	60cb      	str	r3, [r1, #12]
 8004050:	e04a      	b.n	80040e8 <HAL_RCC_OscConfig+0x314>
 8004052:	bf00      	nop
 8004054:	46020c00 	.word	0x46020c00
 8004058:	2000005c 	.word	0x2000005c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	da0a      	bge.n	800407a <HAL_RCC_OscConfig+0x2a6>
 8004064:	4b98      	ldr	r3, [pc, #608]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	015b      	lsls	r3, r3, #5
 8004072:	4995      	ldr	r1, [pc, #596]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004074:	4313      	orrs	r3, r2
 8004076:	60cb      	str	r3, [r1, #12]
 8004078:	e036      	b.n	80040e8 <HAL_RCC_OscConfig+0x314>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004082:	d30a      	bcc.n	800409a <HAL_RCC_OscConfig+0x2c6>
 8004084:	4b90      	ldr	r3, [pc, #576]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	029b      	lsls	r3, r3, #10
 8004092:	498d      	ldr	r1, [pc, #564]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004094:	4313      	orrs	r3, r2
 8004096:	60cb      	str	r3, [r1, #12]
 8004098:	e026      	b.n	80040e8 <HAL_RCC_OscConfig+0x314>
 800409a:	4b8b      	ldr	r3, [pc, #556]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	03db      	lsls	r3, r3, #15
 80040a8:	4987      	ldr	r1, [pc, #540]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60cb      	str	r3, [r1, #12]
 80040ae:	e01b      	b.n	80040e8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80040b0:	4b85      	ldr	r3, [pc, #532]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a84      	ldr	r2, [pc, #528]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040bc:	f7ff f87c 	bl	80031b8 <HAL_GetTick>
 80040c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80040c2:	e009      	b.n	80040d8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c4:	f7ff f878 	bl	80031b8 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d902      	bls.n	80040d8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	f000 bd53 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80040d8:	4b7b      	ldr	r3, [pc, #492]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ef      	bne.n	80040c4 <HAL_RCC_OscConfig+0x2f0>
 80040e4:	e000      	b.n	80040e8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80040e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 808b 	beq.w	800420c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_OscConfig+0x334>
 80040fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fe:	2b0c      	cmp	r3, #12
 8004100:	d109      	bne.n	8004116 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004104:	2b03      	cmp	r3, #3
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d17d      	bne.n	800420c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f000 bd34 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800411e:	d106      	bne.n	800412e <HAL_RCC_OscConfig+0x35a>
 8004120:	4b69      	ldr	r3, [pc, #420]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a68      	ldr	r2, [pc, #416]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	e041      	b.n	80041b2 <HAL_RCC_OscConfig+0x3de>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004136:	d112      	bne.n	800415e <HAL_RCC_OscConfig+0x38a>
 8004138:	4b63      	ldr	r3, [pc, #396]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a62      	ldr	r2, [pc, #392]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800413e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b60      	ldr	r3, [pc, #384]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5f      	ldr	r2, [pc, #380]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800414a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b5d      	ldr	r3, [pc, #372]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a5c      	ldr	r2, [pc, #368]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	e029      	b.n	80041b2 <HAL_RCC_OscConfig+0x3de>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004166:	d112      	bne.n	800418e <HAL_RCC_OscConfig+0x3ba>
 8004168:	4b57      	ldr	r3, [pc, #348]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a56      	ldr	r2, [pc, #344]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800416e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b54      	ldr	r3, [pc, #336]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a53      	ldr	r2, [pc, #332]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b51      	ldr	r3, [pc, #324]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a50      	ldr	r2, [pc, #320]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	e011      	b.n	80041b2 <HAL_RCC_OscConfig+0x3de>
 800418e:	4b4e      	ldr	r3, [pc, #312]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a4d      	ldr	r2, [pc, #308]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	4b4b      	ldr	r3, [pc, #300]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a4a      	ldr	r2, [pc, #296]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80041a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b48      	ldr	r3, [pc, #288]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a47      	ldr	r2, [pc, #284]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80041ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80041ba:	f7fe fffd 	bl	80031b8 <HAL_GetTick>
 80041be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c0:	e009      	b.n	80041d6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c2:	f7fe fff9 	bl	80031b8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b64      	cmp	r3, #100	@ 0x64
 80041ce:	d902      	bls.n	80041d6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	f000 bcd4 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d6:	4b3c      	ldr	r3, [pc, #240]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ef      	beq.n	80041c2 <HAL_RCC_OscConfig+0x3ee>
 80041e2:	e013      	b.n	800420c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80041e4:	f7fe ffe8 	bl	80031b8 <HAL_GetTick>
 80041e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ea:	e009      	b.n	8004200 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fe ffe4 	bl	80031b8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	@ 0x64
 80041f8:	d902      	bls.n	8004200 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	f000 bcbf 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004200:	4b31      	ldr	r3, [pc, #196]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ef      	bne.n	80041ec <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05f      	beq.n	80042d8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421a:	2b04      	cmp	r3, #4
 800421c:	d005      	beq.n	800422a <HAL_RCC_OscConfig+0x456>
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	2b0c      	cmp	r3, #12
 8004222:	d114      	bne.n	800424e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004226:	2b02      	cmp	r3, #2
 8004228:	d111      	bne.n	800424e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f000 bca3 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004238:	4b23      	ldr	r3, [pc, #140]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	4920      	ldr	r1, [pc, #128]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800424c:	e044      	b.n	80042d8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d024      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004256:	4b1c      	ldr	r3, [pc, #112]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1b      	ldr	r2, [pc, #108]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800425c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004260:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004262:	f7fe ffa9 	bl	80031b8 <HAL_GetTick>
 8004266:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004268:	e009      	b.n	800427e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426a:	f7fe ffa5 	bl	80031b8 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d902      	bls.n	800427e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	f000 bc80 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800427e:	4b12      	ldr	r3, [pc, #72]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ef      	beq.n	800426a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800428a:	4b0f      	ldr	r3, [pc, #60]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	041b      	lsls	r3, r3, #16
 8004298:	490b      	ldr	r1, [pc, #44]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	610b      	str	r3, [r1, #16]
 800429e:	e01b      	b.n	80042d8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80042a0:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a08      	ldr	r2, [pc, #32]	@ (80042c8 <HAL_RCC_OscConfig+0x4f4>)
 80042a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042ac:	f7fe ff84 	bl	80031b8 <HAL_GetTick>
 80042b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b4:	f7fe ff80 	bl	80031b8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d904      	bls.n	80042cc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	f000 bc5b 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
 80042c8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042cc:	4baf      	ldr	r3, [pc, #700]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ed      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80c8 	beq.w	8004476 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ec:	4ba7      	ldr	r3, [pc, #668]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d111      	bne.n	800431e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	4ba4      	ldr	r3, [pc, #656]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004300:	4aa2      	ldr	r2, [pc, #648]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004302:	f043 0304 	orr.w	r3, r3, #4
 8004306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800430a:	4ba0      	ldr	r3, [pc, #640]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800430c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800431e:	4b9c      	ldr	r3, [pc, #624]	@ (8004590 <HAL_RCC_OscConfig+0x7bc>)
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d119      	bne.n	800435e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800432a:	4b99      	ldr	r3, [pc, #612]	@ (8004590 <HAL_RCC_OscConfig+0x7bc>)
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	4a98      	ldr	r2, [pc, #608]	@ (8004590 <HAL_RCC_OscConfig+0x7bc>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004336:	f7fe ff3f 	bl	80031b8 <HAL_GetTick>
 800433a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800433c:	e009      	b.n	8004352 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433e:	f7fe ff3b 	bl	80031b8 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d902      	bls.n	8004352 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	f000 bc16 	b.w	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004352:	4b8f      	ldr	r3, [pc, #572]	@ (8004590 <HAL_RCC_OscConfig+0x7bc>)
 8004354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ef      	beq.n	800433e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d05f      	beq.n	8004426 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004366:	4b89      	ldr	r3, [pc, #548]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800436c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004378:	429a      	cmp	r2, r3
 800437a:	d037      	beq.n	80043ec <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d006      	beq.n	8004394 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e3f4      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01b      	beq.n	80043d6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800439e:	4b7b      	ldr	r3, [pc, #492]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80043a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043a4:	4a79      	ldr	r2, [pc, #484]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80043a6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80043aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80043ae:	f7fe ff03 	bl	80031b8 <HAL_GetTick>
 80043b2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b6:	f7fe feff 	bl	80031b8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e3da      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043c8:	4b70      	ldr	r3, [pc, #448]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80043ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1ef      	bne.n	80043b6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80043d6:	4b6d      	ldr	r3, [pc, #436]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80043d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4969      	ldr	r1, [pc, #420]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80043ec:	4b67      	ldr	r3, [pc, #412]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80043ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043f2:	4a66      	ldr	r2, [pc, #408]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80043f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80043fc:	f7fe fedc 	bl	80031b8 <HAL_GetTick>
 8004400:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004404:	f7fe fed8 	bl	80031b8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b05      	cmp	r3, #5
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e3b3      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004416:	4b5d      	ldr	r3, [pc, #372]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800441c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ef      	beq.n	8004404 <HAL_RCC_OscConfig+0x630>
 8004424:	e01b      	b.n	800445e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004426:	4b59      	ldr	r3, [pc, #356]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800442c:	4a57      	ldr	r2, [pc, #348]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800442e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004432:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004436:	f7fe febf 	bl	80031b8 <HAL_GetTick>
 800443a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443e:	f7fe febb 	bl	80031b8 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b05      	cmp	r3, #5
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e396      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004450:	4b4e      	ldr	r3, [pc, #312]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1ef      	bne.n	800443e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800445e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004462:	2b01      	cmp	r3, #1
 8004464:	d107      	bne.n	8004476 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004466:	4b49      	ldr	r3, [pc, #292]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446c:	4a47      	ldr	r2, [pc, #284]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800446e:	f023 0304 	bic.w	r3, r3, #4
 8004472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8111 	beq.w	80046a6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448a:	4b40      	ldr	r3, [pc, #256]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800448c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d111      	bne.n	80044bc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b3c      	ldr	r3, [pc, #240]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449e:	4a3b      	ldr	r2, [pc, #236]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80044a8:	4b38      	ldr	r3, [pc, #224]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 80044aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044bc:	4b34      	ldr	r3, [pc, #208]	@ (8004590 <HAL_RCC_OscConfig+0x7bc>)
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d118      	bne.n	80044fa <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80044c8:	4b31      	ldr	r3, [pc, #196]	@ (8004590 <HAL_RCC_OscConfig+0x7bc>)
 80044ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044cc:	4a30      	ldr	r2, [pc, #192]	@ (8004590 <HAL_RCC_OscConfig+0x7bc>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d4:	f7fe fe70 	bl	80031b8 <HAL_GetTick>
 80044d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044dc:	f7fe fe6c 	bl	80031b8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e347      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044ee:	4b28      	ldr	r3, [pc, #160]	@ (8004590 <HAL_RCC_OscConfig+0x7bc>)
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01f      	beq.n	8004546 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d010      	beq.n	8004534 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004512:	4b1e      	ldr	r3, [pc, #120]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004518:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800451a:	f043 0304 	orr.w	r3, r3, #4
 800451e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004522:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004528:	4a18      	ldr	r2, [pc, #96]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004532:	e018      	b.n	8004566 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004534:	4b15      	ldr	r3, [pc, #84]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800453a:	4a14      	ldr	r2, [pc, #80]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004544:	e00f      	b.n	8004566 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004546:	4b11      	ldr	r3, [pc, #68]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800454c:	4a0f      	ldr	r2, [pc, #60]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 8004558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800455c:	4a0b      	ldr	r2, [pc, #44]	@ (800458c <HAL_RCC_OscConfig+0x7b8>)
 800455e:	f023 0304 	bic.w	r3, r3, #4
 8004562:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d057      	beq.n	800461e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800456e:	f7fe fe23 	bl	80031b8 <HAL_GetTick>
 8004572:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004574:	e00e      	b.n	8004594 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fe fe1f 	bl	80031b8 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d905      	bls.n	8004594 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e2f8      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
 800458c:	46020c00 	.word	0x46020c00
 8004590:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004594:	4b9c      	ldr	r3, [pc, #624]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 8004596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0e9      	beq.n	8004576 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01b      	beq.n	80045e6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045ae:	4b96      	ldr	r3, [pc, #600]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80045b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045b4:	4a94      	ldr	r2, [pc, #592]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80045b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fe fdfa 	bl	80031b8 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e2d3      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80045d6:	4b8c      	ldr	r3, [pc, #560]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80045d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ed      	beq.n	80045c0 <HAL_RCC_OscConfig+0x7ec>
 80045e4:	e053      	b.n	800468e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045e6:	4b88      	ldr	r3, [pc, #544]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80045e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ec:	4a86      	ldr	r2, [pc, #536]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80045ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fe fdde 	bl	80031b8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e2b7      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800460e:	4b7e      	ldr	r3, [pc, #504]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 8004610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ed      	bne.n	80045f8 <HAL_RCC_OscConfig+0x824>
 800461c:	e037      	b.n	800468e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800461e:	f7fe fdcb 	bl	80031b8 <HAL_GetTick>
 8004622:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004624:	e00a      	b.n	800463c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fe fdc7 	bl	80031b8 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e2a0      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800463c:	4b72      	ldr	r3, [pc, #456]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 800463e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ed      	bne.n	8004626 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800464a:	4b6f      	ldr	r3, [pc, #444]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 800464c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01a      	beq.n	800468e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004658:	4b6b      	ldr	r3, [pc, #428]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 800465a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800465e:	4a6a      	ldr	r2, [pc, #424]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 8004660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004664:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004668:	e00a      	b.n	8004680 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466a:	f7fe fda5 	bl	80031b8 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e27e      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004680:	4b61      	ldr	r3, [pc, #388]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 8004682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ed      	bne.n	800466a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800468e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004692:	2b01      	cmp	r3, #1
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004696:	4b5c      	ldr	r3, [pc, #368]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 8004698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469c:	4a5a      	ldr	r2, [pc, #360]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 800469e:	f023 0304 	bic.w	r3, r3, #4
 80046a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d036      	beq.n	8004720 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d019      	beq.n	80046ee <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80046ba:	4b53      	ldr	r3, [pc, #332]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a52      	ldr	r2, [pc, #328]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80046c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046c4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046c6:	f7fe fd77 	bl	80031b8 <HAL_GetTick>
 80046ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ce:	f7fe fd73 	bl	80031b8 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e24e      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80046e0:	4b49      	ldr	r3, [pc, #292]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x8fa>
 80046ec:	e018      	b.n	8004720 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80046ee:	4b46      	ldr	r3, [pc, #280]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a45      	ldr	r2, [pc, #276]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80046f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046f8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046fa:	f7fe fd5d 	bl	80031b8 <HAL_GetTick>
 80046fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004702:	f7fe fd59 	bl	80031b8 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e234      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004714:	4b3c      	ldr	r3, [pc, #240]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d036      	beq.n	800479a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004730:	2b00      	cmp	r3, #0
 8004732:	d019      	beq.n	8004768 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004734:	4b34      	ldr	r3, [pc, #208]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a33      	ldr	r2, [pc, #204]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 800473a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800473e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004740:	f7fe fd3a 	bl	80031b8 <HAL_GetTick>
 8004744:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004748:	f7fe fd36 	bl	80031b8 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e211      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800475a:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x974>
 8004766:	e018      	b.n	800479a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004768:	4b27      	ldr	r3, [pc, #156]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a26      	ldr	r2, [pc, #152]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 800476e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004772:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004774:	f7fe fd20 	bl	80031b8 <HAL_GetTick>
 8004778:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800477c:	f7fe fd1c 	bl	80031b8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1f7      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800478e:	4b1e      	ldr	r3, [pc, #120]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d07f      	beq.n	80048a6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d062      	beq.n	8004874 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80047ae:	4b16      	ldr	r3, [pc, #88]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	4a15      	ldr	r2, [pc, #84]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80047b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047b8:	6093      	str	r3, [r2, #8]
 80047ba:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	4910      	ldr	r1, [pc, #64]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80047d4:	d309      	bcc.n	80047ea <HAL_RCC_OscConfig+0xa16>
 80047d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f023 021f 	bic.w	r2, r3, #31
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4909      	ldr	r1, [pc, #36]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60cb      	str	r3, [r1, #12]
 80047e8:	e02a      	b.n	8004840 <HAL_RCC_OscConfig+0xa6c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	da0c      	bge.n	800480c <HAL_RCC_OscConfig+0xa38>
 80047f2:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	015b      	lsls	r3, r3, #5
 8004800:	4901      	ldr	r1, [pc, #4]	@ (8004808 <HAL_RCC_OscConfig+0xa34>)
 8004802:	4313      	orrs	r3, r2
 8004804:	60cb      	str	r3, [r1, #12]
 8004806:	e01b      	b.n	8004840 <HAL_RCC_OscConfig+0xa6c>
 8004808:	46020c00 	.word	0x46020c00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004814:	d30a      	bcc.n	800482c <HAL_RCC_OscConfig+0xa58>
 8004816:	4ba1      	ldr	r3, [pc, #644]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	029b      	lsls	r3, r3, #10
 8004824:	499d      	ldr	r1, [pc, #628]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	60cb      	str	r3, [r1, #12]
 800482a:	e009      	b.n	8004840 <HAL_RCC_OscConfig+0xa6c>
 800482c:	4b9b      	ldr	r3, [pc, #620]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	03db      	lsls	r3, r3, #15
 800483a:	4998      	ldr	r1, [pc, #608]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 800483c:	4313      	orrs	r3, r2
 800483e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004840:	4b96      	ldr	r3, [pc, #600]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a95      	ldr	r2, [pc, #596]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004846:	f043 0310 	orr.w	r3, r3, #16
 800484a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800484c:	f7fe fcb4 	bl	80031b8 <HAL_GetTick>
 8004850:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004854:	f7fe fcb0 	bl	80031b8 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e18b      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004866:	4b8d      	ldr	r3, [pc, #564]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0xa80>
 8004872:	e018      	b.n	80048a6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004874:	4b89      	ldr	r3, [pc, #548]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a88      	ldr	r2, [pc, #544]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 800487a:	f023 0310 	bic.w	r3, r3, #16
 800487e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004880:	f7fe fc9a 	bl	80031b8 <HAL_GetTick>
 8004884:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004888:	f7fe fc96 	bl	80031b8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e171      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800489a:	4b80      	ldr	r3, [pc, #512]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8166 	beq.w	8004b7c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b6:	4b79      	ldr	r3, [pc, #484]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b0c      	cmp	r3, #12
 80048c0:	f000 80f2 	beq.w	8004aa8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	f040 80c5 	bne.w	8004a58 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80048ce:	4b73      	ldr	r3, [pc, #460]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a72      	ldr	r2, [pc, #456]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80048d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80048da:	f7fe fc6d 	bl	80031b8 <HAL_GetTick>
 80048de:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fe fc69 	bl	80031b8 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e144      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048f4:	4b69      	ldr	r3, [pc, #420]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004900:	4b66      	ldr	r3, [pc, #408]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d111      	bne.n	8004932 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800490e:	4b63      	ldr	r3, [pc, #396]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004914:	4a61      	ldr	r2, [pc, #388]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800491e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004932:	4b5b      	ldr	r3, [pc, #364]	@ (8004aa0 <HAL_RCC_OscConfig+0xccc>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800493a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800493e:	d102      	bne.n	8004946 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004946:	4b56      	ldr	r3, [pc, #344]	@ (8004aa0 <HAL_RCC_OscConfig+0xccc>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	4a55      	ldr	r2, [pc, #340]	@ (8004aa0 <HAL_RCC_OscConfig+0xccc>)
 800494c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004950:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004952:	4b52      	ldr	r3, [pc, #328]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004966:	3a01      	subs	r2, #1
 8004968:	0212      	lsls	r2, r2, #8
 800496a:	4311      	orrs	r1, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004970:	430a      	orrs	r2, r1
 8004972:	494a      	ldr	r1, [pc, #296]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004974:	4313      	orrs	r3, r2
 8004976:	628b      	str	r3, [r1, #40]	@ 0x28
 8004978:	4b48      	ldr	r3, [pc, #288]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 800497a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800497c:	4b49      	ldr	r3, [pc, #292]	@ (8004aa4 <HAL_RCC_OscConfig+0xcd0>)
 800497e:	4013      	ands	r3, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004984:	3a01      	subs	r2, #1
 8004986:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800498e:	3a01      	subs	r2, #1
 8004990:	0252      	lsls	r2, r2, #9
 8004992:	b292      	uxth	r2, r2
 8004994:	4311      	orrs	r1, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800499a:	3a01      	subs	r2, #1
 800499c:	0412      	lsls	r2, r2, #16
 800499e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80049a2:	4311      	orrs	r1, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80049a8:	3a01      	subs	r2, #1
 80049aa:	0612      	lsls	r2, r2, #24
 80049ac:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80049b0:	430a      	orrs	r2, r1
 80049b2:	493a      	ldr	r1, [pc, #232]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80049b8:	4b38      	ldr	r3, [pc, #224]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80049ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049bc:	4a37      	ldr	r2, [pc, #220]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80049be:	f023 0310 	bic.w	r3, r3, #16
 80049c2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c8:	4a34      	ldr	r2, [pc, #208]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80049ce:	4b33      	ldr	r3, [pc, #204]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80049d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d2:	4a32      	ldr	r2, [pc, #200]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80049d4:	f043 0310 	orr.w	r3, r3, #16
 80049d8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80049da:	4b30      	ldr	r3, [pc, #192]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	f023 020c 	bic.w	r2, r3, #12
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e6:	492d      	ldr	r1, [pc, #180]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80049ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80049f4:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <HAL_RCC_OscConfig+0xccc>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4a29      	ldr	r2, [pc, #164]	@ (8004aa0 <HAL_RCC_OscConfig+0xccc>)
 80049fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fe:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004a00:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d107      	bne.n	8004a18 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004a08:	4b24      	ldr	r3, [pc, #144]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a0e:	4a23      	ldr	r2, [pc, #140]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a10:	f023 0304 	bic.w	r3, r3, #4
 8004a14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004a18:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a24:	f7fe fbc8 	bl	80031b8 <HAL_GetTick>
 8004a28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fe fbc4 	bl	80031b8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e09f      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a3e:	4b17      	ldr	r3, [pc, #92]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a4a:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	4a13      	ldr	r2, [pc, #76]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a54:	6293      	str	r3, [r2, #40]	@ 0x28
 8004a56:	e091      	b.n	8004b7c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004a58:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a64:	f7fe fba8 	bl	80031b8 <HAL_GetTick>
 8004a68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fe fba4 	bl	80031b8 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e07f      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a7e:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004a8a:	4b04      	ldr	r3, [pc, #16]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	4a03      	ldr	r2, [pc, #12]	@ (8004a9c <HAL_RCC_OscConfig+0xcc8>)
 8004a90:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004a94:	f023 0303 	bic.w	r3, r3, #3
 8004a98:	6293      	str	r3, [r2, #40]	@ 0x28
 8004a9a:	e06f      	b.n	8004b7c <HAL_RCC_OscConfig+0xda8>
 8004a9c:	46020c00 	.word	0x46020c00
 8004aa0:	46020800 	.word	0x46020800
 8004aa4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004aa8:	4b37      	ldr	r3, [pc, #220]	@ (8004b88 <HAL_RCC_OscConfig+0xdb4>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004aae:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <HAL_RCC_OscConfig+0xdb4>)
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d039      	beq.n	8004b30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0203 	and.w	r2, r3, #3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d132      	bne.n	8004b30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d129      	bne.n	8004b30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d122      	bne.n	8004b30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d11a      	bne.n	8004b30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	0a5b      	lsrs	r3, r3, #9
 8004afe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d111      	bne.n	8004b30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b18:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d108      	bne.n	8004b30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	0e1b      	lsrs	r3, r3, #24
 8004b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e024      	b.n	8004b7e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b34:	4b14      	ldr	r3, [pc, #80]	@ (8004b88 <HAL_RCC_OscConfig+0xdb4>)
 8004b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b38:	08db      	lsrs	r3, r3, #3
 8004b3a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d01a      	beq.n	8004b7c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004b46:	4b10      	ldr	r3, [pc, #64]	@ (8004b88 <HAL_RCC_OscConfig+0xdb4>)
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8004b88 <HAL_RCC_OscConfig+0xdb4>)
 8004b4c:	f023 0310 	bic.w	r3, r3, #16
 8004b50:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b52:	f7fe fb31 	bl	80031b8 <HAL_GetTick>
 8004b56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004b58:	bf00      	nop
 8004b5a:	f7fe fb2d 	bl	80031b8 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d0f9      	beq.n	8004b5a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6a:	4a07      	ldr	r2, [pc, #28]	@ (8004b88 <HAL_RCC_OscConfig+0xdb4>)
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <HAL_RCC_OscConfig+0xdb4>)
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	4a04      	ldr	r2, [pc, #16]	@ (8004b88 <HAL_RCC_OscConfig+0xdb4>)
 8004b76:	f043 0310 	orr.w	r3, r3, #16
 8004b7a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3738      	adds	r7, #56	@ 0x38
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	46020c00 	.word	0x46020c00

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e1d9      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b9b      	ldr	r3, [pc, #620]	@ (8004e10 <HAL_RCC_ClockConfig+0x284>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d910      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b98      	ldr	r3, [pc, #608]	@ (8004e10 <HAL_RCC_ClockConfig+0x284>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 020f 	bic.w	r2, r3, #15
 8004bb6:	4996      	ldr	r1, [pc, #600]	@ (8004e10 <HAL_RCC_ClockConfig+0x284>)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b94      	ldr	r3, [pc, #592]	@ (8004e10 <HAL_RCC_ClockConfig+0x284>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e1c1      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d010      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	4b8c      	ldr	r3, [pc, #560]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d908      	bls.n	8004bfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004bec:	4b89      	ldr	r3, [pc, #548]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	4986      	ldr	r1, [pc, #536]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d012      	beq.n	8004c30 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	4b81      	ldr	r3, [pc, #516]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d909      	bls.n	8004c30 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004c1c:	4b7d      	ldr	r3, [pc, #500]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	497a      	ldr	r1, [pc, #488]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	4b74      	ldr	r3, [pc, #464]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d908      	bls.n	8004c5e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004c4c:	4b71      	ldr	r3, [pc, #452]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	496e      	ldr	r1, [pc, #440]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	4b69      	ldr	r3, [pc, #420]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d908      	bls.n	8004c8c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004c7a:	4b66      	ldr	r3, [pc, #408]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f023 020f 	bic.w	r2, r3, #15
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4963      	ldr	r1, [pc, #396]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80d2 	beq.w	8004e3e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d143      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d110      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004cb4:	4b57      	ldr	r3, [pc, #348]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cba:	4a56      	ldr	r2, [pc, #344]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004cbc:	f043 0304 	orr.w	r3, r3, #4
 8004cc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004cc4:	4b53      	ldr	r3, [pc, #332]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004cd6:	f7fe fa6f 	bl	80031b8 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8004e18 <HAL_RCC_ClockConfig+0x28c>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00f      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004cea:	f7fe fa65 	bl	80031b8 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e12b      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004cfc:	4b46      	ldr	r3, [pc, #280]	@ (8004e18 <HAL_RCC_ClockConfig+0x28c>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d0e:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d14:	4a3f      	ldr	r2, [pc, #252]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004d16:	f023 0304 	bic.w	r3, r3, #4
 8004d1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d121      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e112      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d36:	4b37      	ldr	r3, [pc, #220]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d115      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e106      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004d4e:	4b31      	ldr	r3, [pc, #196]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0fa      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0f2      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004d6e:	4b29      	ldr	r3, [pc, #164]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f023 0203 	bic.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4926      	ldr	r1, [pc, #152]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004d80:	f7fe fa1a 	bl	80031b8 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d112      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d90:	f7fe fa12 	bl	80031b8 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e0d6      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004da6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b0c      	cmp	r3, #12
 8004db0:	d1ee      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x204>
 8004db2:	e044      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d112      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dbe:	f7fe f9fb 	bl	80031b8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e0bf      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f003 030c 	and.w	r3, r3, #12
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d1ee      	bne.n	8004dbe <HAL_RCC_ClockConfig+0x232>
 8004de0:	e02d      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d123      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dec:	f7fe f9e4 	bl	80031b8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e0a8      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e02:	4b04      	ldr	r3, [pc, #16]	@ (8004e14 <HAL_RCC_ClockConfig+0x288>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ee      	bne.n	8004dec <HAL_RCC_ClockConfig+0x260>
 8004e0e:	e016      	b.n	8004e3e <HAL_RCC_ClockConfig+0x2b2>
 8004e10:	40022000 	.word	0x40022000
 8004e14:	46020c00 	.word	0x46020c00
 8004e18:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e1c:	f7fe f9cc 	bl	80031b8 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e090      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e32:	4b4a      	ldr	r3, [pc, #296]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d1ee      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d010      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	4b43      	ldr	r3, [pc, #268]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d208      	bcs.n	8004e6c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004e5a:	4b40      	ldr	r3, [pc, #256]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 020f 	bic.w	r2, r3, #15
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	493d      	ldr	r1, [pc, #244]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f60 <HAL_RCC_ClockConfig+0x3d4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d210      	bcs.n	8004e9c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7a:	4b39      	ldr	r3, [pc, #228]	@ (8004f60 <HAL_RCC_ClockConfig+0x3d4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f023 020f 	bic.w	r2, r3, #15
 8004e82:	4937      	ldr	r1, [pc, #220]	@ (8004f60 <HAL_RCC_ClockConfig+0x3d4>)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b35      	ldr	r3, [pc, #212]	@ (8004f60 <HAL_RCC_ClockConfig+0x3d4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e05b      	b.n	8004f54 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d010      	beq.n	8004eca <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	4b2b      	ldr	r3, [pc, #172]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d208      	bcs.n	8004eca <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004eb8:	4b28      	ldr	r3, [pc, #160]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4925      	ldr	r1, [pc, #148]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d012      	beq.n	8004efc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	091b      	lsrs	r3, r3, #4
 8004ee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d209      	bcs.n	8004efc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	4919      	ldr	r1, [pc, #100]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695a      	ldr	r2, [r3, #20]
 8004f0c:	4b13      	ldr	r3, [pc, #76]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d208      	bcs.n	8004f2a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004f18:	4b10      	ldr	r3, [pc, #64]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	490d      	ldr	r1, [pc, #52]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004f2a:	f000 f821 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4b0a      	ldr	r3, [pc, #40]	@ (8004f5c <HAL_RCC_ClockConfig+0x3d0>)
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	490a      	ldr	r1, [pc, #40]	@ (8004f64 <HAL_RCC_ClockConfig+0x3d8>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f40:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_RCC_ClockConfig+0x3dc>)
 8004f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f44:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <HAL_RCC_ClockConfig+0x3e0>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fe f8ab 	bl	80030a4 <HAL_InitTick>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	46020c00 	.word	0x46020c00
 8004f60:	40022000 	.word	0x40022000
 8004f64:	0800a4fc 	.word	0x0800a4fc
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	2000005c 	.word	0x2000005c

08004f70 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b08b      	sub	sp, #44	@ 0x2c
 8004f74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f7e:	4b78      	ldr	r3, [pc, #480]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f88:	4b75      	ldr	r3, [pc, #468]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b0c      	cmp	r3, #12
 8004f9c:	d121      	bne.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d11e      	bne.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004fa4:	4b6e      	ldr	r3, [pc, #440]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004fb0:	4b6b      	ldr	r3, [pc, #428]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fb6:	0b1b      	lsrs	r3, r3, #12
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fbe:	e005      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004fc0:	4b67      	ldr	r3, [pc, #412]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	0f1b      	lsrs	r3, r3, #28
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fcc:	4a65      	ldr	r2, [pc, #404]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d110      	bne.n	8004ffe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fe0:	e00d      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d102      	bne.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fee:	4b5e      	ldr	r3, [pc, #376]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	e004      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004ffc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b0c      	cmp	r3, #12
 8005002:	f040 80a5 	bne.w	8005150 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005006:	4b56      	ldr	r3, [pc, #344]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005010:	4b53      	ldr	r3, [pc, #332]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800501e:	4b50      	ldr	r3, [pc, #320]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	091b      	lsrs	r3, r3, #4
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800502a:	4b4d      	ldr	r3, [pc, #308]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	08db      	lsrs	r3, r3, #3
 8005030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005042:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d003      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0xe4>
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b03      	cmp	r3, #3
 8005050:	d022      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x128>
 8005052:	e043      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800516c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005066:	4b3e      	ldr	r3, [pc, #248]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005076:	ed97 6a01 	vldr	s12, [r7, #4]
 800507a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005170 <HAL_RCC_GetSysClockFreq+0x200>
 800507e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005082:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005096:	e046      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800516c <HAL_RCC_GetSysClockFreq+0x1fc>
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050ba:	ed97 6a01 	vldr	s12, [r7, #4]
 80050be:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005170 <HAL_RCC_GetSysClockFreq+0x200>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050da:	e024      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	ee07 3a90 	vmov	s15, r3
 80050ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005104:	ed97 6a01 	vldr	s12, [r7, #4]
 8005108:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005170 <HAL_RCC_GetSysClockFreq+0x200>
 800510c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005110:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005114:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005118:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800511c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005120:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005124:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005126:	4b0e      	ldr	r3, [pc, #56]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512a:	0e1b      	lsrs	r3, r3, #24
 800512c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005130:	3301      	adds	r3, #1
 8005132:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800513e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800514a:	ee17 3a90 	vmov	r3, s15
 800514e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005150:	6a3b      	ldr	r3, [r7, #32]
}
 8005152:	4618      	mov	r0, r3
 8005154:	372c      	adds	r7, #44	@ 0x2c
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	46020c00 	.word	0x46020c00
 8005164:	0800a514 	.word	0x0800a514
 8005168:	00f42400 	.word	0x00f42400
 800516c:	4b742400 	.word	0x4b742400
 8005170:	46000000 	.word	0x46000000

08005174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005178:	f7ff fefa 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b07      	ldr	r3, [pc, #28]	@ (800519c <HAL_RCC_GetHCLKFreq+0x28>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	4906      	ldr	r1, [pc, #24]	@ (80051a0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005188:	5ccb      	ldrb	r3, [r1, r3]
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	4a05      	ldr	r2, [pc, #20]	@ (80051a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005190:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005192:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005194:	681b      	ldr	r3, [r3, #0]
}
 8005196:	4618      	mov	r0, r3
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	46020c00 	.word	0x46020c00
 80051a0:	0800a4fc 	.word	0x0800a4fc
 80051a4:	20000000 	.word	0x20000000

080051a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80051ac:	f7ff ffe2 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	@ (80051c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	@ (80051cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	46020c00 	.word	0x46020c00
 80051cc:	0800a50c 	.word	0x0800a50c

080051d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80051d4:	f7ff ffce 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	@ (80051f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	@ (80051f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	46020c00 	.word	0x46020c00
 80051f4:	0800a50c 	.word	0x0800a50c

080051f8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80051fc:	f7ff ffba 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	@ (800521c <HAL_RCC_GetPCLK3Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	46020c00 	.word	0x46020c00
 800521c:	0800a50c 	.word	0x0800a50c

08005220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005228:	4b3e      	ldr	r3, [pc, #248]	@ (8005324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800522a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005236:	f7fe fdbf 	bl	8003db8 <HAL_PWREx_GetVoltageRange>
 800523a:	6178      	str	r0, [r7, #20]
 800523c:	e019      	b.n	8005272 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800523e:	4b39      	ldr	r3, [pc, #228]	@ (8005324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005244:	4a37      	ldr	r2, [pc, #220]	@ (8005324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005246:	f043 0304 	orr.w	r3, r3, #4
 800524a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800524e:	4b35      	ldr	r3, [pc, #212]	@ (8005324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800525c:	f7fe fdac 	bl	8003db8 <HAL_PWREx_GetVoltageRange>
 8005260:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005262:	4b30      	ldr	r3, [pc, #192]	@ (8005324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005268:	4a2e      	ldr	r2, [pc, #184]	@ (8005324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800526a:	f023 0304 	bic.w	r3, r3, #4
 800526e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005278:	d003      	beq.n	8005282 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005280:	d109      	bne.n	8005296 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005288:	d202      	bcs.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800528a:	2301      	movs	r3, #1
 800528c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800528e:	e033      	b.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005290:	2300      	movs	r3, #0
 8005292:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005294:	e030      	b.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800529c:	d208      	bcs.n	80052b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a4:	d102      	bne.n	80052ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80052a6:	2303      	movs	r3, #3
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	e025      	b.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e035      	b.n	800531c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052b6:	d90f      	bls.n	80052d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052c4:	d902      	bls.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	e015      	b.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80052cc:	2301      	movs	r3, #1
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	e012      	b.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80052d2:	2300      	movs	r3, #0
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	e00f      	b.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052de:	d109      	bne.n	80052f4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e6:	d102      	bne.n	80052ee <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80052e8:	2301      	movs	r3, #1
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	e004      	b.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80052ee:	2302      	movs	r3, #2
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e001      	b.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80052f4:	2301      	movs	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005328 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f023 020f 	bic.w	r2, r3, #15
 8005300:	4909      	ldr	r1, [pc, #36]	@ (8005328 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005308:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	d001      	beq.n	800531a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	46020c00 	.word	0x46020c00
 8005328:	40022000 	.word	0x40022000

0800532c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800532c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005330:	b0ba      	sub	sp, #232	@ 0xe8
 8005332:	af00      	add	r7, sp, #0
 8005334:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005338:	2300      	movs	r3, #0
 800533a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800533e:	2300      	movs	r3, #0
 8005340:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005344:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f002 0401 	and.w	r4, r2, #1
 8005350:	2500      	movs	r5, #0
 8005352:	ea54 0305 	orrs.w	r3, r4, r5
 8005356:	d00b      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005358:	4bcb      	ldr	r3, [pc, #812]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800535a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800535e:	f023 0103 	bic.w	r1, r3, #3
 8005362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005368:	4ac7      	ldr	r2, [pc, #796]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800536a:	430b      	orrs	r3, r1
 800536c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f002 0802 	and.w	r8, r2, #2
 800537c:	f04f 0900 	mov.w	r9, #0
 8005380:	ea58 0309 	orrs.w	r3, r8, r9
 8005384:	d00b      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005386:	4bc0      	ldr	r3, [pc, #768]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800538c:	f023 010c 	bic.w	r1, r3, #12
 8005390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005396:	4abc      	ldr	r2, [pc, #752]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005398:	430b      	orrs	r3, r1
 800539a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800539e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f002 0a04 	and.w	sl, r2, #4
 80053aa:	f04f 0b00 	mov.w	fp, #0
 80053ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80053b2:	d00b      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80053b4:	4bb4      	ldr	r3, [pc, #720]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ba:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80053be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c4:	4ab0      	ldr	r2, [pc, #704]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053c6:	430b      	orrs	r3, r1
 80053c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f002 0308 	and.w	r3, r2, #8
 80053d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053dc:	2300      	movs	r3, #0
 80053de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80053e6:	460b      	mov	r3, r1
 80053e8:	4313      	orrs	r3, r2
 80053ea:	d00b      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80053ec:	4ba6      	ldr	r3, [pc, #664]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80053f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fc:	4aa2      	ldr	r2, [pc, #648]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053fe:	430b      	orrs	r3, r1
 8005400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f002 0310 	and.w	r3, r2, #16
 8005410:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005414:	2300      	movs	r3, #0
 8005416:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800541a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800541e:	460b      	mov	r3, r1
 8005420:	4313      	orrs	r3, r2
 8005422:	d00b      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005424:	4b98      	ldr	r3, [pc, #608]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800542a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800542e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005434:	4a94      	ldr	r2, [pc, #592]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005436:	430b      	orrs	r3, r1
 8005438:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800543c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	f002 0320 	and.w	r3, r2, #32
 8005448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800544c:	2300      	movs	r3, #0
 800544e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005452:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005456:	460b      	mov	r3, r1
 8005458:	4313      	orrs	r3, r2
 800545a:	d00b      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800545c:	4b8a      	ldr	r3, [pc, #552]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005462:	f023 0107 	bic.w	r1, r3, #7
 8005466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800546a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800546c:	4a86      	ldr	r2, [pc, #536]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800546e:	430b      	orrs	r3, r1
 8005470:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005484:	2300      	movs	r3, #0
 8005486:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800548a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	d00b      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005494:	4b7c      	ldr	r3, [pc, #496]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800549a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800549e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054a4:	4a78      	ldr	r2, [pc, #480]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054a6:	430b      	orrs	r3, r1
 80054a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054bc:	2300      	movs	r3, #0
 80054be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054c6:	460b      	mov	r3, r1
 80054c8:	4313      	orrs	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80054cc:	4b6e      	ldr	r3, [pc, #440]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054dc:	4a6a      	ldr	r2, [pc, #424]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054de:	430b      	orrs	r3, r1
 80054e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80054f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054f4:	2300      	movs	r3, #0
 80054f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054fa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80054fe:	460b      	mov	r3, r1
 8005500:	4313      	orrs	r3, r2
 8005502:	d00b      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005504:	4b60      	ldr	r3, [pc, #384]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800550a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800550e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005514:	4a5c      	ldr	r2, [pc, #368]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005516:	430b      	orrs	r3, r1
 8005518:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800551c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800552c:	2300      	movs	r3, #0
 800552e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005532:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005536:	460b      	mov	r3, r1
 8005538:	4313      	orrs	r3, r2
 800553a:	d00b      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800553c:	4b52      	ldr	r3, [pc, #328]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800553e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005542:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554c:	4a4e      	ldr	r2, [pc, #312]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800554e:	430b      	orrs	r3, r1
 8005550:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005560:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800556a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800556e:	460b      	mov	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d00b      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005574:	4b44      	ldr	r3, [pc, #272]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800557a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800557e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005584:	4a40      	ldr	r2, [pc, #256]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005586:	430b      	orrs	r3, r1
 8005588:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800558c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800559c:	2300      	movs	r3, #0
 800559e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055a6:	460b      	mov	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	d00b      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80055ac:	4b36      	ldr	r3, [pc, #216]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055b2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80055b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055bc:	4a32      	ldr	r2, [pc, #200]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055be:	430b      	orrs	r3, r1
 80055c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80055c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80055d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80055de:	460b      	mov	r3, r1
 80055e0:	4313      	orrs	r3, r2
 80055e2:	d00c      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80055e4:	4b28      	ldr	r3, [pc, #160]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f6:	4a24      	ldr	r2, [pc, #144]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800560a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800560c:	2300      	movs	r3, #0
 800560e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005610:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005614:	460b      	mov	r3, r1
 8005616:	4313      	orrs	r3, r2
 8005618:	d04f      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800561a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	2b80      	cmp	r3, #128	@ 0x80
 8005624:	d02d      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005626:	2b80      	cmp	r3, #128	@ 0x80
 8005628:	d827      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800562a:	2b60      	cmp	r3, #96	@ 0x60
 800562c:	d02e      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800562e:	2b60      	cmp	r3, #96	@ 0x60
 8005630:	d823      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005632:	2b40      	cmp	r3, #64	@ 0x40
 8005634:	d006      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005636:	2b40      	cmp	r3, #64	@ 0x40
 8005638:	d81f      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800563e:	2b20      	cmp	r3, #32
 8005640:	d011      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005642:	e01a      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005644:	4b10      	ldr	r3, [pc, #64]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	4a0f      	ldr	r2, [pc, #60]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800564a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800564e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005650:	e01d      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005656:	3308      	adds	r3, #8
 8005658:	4618      	mov	r0, r3
 800565a:	f002 fa17 	bl	8007a8c <RCCEx_PLL2_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005664:	e013      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800566a:	332c      	adds	r3, #44	@ 0x2c
 800566c:	4618      	mov	r0, r3
 800566e:	f002 faa5 	bl	8007bbc <RCCEx_PLL3_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005678:	e009      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005680:	e005      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005682:	bf00      	nop
 8005684:	e003      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005686:	bf00      	nop
 8005688:	46020c00 	.word	0x46020c00
        break;
 800568c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10d      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005696:	4bb6      	ldr	r3, [pc, #728]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005698:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800569c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80056a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a8:	4ab1      	ldr	r2, [pc, #708]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80056aa:	430b      	orrs	r3, r1
 80056ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056b0:	e003      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056b6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80056c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80056c8:	2300      	movs	r3, #0
 80056ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80056cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d053      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80056d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e2:	d033      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80056e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e8:	d82c      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80056ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056ee:	d02f      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80056f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056f4:	d826      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80056f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056fa:	d008      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80056fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005700:	d820      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570a:	d011      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800570c:	e01a      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800570e:	4b98      	ldr	r3, [pc, #608]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005712:	4a97      	ldr	r2, [pc, #604]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005718:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800571a:	e01a      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800571c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005720:	3308      	adds	r3, #8
 8005722:	4618      	mov	r0, r3
 8005724:	f002 f9b2 	bl	8007a8c <RCCEx_PLL2_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800572e:	e010      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005734:	332c      	adds	r3, #44	@ 0x2c
 8005736:	4618      	mov	r0, r3
 8005738:	f002 fa40 	bl	8007bbc <RCCEx_PLL3_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005742:	e006      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800574a:	e002      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005752:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10d      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800575a:	4b85      	ldr	r3, [pc, #532]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800575c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005760:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800576c:	4a80      	ldr	r2, [pc, #512]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800576e:	430b      	orrs	r3, r1
 8005770:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005774:	e003      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800577a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800577e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800578a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800578c:	2300      	movs	r3, #0
 800578e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005790:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005794:	460b      	mov	r3, r1
 8005796:	4313      	orrs	r3, r2
 8005798:	d046      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800579a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800579e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80057a6:	d028      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80057a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80057ac:	d821      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80057ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057b2:	d022      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80057b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057b8:	d81b      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80057ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057be:	d01c      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80057c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057c4:	d815      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80057c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ca:	d008      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80057cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057d0:	d80f      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d011      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057da:	d00e      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80057dc:	e009      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e2:	3308      	adds	r3, #8
 80057e4:	4618      	mov	r0, r3
 80057e6:	f002 f951 	bl	8007a8c <RCCEx_PLL2_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80057f0:	e004      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80057fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10d      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005804:	4b5a      	ldr	r3, [pc, #360]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800580a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800580e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005816:	4a56      	ldr	r2, [pc, #344]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005818:	430b      	orrs	r3, r1
 800581a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800581e:	e003      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005824:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005834:	663b      	str	r3, [r7, #96]	@ 0x60
 8005836:	2300      	movs	r3, #0
 8005838:	667b      	str	r3, [r7, #100]	@ 0x64
 800583a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d03f      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584c:	2b04      	cmp	r3, #4
 800584e:	d81e      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005850:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	08005897 	.word	0x08005897
 800585c:	0800586d 	.word	0x0800586d
 8005860:	0800587b 	.word	0x0800587b
 8005864:	08005897 	.word	0x08005897
 8005868:	08005897 	.word	0x08005897
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800586c:	4b40      	ldr	r3, [pc, #256]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800586e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005870:	4a3f      	ldr	r2, [pc, #252]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005876:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005878:	e00e      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800587a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800587e:	332c      	adds	r3, #44	@ 0x2c
 8005880:	4618      	mov	r0, r3
 8005882:	f002 f99b 	bl	8007bbc <RCCEx_PLL3_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800588c:	e004      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005894:	e000      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005896:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005898:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80058a0:	4b33      	ldr	r3, [pc, #204]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80058a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058a6:	f023 0107 	bic.w	r1, r3, #7
 80058aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058c0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80058c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80058d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058d2:	2300      	movs	r3, #0
 80058d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80058da:	460b      	mov	r3, r1
 80058dc:	4313      	orrs	r3, r2
 80058de:	d04d      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80058e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058ec:	d028      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80058ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058f2:	d821      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80058f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058f8:	d024      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80058fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058fe:	d81b      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005904:	d00e      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800590a:	d815      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01b      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005914:	d110      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005916:	4b16      	ldr	r3, [pc, #88]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591a:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800591c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005920:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005922:	e012      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005928:	332c      	adds	r3, #44	@ 0x2c
 800592a:	4618      	mov	r0, r3
 800592c:	f002 f946 	bl	8007bbc <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005936:	e008      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800593e:	e004      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005940:	bf00      	nop
 8005942:	e002      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005944:	bf00      	nop
 8005946:	e000      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005948:	bf00      	nop
    }
    if (ret == HAL_OK)
 800594a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d110      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005952:	4b07      	ldr	r3, [pc, #28]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005958:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800595c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005964:	4a02      	ldr	r2, [pc, #8]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005966:	430b      	orrs	r3, r1
 8005968:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800596c:	e006      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800596e:	bf00      	nop
 8005970:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005974:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005978:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800597c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005988:	653b      	str	r3, [r7, #80]	@ 0x50
 800598a:	2300      	movs	r3, #0
 800598c:	657b      	str	r3, [r7, #84]	@ 0x54
 800598e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005992:	460b      	mov	r3, r1
 8005994:	4313      	orrs	r3, r2
 8005996:	f000 80b5 	beq.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059a0:	4b9d      	ldr	r3, [pc, #628]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d113      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ae:	4b9a      	ldr	r3, [pc, #616]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059b4:	4a98      	ldr	r2, [pc, #608]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059b6:	f043 0304 	orr.w	r3, r3, #4
 80059ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80059be:	4b96      	ldr	r3, [pc, #600]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80059c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80059d6:	4b91      	ldr	r3, [pc, #580]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	4a90      	ldr	r2, [pc, #576]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059e2:	f7fd fbe9 	bl	80031b8 <HAL_GetTick>
 80059e6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80059ea:	e00b      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ec:	f7fd fbe4 	bl	80031b8 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d903      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a02:	e005      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a04:	4b85      	ldr	r3, [pc, #532]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0ed      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005a10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d165      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a18:	4b7f      	ldr	r3, [pc, #508]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d023      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01b      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a3e:	4b76      	ldr	r3, [pc, #472]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a4c:	4b72      	ldr	r3, [pc, #456]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a52:	4a71      	ldr	r2, [pc, #452]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a5c:	4b6e      	ldr	r3, [pc, #440]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a62:	4a6d      	ldr	r2, [pc, #436]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d019      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a82:	f7fd fb99 	bl	80031b8 <HAL_GetTick>
 8005a86:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a8a:	e00d      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8c:	f7fd fb94 	bl	80031b8 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a96:	1ad2      	subs	r2, r2, r3
 8005a98:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d903      	bls.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005aa6:	e006      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0ea      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005ab6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005abe:	4b56      	ldr	r3, [pc, #344]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ac4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005acc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ad0:	4a51      	ldr	r2, [pc, #324]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005ad8:	e008      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ada:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ade:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005ae2:	e003      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ae8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005aec:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d107      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af4:	4b48      	ldr	r3, [pc, #288]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005afa:	4a47      	ldr	r2, [pc, #284]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005afc:	f023 0304 	bic.w	r3, r3, #4
 8005b00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b12:	2300      	movs	r3, #0
 8005b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	d042      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b28:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b2c:	d022      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005b2e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b32:	d81b      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b38:	d011      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005b3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b3e:	d815      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d019      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005b44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b48:	d110      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b4e:	3308      	adds	r3, #8
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 ff9b 	bl	8007a8c <RCCEx_PLL2_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b5c:	e00d      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	4a2d      	ldr	r2, [pc, #180]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b68:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b6a:	e006      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b72:	e002      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005b74:	bf00      	nop
 8005b76:	e000      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005b78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005b82:	4b25      	ldr	r3, [pc, #148]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b88:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b94:	4a20      	ldr	r2, [pc, #128]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b96:	430b      	orrs	r3, r1
 8005b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b9c:	e003      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ba2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	d032      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bce:	d00b      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd4:	d804      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bde:	d007      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005be6:	e004      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005be8:	bf00      	nop
 8005bea:	e002      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005bec:	bf00      	nop
 8005bee:	e000      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005bf0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005bf2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d112      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005bfa:	4b07      	ldr	r3, [pc, #28]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c0c:	4a02      	ldr	r2, [pc, #8]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c14:	e008      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005c16:	bf00      	nop
 8005c18:	46020c00 	.word	0x46020c00
 8005c1c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c24:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005c34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c36:	2300      	movs	r3, #0
 8005c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c3a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	d00c      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005c44:	4b98      	ldr	r3, [pc, #608]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c4a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c56:	4a94      	ldr	r2, [pc, #592]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005c74:	460b      	mov	r3, r1
 8005c76:	4313      	orrs	r3, r2
 8005c78:	d019      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c86:	d105      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c88:	4b87      	ldr	r3, [pc, #540]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	4a86      	ldr	r2, [pc, #536]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c92:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005c94:	4b84      	ldr	r3, [pc, #528]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005c96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c9a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ca2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ca6:	4a80      	ldr	r2, [pc, #512]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	d00c      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005cca:	4b77      	ldr	r3, [pc, #476]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cd0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cdc:	4972      	ldr	r1, [pc, #456]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005ce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005cf0:	623b      	str	r3, [r7, #32]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	d00c      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005d00:	4b69      	ldr	r3, [pc, #420]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d12:	4965      	ldr	r1, [pc, #404]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d00c      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005d36:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d3c:	f023 0218 	bic.w	r2, r3, #24
 8005d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005d48:	4957      	ldr	r1, [pc, #348]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d66:	460b      	mov	r3, r1
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	d032      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d78:	d105      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d84:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d92:	d108      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d98:	3308      	adds	r3, #8
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fe76 	bl	8007a8c <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 8005da6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10d      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005dae:	4b3e      	ldr	r3, [pc, #248]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005db0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005db4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005dc0:	4939      	ldr	r1, [pc, #228]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005dc8:	e003      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005dce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005de8:	460b      	mov	r3, r1
 8005dea:	4313      	orrs	r3, r2
 8005dec:	d03a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dfa:	d00e      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005dfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e00:	d815      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d017      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005e06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e0a:	d110      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e0c:	4b26      	ldr	r3, [pc, #152]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	4a25      	ldr	r2, [pc, #148]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e16:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005e18:	e00e      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e1e:	3308      	adds	r3, #8
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 fe33 	bl	8007a8c <RCCEx_PLL2_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005e2c:	e004      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e34:	e000      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005e36:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10d      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005e40:	4b19      	ldr	r3, [pc, #100]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e52:	4915      	ldr	r1, [pc, #84]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005e5a:	e003      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e60:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	d00c      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005e80:	4b09      	ldr	r3, [pc, #36]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e86:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e92:	4905      	ldr	r1, [pc, #20]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005e9a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	37e8      	adds	r7, #232	@ 0xe8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ea8:	46020c00 	.word	0x46020c00

08005eac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b089      	sub	sp, #36	@ 0x24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005eb4:	4ba6      	ldr	r3, [pc, #664]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005ebe:	4ba4      	ldr	r3, [pc, #656]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005ec8:	4ba1      	ldr	r3, [pc, #644]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005ed6:	4b9e      	ldr	r3, [pc, #632]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	091b      	lsrs	r3, r3, #4
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ee2:	4b9b      	ldr	r3, [pc, #620]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d062      	beq.n	8005fca <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	f200 8081 	bhi.w	800600e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d024      	beq.n	8005f5c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d17a      	bne.n	800600e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2a:	4b89      	ldr	r3, [pc, #548]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f3e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f5a:	e08f      	b.n	800607c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f5c:	4b7c      	ldr	r3, [pc, #496]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005f68:	4b79      	ldr	r3, [pc, #484]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	0f1b      	lsrs	r3, r3, #28
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	e006      	b.n	8005f82 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005f74:	4b76      	ldr	r3, [pc, #472]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	0f1b      	lsrs	r3, r3, #28
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	4a76      	ldr	r2, [pc, #472]	@ (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fc8:	e058      	b.n	800607c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fec:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006000:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006008:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800600c:	e036      	b.n	800607c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800600e:	4b50      	ldr	r3, [pc, #320]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800601a:	4b4d      	ldr	r3, [pc, #308]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	0f1b      	lsrs	r3, r3, #28
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	e006      	b.n	8006034 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006026:	4b4a      	ldr	r3, [pc, #296]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	0f1b      	lsrs	r3, r3, #28
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	4a49      	ldr	r2, [pc, #292]	@ (800615c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605a:	ed97 6a02 	vldr	s12, [r7, #8]
 800605e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800606e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800607a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800607c:	4b34      	ldr	r3, [pc, #208]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d017      	beq.n	80060b8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006088:	4b31      	ldr	r3, [pc, #196]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800608a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608c:	0a5b      	lsrs	r3, r3, #9
 800608e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800609a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800609e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ae:	ee17 2a90 	vmov	r2, s15
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e002      	b.n	80060be <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80060be:	4b24      	ldr	r3, [pc, #144]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d017      	beq.n	80060fa <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060ca:	4b21      	ldr	r3, [pc, #132]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ce:	0c1b      	lsrs	r3, r3, #16
 80060d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80060dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060e0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f0:	ee17 2a90 	vmov	r2, s15
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	605a      	str	r2, [r3, #4]
 80060f8:	e002      	b.n	8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006100:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d017      	beq.n	800613c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800610c:	4b10      	ldr	r3, [pc, #64]	@ (8006150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800610e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006110:	0e1b      	lsrs	r3, r3, #24
 8006112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800611e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006122:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006126:	edd7 6a07 	vldr	s13, [r7, #28]
 800612a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800612e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006132:	ee17 2a90 	vmov	r2, s15
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800613a:	e002      	b.n	8006142 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	609a      	str	r2, [r3, #8]
}
 8006142:	bf00      	nop
 8006144:	3724      	adds	r7, #36	@ 0x24
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	46020c00 	.word	0x46020c00
 8006154:	4b742400 	.word	0x4b742400
 8006158:	46000000 	.word	0x46000000
 800615c:	0800a514 	.word	0x0800a514

08006160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	@ 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006168:	4ba6      	ldr	r3, [pc, #664]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800616a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006170:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006172:	4ba4      	ldr	r3, [pc, #656]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800617c:	4ba1      	ldr	r3, [pc, #644]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	3301      	adds	r3, #1
 8006188:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800618a:	4b9e      	ldr	r3, [pc, #632]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	091b      	lsrs	r3, r3, #4
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006196:	4b9b      	ldr	r3, [pc, #620]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	08db      	lsrs	r3, r3, #3
 800619c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d062      	beq.n	800627e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	f200 8081 	bhi.w	80062c2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d024      	beq.n	8006210 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d17a      	bne.n	80062c2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80061da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061de:	4b89      	ldr	r3, [pc, #548]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80061ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80061f2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80061f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80061fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006202:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800620e:	e08f      	b.n	8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006210:	4b7c      	ldr	r3, [pc, #496]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800621c:	4b79      	ldr	r3, [pc, #484]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	0f1b      	lsrs	r3, r3, #28
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	e006      	b.n	8006236 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006228:	4b76      	ldr	r3, [pc, #472]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800622a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	0f1b      	lsrs	r3, r3, #28
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	4a76      	ldr	r2, [pc, #472]	@ (8006410 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006260:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006270:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006278:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800627c:	e058      	b.n	8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006288:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800628c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006290:	4b5c      	ldr	r3, [pc, #368]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80062a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80062a4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80062a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80062ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80062b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80062b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062c0:	e036      	b.n	8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80062c2:	4b50      	ldr	r3, [pc, #320]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80062ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	0f1b      	lsrs	r3, r3, #28
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	e006      	b.n	80062e8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80062da:	4b4a      	ldr	r3, [pc, #296]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062e0:	041b      	lsls	r3, r3, #16
 80062e2:	0f1b      	lsrs	r3, r3, #28
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	4a49      	ldr	r2, [pc, #292]	@ (8006410 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80062ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	ee07 3a90 	vmov	s15, r3
 80062fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006312:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800640c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006322:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800632e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006330:	4b34      	ldr	r3, [pc, #208]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d017      	beq.n	800636c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800633c:	4b31      	ldr	r3, [pc, #196]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800633e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006340:	0a5b      	lsrs	r3, r3, #9
 8006342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800634e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006352:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006356:	edd7 6a07 	vldr	s13, [r7, #28]
 800635a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006362:	ee17 2a90 	vmov	r2, s15
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	e002      	b.n	8006372 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006372:	4b24      	ldr	r3, [pc, #144]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d017      	beq.n	80063ae <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800637e:	4b21      	ldr	r3, [pc, #132]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006382:	0c1b      	lsrs	r3, r3, #16
 8006384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006394:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006398:	edd7 6a07 	vldr	s13, [r7, #28]
 800639c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a4:	ee17 2a90 	vmov	r2, s15
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	605a      	str	r2, [r3, #4]
 80063ac:	e002      	b.n	80063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80063b4:	4b13      	ldr	r3, [pc, #76]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d017      	beq.n	80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063c0:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c4:	0e1b      	lsrs	r3, r3, #24
 80063c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80063d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063da:	edd7 6a07 	vldr	s13, [r7, #28]
 80063de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e6:	ee17 2a90 	vmov	r2, s15
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063ee:	e002      	b.n	80063f6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	609a      	str	r2, [r3, #8]
}
 80063f6:	bf00      	nop
 80063f8:	3724      	adds	r7, #36	@ 0x24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	46020c00 	.word	0x46020c00
 8006408:	4b742400 	.word	0x4b742400
 800640c:	46000000 	.word	0x46000000
 8006410:	0800a514 	.word	0x0800a514

08006414 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006414:	b480      	push	{r7}
 8006416:	b089      	sub	sp, #36	@ 0x24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800641c:	4ba6      	ldr	r3, [pc, #664]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800641e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006424:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006426:	4ba4      	ldr	r3, [pc, #656]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006430:	4ba1      	ldr	r3, [pc, #644]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006434:	0a1b      	lsrs	r3, r3, #8
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	3301      	adds	r3, #1
 800643c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800643e:	4b9e      	ldr	r3, [pc, #632]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006442:	091b      	lsrs	r3, r3, #4
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800644a:	4b9b      	ldr	r3, [pc, #620]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800644c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800644e:	08db      	lsrs	r3, r3, #3
 8006450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	fb02 f303 	mul.w	r3, r2, r3
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006462:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d062      	beq.n	8006532 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b03      	cmp	r3, #3
 8006470:	f200 8081 	bhi.w	8006576 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d024      	beq.n	80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d17a      	bne.n	8006576 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800648e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006492:	4b89      	ldr	r3, [pc, #548]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80064a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064a6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80064aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80064ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80064b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80064ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064be:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80064c2:	e08f      	b.n	80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80064c4:	4b7c      	ldr	r3, [pc, #496]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80064d0:	4b79      	ldr	r3, [pc, #484]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	0f1b      	lsrs	r3, r3, #28
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	e006      	b.n	80064ea <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80064dc:	4b76      	ldr	r3, [pc, #472]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	0f1b      	lsrs	r3, r3, #28
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	4a76      	ldr	r2, [pc, #472]	@ (80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80064ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006510:	ed97 6a02 	vldr	s12, [r7, #8]
 8006514:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006520:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006524:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006530:	e058      	b.n	80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	ee07 3a90 	vmov	s15, r3
 8006538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006544:	4b5c      	ldr	r3, [pc, #368]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654c:	ee07 3a90 	vmov	s15, r3
 8006550:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006554:	ed97 6a02 	vldr	s12, [r7, #8]
 8006558:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800655c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006560:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006564:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006568:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800656c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006570:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006574:	e036      	b.n	80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006576:	4b50      	ldr	r3, [pc, #320]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006582:	4b4d      	ldr	r3, [pc, #308]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	0f1b      	lsrs	r3, r3, #28
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	e006      	b.n	800659c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800658e:	4b4a      	ldr	r3, [pc, #296]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006594:	041b      	lsls	r3, r3, #16
 8006596:	0f1b      	lsrs	r3, r3, #28
 8006598:	f003 030f 	and.w	r3, r3, #15
 800659c:	4a49      	ldr	r2, [pc, #292]	@ (80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800659e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065c6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80065ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80065da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065e2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80065e4:	4b34      	ldr	r3, [pc, #208]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d017      	beq.n	8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065f0:	4b31      	ldr	r3, [pc, #196]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f4:	0a5b      	lsrs	r3, r3, #9
 80065f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006602:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006606:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800660a:	edd7 6a07 	vldr	s13, [r7, #28]
 800660e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006616:	ee17 2a90 	vmov	r2, s15
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e002      	b.n	8006626 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006626:	4b24      	ldr	r3, [pc, #144]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d017      	beq.n	8006662 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006632:	4b21      	ldr	r3, [pc, #132]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800663c:	ee07 3a90 	vmov	s15, r3
 8006640:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006644:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006648:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800664c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006658:	ee17 2a90 	vmov	r2, s15
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	605a      	str	r2, [r3, #4]
 8006660:	e002      	b.n	8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006668:	4b13      	ldr	r3, [pc, #76]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d017      	beq.n	80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006674:	4b10      	ldr	r3, [pc, #64]	@ (80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006678:	0e1b      	lsrs	r3, r3, #24
 800667a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006686:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800668a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800668e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800669a:	ee17 2a90 	vmov	r2, s15
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066a2:	e002      	b.n	80066aa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	609a      	str	r2, [r3, #8]
}
 80066aa:	bf00      	nop
 80066ac:	3724      	adds	r7, #36	@ 0x24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	46020c00 	.word	0x46020c00
 80066bc:	4b742400 	.word	0x4b742400
 80066c0:	46000000 	.word	0x46000000
 80066c4:	0800a514 	.word	0x0800a514

080066c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08e      	sub	sp, #56	@ 0x38
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80066d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80066da:	430b      	orrs	r3, r1
 80066dc:	d145      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80066de:	4ba7      	ldr	r3, [pc, #668]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066e8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80066ea:	4ba4      	ldr	r3, [pc, #656]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d108      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066fe:	d104      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006700:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006704:	637b      	str	r3, [r7, #52]	@ 0x34
 8006706:	f001 b9b3 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800670a:	4b9c      	ldr	r3, [pc, #624]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800670c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006718:	d114      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006720:	d110      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006722:	4b96      	ldr	r3, [pc, #600]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800672c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006730:	d103      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006732:	23fa      	movs	r3, #250	@ 0xfa
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006736:	f001 b99b 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800673a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800673e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006740:	f001 b996 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006744:	4b8d      	ldr	r3, [pc, #564]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006750:	d107      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006758:	d103      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800675a:	4b89      	ldr	r3, [pc, #548]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
 800675e:	f001 b987 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	637b      	str	r3, [r7, #52]	@ 0x34
 8006766:	f001 b983 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800676a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006772:	430b      	orrs	r3, r1
 8006774:	d151      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006776:	4b81      	ldr	r3, [pc, #516]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006778:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800677c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006780:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	2b80      	cmp	r3, #128	@ 0x80
 8006786:	d035      	beq.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	2b80      	cmp	r3, #128	@ 0x80
 800678c:	d841      	bhi.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	2b60      	cmp	r3, #96	@ 0x60
 8006792:	d02a      	beq.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006796:	2b60      	cmp	r3, #96	@ 0x60
 8006798:	d83b      	bhi.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679c:	2b40      	cmp	r3, #64	@ 0x40
 800679e:	d009      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80067a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a2:	2b40      	cmp	r3, #64	@ 0x40
 80067a4:	d835      	bhi.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00c      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d012      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80067b2:	e02e      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fb77 	bl	8005eac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067c2:	f001 b955 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067c6:	f107 0318 	add.w	r3, r7, #24
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fcc8 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067d4:	f001 b94c 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067d8:	f107 030c 	add.w	r3, r7, #12
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fe19 	bl	8006414 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067e6:	f001 b943 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80067ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067f0:	f001 b93e 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067f4:	4b61      	ldr	r3, [pc, #388]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006800:	d103      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006802:	4b60      	ldr	r3, [pc, #384]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006804:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006806:	f001 b933 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800680e:	f001 b92f 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006816:	f001 b92b 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800681a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800681e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006822:	430b      	orrs	r3, r1
 8006824:	d158      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006826:	4b55      	ldr	r3, [pc, #340]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006828:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800682c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006830:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006838:	d03b      	beq.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006840:	d846      	bhi.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006848:	d02e      	beq.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006850:	d83e      	bhi.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006858:	d00b      	beq.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006860:	d836      	bhi.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00d      	beq.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800686e:	d012      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006870:	e02e      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fb18 	bl	8005eac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800687c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006880:	f001 b8f6 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006884:	f107 0318 	add.w	r3, r7, #24
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fc69 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006892:	f001 b8ed 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006896:	f107 030c 	add.w	r3, r7, #12
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff fdba 	bl	8006414 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068a4:	f001 b8e4 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068a8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80068ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068ae:	f001 b8df 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068b2:	4b32      	ldr	r3, [pc, #200]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068be:	d103      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80068c0:	4b30      	ldr	r3, [pc, #192]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068c4:	f001 b8d4 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068cc:	f001 b8d0 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068d4:	f001 b8cc 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80068d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068dc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80068e0:	430b      	orrs	r3, r1
 80068e2:	d126      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80068e4:	4b25      	ldr	r3, [pc, #148]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80068f0:	4b22      	ldr	r3, [pc, #136]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068fc:	d106      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006904:	4b1f      	ldr	r3, [pc, #124]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006906:	637b      	str	r3, [r7, #52]	@ 0x34
 8006908:	f001 b8b2 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800690c:	4b1b      	ldr	r3, [pc, #108]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006918:	d107      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006920:	d103      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006922:	4b19      	ldr	r3, [pc, #100]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006924:	637b      	str	r3, [r7, #52]	@ 0x34
 8006926:	f001 b8a3 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
 800692e:	f001 b89f 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006936:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800693a:	430b      	orrs	r3, r1
 800693c:	d16e      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800693e:	4b0f      	ldr	r3, [pc, #60]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006944:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006948:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006950:	d03d      	beq.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006958:	d85c      	bhi.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006960:	d014      	beq.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006968:	d854      	bhi.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800696a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01f      	beq.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006976:	d012      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006978:	e04c      	b.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800697a:	bf00      	nop
 800697c:	46020c00 	.word	0x46020c00
 8006980:	0007a120 	.word	0x0007a120
 8006984:	00f42400 	.word	0x00f42400
 8006988:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800698c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff fa8b 	bl	8005eac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006998:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800699a:	f001 b869 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800699e:	f107 0318 	add.w	r3, r7, #24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fbdc 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ac:	f001 b860 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80069b0:	4ba7      	ldr	r3, [pc, #668]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069bc:	d103      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80069be:	4ba5      	ldr	r3, [pc, #660]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069c2:	f001 b855 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ca:	f001 b851 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069ce:	4ba0      	ldr	r3, [pc, #640]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d118      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069da:	4b9d      	ldr	r3, [pc, #628]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80069e6:	4b9a      	ldr	r3, [pc, #616]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	0e1b      	lsrs	r3, r3, #24
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80069f2:	4b97      	ldr	r3, [pc, #604]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	0e1b      	lsrs	r3, r3, #24
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	4a95      	ldr	r2, [pc, #596]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a08:	f001 b832 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a10:	f001 b82e 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a18:	f001 b82a 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a20:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006a24:	430b      	orrs	r3, r1
 8006a26:	d17f      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a28:	4b89      	ldr	r3, [pc, #548]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006a2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a32:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d165      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006a3a:	4b85      	ldr	r3, [pc, #532]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a40:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a44:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a4c:	d034      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a54:	d853      	bhi.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a5c:	d00b      	beq.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a64:	d84b      	bhi.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d016      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a72:	d009      	beq.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006a74:	e043      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fa16 	bl	8005eac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006a84:	f000 bff4 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a88:	f107 0318 	add.w	r3, r7, #24
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fb67 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006a96:	f000 bfeb 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa6:	d103      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006aac:	f000 bfe0 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006ab4:	f000 bfdc 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ab8:	4b65      	ldr	r3, [pc, #404]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	d118      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ac4:	4b62      	ldr	r3, [pc, #392]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006ad0:	4b5f      	ldr	r3, [pc, #380]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	0e1b      	lsrs	r3, r3, #24
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	e006      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006adc:	4b5c      	ldr	r3, [pc, #368]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	0e1b      	lsrs	r3, r3, #24
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	4a5b      	ldr	r2, [pc, #364]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006af2:	f000 bfbd 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006afa:	f000 bfb9 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006b02:	f000 bfb5 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b0c:	d108      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff f9ca 	bl	8005eac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b1c:	f000 bfa8 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b24:	f000 bfa4 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b2c:	1e51      	subs	r1, r2, #1
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	d136      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006b32:	4b47      	ldr	r3, [pc, #284]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b38:	f003 0303 	and.w	r3, r3, #3
 8006b3c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d104      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006b44:	f7fe fb44 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8006b48:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b4a:	f000 bf91 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d104      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b54:	f7fe fa0c 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8006b58:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b5a:	f000 bf89 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b6a:	d106      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d103      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006b72:	4b3a      	ldr	r3, [pc, #232]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b76:	f000 bf7b 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006b7a:	4b35      	ldr	r3, [pc, #212]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d107      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d104      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b94:	f000 bf6c 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b9c:	f000 bf68 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba4:	1e91      	subs	r1, r2, #2
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	d136      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006baa:	4b29      	ldr	r3, [pc, #164]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bb0:	f003 030c 	and.w	r3, r3, #12
 8006bb4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bbc:	f7fe faf4 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8006bc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bc2:	f000 bf55 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d104      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bcc:	f7fe f9d0 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8006bd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bd2:	f000 bf4d 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006be2:	d106      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d103      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006bea:	4b1c      	ldr	r3, [pc, #112]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bee:	f000 bf3f 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006bf2:	4b17      	ldr	r3, [pc, #92]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d107      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	2b0c      	cmp	r3, #12
 8006c04:	d104      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0c:	f000 bf30 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c14:	f000 bf2c 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1c:	1f11      	subs	r1, r2, #4
 8006c1e:	430b      	orrs	r3, r1
 8006c20:	d13f      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006c22:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7fe fab8 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8006c38:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c3a:	f000 bf19 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	d10d      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c44:	f7fe f994 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8006c48:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c4a:	f000 bf11 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006c4e:	bf00      	nop
 8006c50:	46020c00 	.word	0x46020c00
 8006c54:	02dc6c00 	.word	0x02dc6c00
 8006c58:	0800a514 	.word	0x0800a514
 8006c5c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006c60:	4ba6      	ldr	r3, [pc, #664]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c6c:	d106      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d103      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006c74:	4ba2      	ldr	r3, [pc, #648]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c78:	f000 befa 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006c7c:	4b9f      	ldr	r3, [pc, #636]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d107      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	2b30      	cmp	r3, #48	@ 0x30
 8006c8e:	d104      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006c90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c96:	f000 beeb 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9e:	f000 bee7 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca6:	f1a2 0108 	sub.w	r1, r2, #8
 8006caa:	430b      	orrs	r3, r1
 8006cac:	d136      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006cae:	4b93      	ldr	r3, [pc, #588]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006cc0:	f7fe fa72 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8006cc4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cc6:	f000 bed3 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	2b40      	cmp	r3, #64	@ 0x40
 8006cce:	d104      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cd0:	f7fe f94e 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8006cd4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cd6:	f000 becb 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006cda:	4b88      	ldr	r3, [pc, #544]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce6:	d106      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	2b80      	cmp	r3, #128	@ 0x80
 8006cec:	d103      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006cee:	4b84      	ldr	r3, [pc, #528]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf2:	f000 bebd 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006cf6:	4b81      	ldr	r3, [pc, #516]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d107      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d08:	d104      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d10:	f000 beae 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d18:	f000 beaa 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d20:	f1a2 0110 	sub.w	r1, r2, #16
 8006d24:	430b      	orrs	r3, r1
 8006d26:	d139      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006d28:	4b74      	ldr	r3, [pc, #464]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d32:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d3a:	f7fe fa35 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8006d3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d40:	f000 be96 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d4a:	d104      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d4c:	f7fe f910 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8006d50:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d52:	f000 be8d 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006d56:	4b69      	ldr	r3, [pc, #420]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d62:	d107      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6a:	d103      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006d6c:	4b64      	ldr	r3, [pc, #400]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d70:	f000 be7e 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006d74:	4b61      	ldr	r3, [pc, #388]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d108      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d88:	d104      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d90:	f000 be6e 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d98:	f000 be6a 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da0:	f1a2 0120 	sub.w	r1, r2, #32
 8006da4:	430b      	orrs	r3, r1
 8006da6:	d158      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006da8:	4b54      	ldr	r3, [pc, #336]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006daa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d104      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006dba:	f7fe fa1d 	bl	80051f8 <HAL_RCC_GetPCLK3Freq>
 8006dbe:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dc0:	f000 be56 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d104      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006dca:	f7fe f8d1 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8006dce:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dd0:	f000 be4e 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006dd4:	4b49      	ldr	r3, [pc, #292]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de0:	d106      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d103      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8006de8:	4b45      	ldr	r3, [pc, #276]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dec:	f000 be40 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006df0:	4b42      	ldr	r3, [pc, #264]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d107      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d104      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8006e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0a:	f000 be31 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d11b      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d118      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e20:	4b36      	ldr	r3, [pc, #216]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006e2c:	4b33      	ldr	r3, [pc, #204]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	0e1b      	lsrs	r3, r3, #24
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	e006      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006e38:	4b30      	ldr	r3, [pc, #192]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e3e:	041b      	lsls	r3, r3, #16
 8006e40:	0e1b      	lsrs	r3, r3, #24
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	4a2f      	ldr	r2, [pc, #188]	@ (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e4e:	f000 be0f 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e56:	f000 be0b 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e5e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006e62:	430b      	orrs	r3, r1
 8006e64:	d172      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006e66:	4b25      	ldr	r3, [pc, #148]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e6c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e70:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e78:	d104      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7fe f879 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8006e7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e80:	f000 bdf6 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e8a:	d108      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e8c:	f107 0318 	add.w	r3, r7, #24
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff f965 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9a:	f000 bde9 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006ea4:	f7fe f966 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 8006ea8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eaa:	f000 bde1 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006eb4:	d128      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006eb6:	4b11      	ldr	r3, [pc, #68]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d118      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006ece:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	0e1b      	lsrs	r3, r3, #24
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	e006      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006eda:	4b08      	ldr	r3, [pc, #32]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	0e1b      	lsrs	r3, r3, #24
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	4a06      	ldr	r2, [pc, #24]	@ (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef0:	f000 bdbe 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef8:	f000 bdba 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006efc:	46020c00 	.word	0x46020c00
 8006f00:	00f42400 	.word	0x00f42400
 8006f04:	0800a514 	.word	0x0800a514
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006f08:	4baf      	ldr	r3, [pc, #700]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f14:	d107      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f1c:	d103      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8006f1e:	4bab      	ldr	r3, [pc, #684]	@ (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f22:	f000 bda5 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006f26:	4ba8      	ldr	r3, [pc, #672]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f32:	d107      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f3a:	d103      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8006f3c:	4ba3      	ldr	r3, [pc, #652]	@ (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f40:	f000 bd96 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f48:	f000 bd92 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f50:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006f54:	430b      	orrs	r3, r1
 8006f56:	d158      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006f58:	4b9b      	ldr	r3, [pc, #620]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d84b      	bhi.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8006f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006fa9 	.word	0x08006fa9
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006f97 	.word	0x08006f97
 8006f7c:	08006fb3 	.word	0x08006fb3
 8006f80:	08006fbd 	.word	0x08006fbd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe ff8f 	bl	8005eac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f92:	f000 bd6d 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f96:	f107 030c 	add.w	r3, r7, #12
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fa3a 	bl	8006414 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fa4:	f000 bd64 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006fa8:	f7fe f8e4 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 8006fac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fae:	f000 bd5f 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006fb2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fb8:	f000 bd5a 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fbc:	4b82      	ldr	r3, [pc, #520]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d118      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fc8:	4b7f      	ldr	r3, [pc, #508]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	0e1b      	lsrs	r3, r3, #24
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	e006      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006fe0:	4b79      	ldr	r3, [pc, #484]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fe6:	041b      	lsls	r3, r3, #16
 8006fe8:	0e1b      	lsrs	r3, r3, #24
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	4a78      	ldr	r2, [pc, #480]	@ (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ff6:	f000 bd3b 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ffe:	f000 bd37 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007006:	f000 bd33 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800700a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800700e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007012:	430b      	orrs	r3, r1
 8007014:	d167      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007016:	4b6c      	ldr	r3, [pc, #432]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800701c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007020:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007028:	d036      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007030:	d855      	bhi.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007038:	d029      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007040:	d84d      	bhi.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007048:	d013      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007050:	d845      	bhi.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	2b00      	cmp	r3, #0
 8007056:	d015      	beq.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800705e:	d13e      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007064:	4618      	mov	r0, r3
 8007066:	f7fe ff21 	bl	8005eac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800706e:	f000 bcff 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007072:	f107 030c 	add.w	r3, r7, #12
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff f9cc 	bl	8006414 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007080:	f000 bcf6 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007084:	f7fe f876 	bl	8005174 <HAL_RCC_GetHCLKFreq>
 8007088:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800708a:	f000 bcf1 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800708e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007094:	f000 bcec 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007098:	4b4b      	ldr	r3, [pc, #300]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d118      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070a4:	4b48      	ldr	r3, [pc, #288]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80070b0:	4b45      	ldr	r3, [pc, #276]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	0e1b      	lsrs	r3, r3, #24
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	e006      	b.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80070bc:	4b42      	ldr	r3, [pc, #264]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	0e1b      	lsrs	r3, r3, #24
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	4a41      	ldr	r2, [pc, #260]	@ (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80070cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070d2:	f000 bccd 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070da:	f000 bcc9 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070e2:	f000 bcc5 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80070e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ea:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80070ee:	430b      	orrs	r3, r1
 80070f0:	d14c      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80070f2:	4b35      	ldr	r3, [pc, #212]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80070fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	2b00      	cmp	r3, #0
 8007102:	d104      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007104:	f7fe f850 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8007108:	6378      	str	r0, [r7, #52]	@ 0x34
 800710a:	f000 bcb1 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007114:	d104      	bne.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007116:	f7fd ff2b 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 800711a:	6378      	str	r0, [r7, #52]	@ 0x34
 800711c:	f000 bca8 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007120:	4b29      	ldr	r3, [pc, #164]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800712c:	d107      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007134:	d103      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8007136:	4b25      	ldr	r3, [pc, #148]	@ (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007138:	637b      	str	r3, [r7, #52]	@ 0x34
 800713a:	f000 bc99 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800713e:	4b22      	ldr	r3, [pc, #136]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b20      	cmp	r3, #32
 8007148:	d11c      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007150:	d118      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007152:	4b1d      	ldr	r3, [pc, #116]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800715e:	4b1a      	ldr	r3, [pc, #104]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	0e1b      	lsrs	r3, r3, #24
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	e006      	b.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800716a:	4b17      	ldr	r3, [pc, #92]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800716c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	0e1b      	lsrs	r3, r3, #24
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	4a15      	ldr	r2, [pc, #84]	@ (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800717a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007180:	f000 bc76 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	637b      	str	r3, [r7, #52]	@ 0x34
 8007188:	f000 bc72 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800718c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007190:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007194:	430b      	orrs	r3, r1
 8007196:	d153      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007198:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800719a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800719e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80071a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80071aa:	f7fd fffd 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 80071ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80071b0:	f000 bc5e 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ba:	d10b      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071bc:	f7fd fed8 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 80071c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80071c2:	f000 bc55 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80071c6:	bf00      	nop
 80071c8:	46020c00 	.word	0x46020c00
 80071cc:	00f42400 	.word	0x00f42400
 80071d0:	0800a514 	.word	0x0800a514
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80071d4:	4ba1      	ldr	r3, [pc, #644]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071e0:	d107      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071e8:	d103      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80071ea:	4b9d      	ldr	r3, [pc, #628]	@ (8007460 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80071ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ee:	f000 bc3f 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80071f2:	4b9a      	ldr	r3, [pc, #616]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d11c      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007204:	d118      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007206:	4b95      	ldr	r3, [pc, #596]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d005      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8007212:	4b92      	ldr	r3, [pc, #584]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	0e1b      	lsrs	r3, r3, #24
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	e006      	b.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800721e:	4b8f      	ldr	r3, [pc, #572]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007220:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	0e1b      	lsrs	r3, r3, #24
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	4a8d      	ldr	r2, [pc, #564]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800722e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
 8007234:	f000 bc1c 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	637b      	str	r3, [r7, #52]	@ 0x34
 800723c:	f000 bc18 	b.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007244:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007248:	430b      	orrs	r3, r1
 800724a:	d151      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800724c:	4b83      	ldr	r3, [pc, #524]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800724e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007252:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007256:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725a:	2bc0      	cmp	r3, #192	@ 0xc0
 800725c:	d024      	beq.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	2bc0      	cmp	r3, #192	@ 0xc0
 8007262:	d842      	bhi.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	2b80      	cmp	r3, #128	@ 0x80
 8007268:	d00d      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726c:	2b80      	cmp	r3, #128	@ 0x80
 800726e:	d83c      	bhi.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	2b40      	cmp	r3, #64	@ 0x40
 800727a:	d011      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800727c:	e035      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800727e:	f7fd ffbb 	bl	80051f8 <HAL_RCC_GetPCLK3Freq>
 8007282:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007284:	e3f4      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007286:	4b75      	ldr	r3, [pc, #468]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800728e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007292:	d102      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8007294:	4b72      	ldr	r3, [pc, #456]	@ (8007460 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007296:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007298:	e3ea      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800729e:	e3e7      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80072a0:	f7fd fe66 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 80072a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072a6:	e3e3      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072a8:	4b6c      	ldr	r3, [pc, #432]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d117      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072b4:	4b69      	ldr	r3, [pc, #420]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80072c0:	4b66      	ldr	r3, [pc, #408]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	0e1b      	lsrs	r3, r3, #24
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	e006      	b.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80072cc:	4b63      	ldr	r3, [pc, #396]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80072ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	0e1b      	lsrs	r3, r3, #24
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	4a62      	ldr	r2, [pc, #392]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80072dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072e2:	e3c5      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072e8:	e3c2      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ee:	e3bf      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80072f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80072f8:	430b      	orrs	r3, r1
 80072fa:	d147      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80072fc:	4b57      	ldr	r3, [pc, #348]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80072fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007302:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007306:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	2b00      	cmp	r3, #0
 800730c:	d103      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800730e:	f7fd ff4b 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8007312:	6378      	str	r0, [r7, #52]	@ 0x34
 8007314:	e3ac      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800731c:	d103      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800731e:	f7fd fe27 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8007322:	6378      	str	r0, [r7, #52]	@ 0x34
 8007324:	e3a4      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007326:	4b4d      	ldr	r3, [pc, #308]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800732e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007332:	d106      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8007334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800733a:	d102      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800733c:	4b48      	ldr	r3, [pc, #288]	@ (8007460 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800733e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007340:	e396      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007342:	4b46      	ldr	r3, [pc, #280]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b20      	cmp	r3, #32
 800734c:	d11b      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007354:	d117      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007356:	4b41      	ldr	r3, [pc, #260]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8007362:	4b3e      	ldr	r3, [pc, #248]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	0e1b      	lsrs	r3, r3, #24
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	e006      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800736e:	4b3b      	ldr	r3, [pc, #236]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007374:	041b      	lsls	r3, r3, #16
 8007376:	0e1b      	lsrs	r3, r3, #24
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	4a39      	ldr	r2, [pc, #228]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800737e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007382:	637b      	str	r3, [r7, #52]	@ 0x34
 8007384:	e374      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	637b      	str	r3, [r7, #52]	@ 0x34
 800738a:	e371      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800738c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007390:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007394:	430b      	orrs	r3, r1
 8007396:	d16a      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007398:	4b30      	ldr	r3, [pc, #192]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800739a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800739e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d120      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80073aa:	4b2c      	ldr	r3, [pc, #176]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	d117      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073b6:	4b29      	ldr	r3, [pc, #164]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80073c2:	4b26      	ldr	r3, [pc, #152]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	0e1b      	lsrs	r3, r3, #24
 80073c8:	f003 030f 	and.w	r3, r3, #15
 80073cc:	e006      	b.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80073ce:	4b23      	ldr	r3, [pc, #140]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	0e1b      	lsrs	r3, r3, #24
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	4a21      	ldr	r2, [pc, #132]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80073de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e4:	e344      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ea:	e341      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80073ec:	4b1b      	ldr	r3, [pc, #108]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073fa:	d112      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007402:	d10e      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007404:	4b15      	ldr	r3, [pc, #84]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800740a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800740e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007412:	d102      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8007414:	23fa      	movs	r3, #250	@ 0xfa
 8007416:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007418:	e32a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800741a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800741e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007420:	e326      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007422:	4b0e      	ldr	r3, [pc, #56]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800742a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800742e:	d106      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8007430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007436:	d102      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8007438:	4b09      	ldr	r3, [pc, #36]	@ (8007460 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
 800743c:	e318      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800743e:	4b07      	ldr	r3, [pc, #28]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b02      	cmp	r3, #2
 800744a:	d10d      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800744c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007452:	d109      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8007454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007458:	637b      	str	r3, [r7, #52]	@ 0x34
 800745a:	e309      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800745c:	46020c00 	.word	0x46020c00
 8007460:	00f42400 	.word	0x00f42400
 8007464:	0800a514 	.word	0x0800a514
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	637b      	str	r3, [r7, #52]	@ 0x34
 800746c:	e300      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800746e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007472:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007476:	430b      	orrs	r3, r1
 8007478:	d164      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800747a:	4ba2      	ldr	r3, [pc, #648]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800747c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007480:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007484:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	2b00      	cmp	r3, #0
 800748a:	d120      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800748c:	4b9d      	ldr	r3, [pc, #628]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b20      	cmp	r3, #32
 8007496:	d117      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007498:	4b9a      	ldr	r3, [pc, #616]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80074a4:	4b97      	ldr	r3, [pc, #604]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	0e1b      	lsrs	r3, r3, #24
 80074aa:	f003 030f 	and.w	r3, r3, #15
 80074ae:	e006      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80074b0:	4b94      	ldr	r3, [pc, #592]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80074b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074b6:	041b      	lsls	r3, r3, #16
 80074b8:	0e1b      	lsrs	r3, r3, #24
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	4a92      	ldr	r2, [pc, #584]	@ (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80074c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c6:	e2d3      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80074cc:	e2d0      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80074ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80074d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074dc:	d112      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e4:	d10e      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80074e6:	4b87      	ldr	r3, [pc, #540]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80074e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074f4:	d102      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80074f6:	23fa      	movs	r3, #250	@ 0xfa
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80074fa:	e2b9      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80074fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007502:	e2b5      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007504:	4b7f      	ldr	r3, [pc, #508]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800750c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007510:	d106      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007518:	d102      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800751a:	4b7c      	ldr	r3, [pc, #496]	@ (800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
 800751e:	e2a7      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007520:	4b78      	ldr	r3, [pc, #480]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d107      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007534:	d103      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8007536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800753a:	637b      	str	r3, [r7, #52]	@ 0x34
 800753c:	e298      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	637b      	str	r3, [r7, #52]	@ 0x34
 8007542:	e295      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007548:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800754c:	430b      	orrs	r3, r1
 800754e:	d147      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007550:	4b6c      	ldr	r3, [pc, #432]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007556:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800755a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	2b00      	cmp	r3, #0
 8007560:	d103      	bne.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007562:	f7fd fe21 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8007566:	6378      	str	r0, [r7, #52]	@ 0x34
 8007568:	e282      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800756a:	4b66      	ldr	r3, [pc, #408]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800756c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007578:	d112      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007580:	d10e      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007582:	4b60      	ldr	r3, [pc, #384]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800758c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007590:	d102      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8007592:	23fa      	movs	r3, #250	@ 0xfa
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007596:	e26b      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007598:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800759c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800759e:	e267      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80075a0:	4b58      	ldr	r3, [pc, #352]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ac:	d106      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80075b4:	d102      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80075b6:	4b55      	ldr	r3, [pc, #340]	@ (800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80075b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ba:	e259      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80075bc:	4b51      	ldr	r3, [pc, #324]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80075be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d107      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80075d0:	d103      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80075d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d8:	e24a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80075de:	e247      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80075e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80075e8:	430b      	orrs	r3, r1
 80075ea:	d12d      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80075ec:	4b45      	ldr	r3, [pc, #276]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80075ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075f2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80075f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80075f8:	4b42      	ldr	r3, [pc, #264]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007604:	d105      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	2b00      	cmp	r3, #0
 800760a:	d102      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800760c:	4b3f      	ldr	r3, [pc, #252]	@ (800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800760e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007610:	e22e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007618:	d107      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800761a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fc44 	bl	8005eac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007626:	637b      	str	r3, [r7, #52]	@ 0x34
 8007628:	e222      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007630:	d107      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007632:	f107 0318 	add.w	r3, r7, #24
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fd92 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007640:	e216      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	637b      	str	r3, [r7, #52]	@ 0x34
 8007646:	e213      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800764c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007650:	430b      	orrs	r3, r1
 8007652:	d15d      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007654:	4b2b      	ldr	r3, [pc, #172]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800765a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800765e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007666:	d028      	beq.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800766e:	d845      	bhi.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007676:	d013      	beq.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800767e:	d83d      	bhi.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	2b00      	cmp	r3, #0
 8007684:	d004      	beq.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800768c:	d004      	beq.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800768e:	e035      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007690:	f7fd fd9e 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8007694:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007696:	e1eb      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007698:	f7fd fc6a 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 800769c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800769e:	e1e7      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076a0:	4b18      	ldr	r3, [pc, #96]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ac:	d102      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80076ae:	4b17      	ldr	r3, [pc, #92]	@ (800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80076b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076b2:	e1dd      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076b8:	e1da      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076ba:	4b12      	ldr	r3, [pc, #72]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d117      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80076d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	0e1b      	lsrs	r3, r3, #24
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	e006      	b.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80076de:	4b09      	ldr	r3, [pc, #36]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	0e1b      	lsrs	r3, r3, #24
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	4a06      	ldr	r2, [pc, #24]	@ (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80076ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076f4:	e1bc      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076fa:	e1b9      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007700:	e1b6      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007702:	bf00      	nop
 8007704:	46020c00 	.word	0x46020c00
 8007708:	0800a514 	.word	0x0800a514
 800770c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007714:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007718:	430b      	orrs	r3, r1
 800771a:	d156      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800771c:	4ba5      	ldr	r3, [pc, #660]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800771e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007722:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007726:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800772e:	d028      	beq.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007736:	d845      	bhi.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800773e:	d013      	beq.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007746:	d83d      	bhi.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007754:	d004      	beq.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8007756:	e035      	b.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007758:	f7fd fd26 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 800775c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800775e:	e187      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007760:	f7fd fc06 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8007764:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007766:	e183      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007768:	4b92      	ldr	r3, [pc, #584]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007774:	d102      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8007776:	4b90      	ldr	r3, [pc, #576]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007778:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800777a:	e179      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007780:	e176      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007782:	4b8c      	ldr	r3, [pc, #560]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b20      	cmp	r3, #32
 800778c:	d117      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800778e:	4b89      	ldr	r3, [pc, #548]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800779a:	4b86      	ldr	r3, [pc, #536]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	0e1b      	lsrs	r3, r3, #24
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	e006      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80077a6:	4b83      	ldr	r3, [pc, #524]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80077a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077ac:	041b      	lsls	r3, r3, #16
 80077ae:	0e1b      	lsrs	r3, r3, #24
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	4a81      	ldr	r2, [pc, #516]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80077b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077bc:	e158      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c2:	e155      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c8:	e152      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80077ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ce:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80077d2:	430b      	orrs	r3, r1
 80077d4:	d177      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80077d6:	4b77      	ldr	r3, [pc, #476]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80077d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077dc:	f003 0318 	and.w	r3, r3, #24
 80077e0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	2b18      	cmp	r3, #24
 80077e6:	d86b      	bhi.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80077e8:	a201      	add	r2, pc, #4	@ (adr r2, 80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007855 	.word	0x08007855
 80077f4:	080078c1 	.word	0x080078c1
 80077f8:	080078c1 	.word	0x080078c1
 80077fc:	080078c1 	.word	0x080078c1
 8007800:	080078c1 	.word	0x080078c1
 8007804:	080078c1 	.word	0x080078c1
 8007808:	080078c1 	.word	0x080078c1
 800780c:	080078c1 	.word	0x080078c1
 8007810:	0800785d 	.word	0x0800785d
 8007814:	080078c1 	.word	0x080078c1
 8007818:	080078c1 	.word	0x080078c1
 800781c:	080078c1 	.word	0x080078c1
 8007820:	080078c1 	.word	0x080078c1
 8007824:	080078c1 	.word	0x080078c1
 8007828:	080078c1 	.word	0x080078c1
 800782c:	080078c1 	.word	0x080078c1
 8007830:	08007865 	.word	0x08007865
 8007834:	080078c1 	.word	0x080078c1
 8007838:	080078c1 	.word	0x080078c1
 800783c:	080078c1 	.word	0x080078c1
 8007840:	080078c1 	.word	0x080078c1
 8007844:	080078c1 	.word	0x080078c1
 8007848:	080078c1 	.word	0x080078c1
 800784c:	080078c1 	.word	0x080078c1
 8007850:	0800787f 	.word	0x0800787f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007854:	f7fd fcd0 	bl	80051f8 <HAL_RCC_GetPCLK3Freq>
 8007858:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800785a:	e109      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800785c:	f7fd fb88 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8007860:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007862:	e105      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007864:	4b53      	ldr	r3, [pc, #332]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800786c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007870:	d102      	bne.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007872:	4b51      	ldr	r3, [pc, #324]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007874:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007876:	e0fb      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800787c:	e0f8      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800787e:	4b4d      	ldr	r3, [pc, #308]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b20      	cmp	r3, #32
 8007888:	d117      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800788a:	4b4a      	ldr	r3, [pc, #296]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8007896:	4b47      	ldr	r3, [pc, #284]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	0e1b      	lsrs	r3, r3, #24
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	e006      	b.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80078a2:	4b44      	ldr	r3, [pc, #272]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80078a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078a8:	041b      	lsls	r3, r3, #16
 80078aa:	0e1b      	lsrs	r3, r3, #24
 80078ac:	f003 030f 	and.w	r3, r3, #15
 80078b0:	4a42      	ldr	r2, [pc, #264]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80078b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078b8:	e0da      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078be:	e0d7      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078c4:	e0d4      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80078c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ca:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80078ce:	430b      	orrs	r3, r1
 80078d0:	d155      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80078d2:	4b38      	ldr	r3, [pc, #224]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80078d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078d8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80078dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80078de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078e4:	d013      	beq.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078ec:	d844      	bhi.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078f4:	d013      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 80078f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078fc:	d83c      	bhi.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	2b00      	cmp	r3, #0
 8007902:	d014      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800790a:	d014      	beq.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800790c:	e034      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800790e:	f107 0318 	add.w	r3, r7, #24
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fc24 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800791c:	e0a8      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800791e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fac2 	bl	8005eac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800792c:	e0a0      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800792e:	f7fd fb1f 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8007932:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007934:	e09c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007936:	4b1f      	ldr	r3, [pc, #124]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b20      	cmp	r3, #32
 8007940:	d117      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007942:	4b1c      	ldr	r3, [pc, #112]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800794e:	4b19      	ldr	r3, [pc, #100]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	0e1b      	lsrs	r3, r3, #24
 8007954:	f003 030f 	and.w	r3, r3, #15
 8007958:	e006      	b.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800795a:	4b16      	ldr	r3, [pc, #88]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800795c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007960:	041b      	lsls	r3, r3, #16
 8007962:	0e1b      	lsrs	r3, r3, #24
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	4a14      	ldr	r2, [pc, #80]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800796a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007970:	e07e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007976:	e07b      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800797c:	e078      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800797e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007982:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007986:	430b      	orrs	r3, r1
 8007988:	d138      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800798a:	4b0a      	ldr	r3, [pc, #40]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800798c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007994:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007996:	4b07      	ldr	r3, [pc, #28]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d10d      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 80079aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b0:	e05e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80079b2:	bf00      	nop
 80079b4:	46020c00 	.word	0x46020c00
 80079b8:	00f42400 	.word	0x00f42400
 80079bc:	0800a514 	.word	0x0800a514
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80079c0:	4b2e      	ldr	r3, [pc, #184]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80079c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079ce:	d112      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d6:	d10e      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079d8:	4b28      	ldr	r3, [pc, #160]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80079da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079e6:	d102      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 80079e8:	23fa      	movs	r3, #250	@ 0xfa
 80079ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079ec:	e040      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80079ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079f2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079f4:	e03c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079fa:	e039      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80079fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a00:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007a04:	430b      	orrs	r3, r1
 8007a06:	d131      	bne.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007a08:	4b1c      	ldr	r3, [pc, #112]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007a0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007a12:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007a14:	4b19      	ldr	r3, [pc, #100]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a20:	d105      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d102      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007a28:	4b15      	ldr	r3, [pc, #84]	@ (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a2c:	e020      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007a2e:	4b13      	ldr	r3, [pc, #76]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a3a:	d106      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a42:	d102      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007a44:	4b0f      	ldr	r3, [pc, #60]	@ (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a48:	e012      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a56:	d106      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a5e:	d102      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007a60:	4b09      	ldr	r3, [pc, #36]	@ (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a64:	e004      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a6a:	e001      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3738      	adds	r7, #56	@ 0x38
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	46020c00 	.word	0x46020c00
 8007a80:	02dc6c00 	.word	0x02dc6c00
 8007a84:	016e3600 	.word	0x016e3600
 8007a88:	00f42400 	.word	0x00f42400

08007a8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007a94:	4b47      	ldr	r3, [pc, #284]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a46      	ldr	r2, [pc, #280]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007a9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007aa0:	f7fb fb8a 	bl	80031b8 <HAL_GetTick>
 8007aa4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007aa6:	e008      	b.n	8007aba <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007aa8:	f7fb fb86 	bl	80031b8 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d901      	bls.n	8007aba <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e077      	b.n	8007baa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007aba:	4b3e      	ldr	r3, [pc, #248]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1f0      	bne.n	8007aa8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007ace:	f023 0303 	bic.w	r3, r3, #3
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6811      	ldr	r1, [r2, #0]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6852      	ldr	r2, [r2, #4]
 8007ada:	3a01      	subs	r2, #1
 8007adc:	0212      	lsls	r2, r2, #8
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	4934      	ldr	r1, [pc, #208]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007ae6:	4b33      	ldr	r3, [pc, #204]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007ae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aea:	4b33      	ldr	r3, [pc, #204]	@ (8007bb8 <RCCEx_PLL2_Config+0x12c>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6892      	ldr	r2, [r2, #8]
 8007af2:	3a01      	subs	r2, #1
 8007af4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	68d2      	ldr	r2, [r2, #12]
 8007afc:	3a01      	subs	r2, #1
 8007afe:	0252      	lsls	r2, r2, #9
 8007b00:	b292      	uxth	r2, r2
 8007b02:	4311      	orrs	r1, r2
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6912      	ldr	r2, [r2, #16]
 8007b08:	3a01      	subs	r2, #1
 8007b0a:	0412      	lsls	r2, r2, #16
 8007b0c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007b10:	4311      	orrs	r1, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6952      	ldr	r2, [r2, #20]
 8007b16:	3a01      	subs	r2, #1
 8007b18:	0612      	lsls	r2, r2, #24
 8007b1a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	4924      	ldr	r1, [pc, #144]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007b26:	4b23      	ldr	r3, [pc, #140]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2a:	f023 020c 	bic.w	r2, r3, #12
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	4920      	ldr	r1, [pc, #128]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007b38:	4b1e      	ldr	r3, [pc, #120]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	491c      	ldr	r1, [pc, #112]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007b46:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b4c:	f023 0310 	bic.w	r3, r3, #16
 8007b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b52:	4b18      	ldr	r3, [pc, #96]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b5a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	69d2      	ldr	r2, [r2, #28]
 8007b62:	00d2      	lsls	r2, r2, #3
 8007b64:	4913      	ldr	r1, [pc, #76]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007b6a:	4b12      	ldr	r3, [pc, #72]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6e:	4a11      	ldr	r2, [pc, #68]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b70:	f043 0310 	orr.w	r3, r3, #16
 8007b74:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007b76:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b80:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b82:	f7fb fb19 	bl	80031b8 <HAL_GetTick>
 8007b86:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b88:	e008      	b.n	8007b9c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b8a:	f7fb fb15 	bl	80031b8 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d901      	bls.n	8007b9c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e006      	b.n	8007baa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b9c:	4b05      	ldr	r3, [pc, #20]	@ (8007bb4 <RCCEx_PLL2_Config+0x128>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0f0      	beq.n	8007b8a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0

}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	46020c00 	.word	0x46020c00
 8007bb8:	80800000 	.word	0x80800000

08007bbc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007bc4:	4b47      	ldr	r3, [pc, #284]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a46      	ldr	r2, [pc, #280]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bd0:	f7fb faf2 	bl	80031b8 <HAL_GetTick>
 8007bd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bd6:	e008      	b.n	8007bea <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bd8:	f7fb faee 	bl	80031b8 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e077      	b.n	8007cda <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bea:	4b3e      	ldr	r3, [pc, #248]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007bfe:	f023 0303 	bic.w	r3, r3, #3
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6811      	ldr	r1, [r2, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6852      	ldr	r2, [r2, #4]
 8007c0a:	3a01      	subs	r2, #1
 8007c0c:	0212      	lsls	r2, r2, #8
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	4934      	ldr	r1, [pc, #208]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	630b      	str	r3, [r1, #48]	@ 0x30
 8007c16:	4b33      	ldr	r3, [pc, #204]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c1a:	4b33      	ldr	r3, [pc, #204]	@ (8007ce8 <RCCEx_PLL3_Config+0x12c>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6892      	ldr	r2, [r2, #8]
 8007c22:	3a01      	subs	r2, #1
 8007c24:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	68d2      	ldr	r2, [r2, #12]
 8007c2c:	3a01      	subs	r2, #1
 8007c2e:	0252      	lsls	r2, r2, #9
 8007c30:	b292      	uxth	r2, r2
 8007c32:	4311      	orrs	r1, r2
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6912      	ldr	r2, [r2, #16]
 8007c38:	3a01      	subs	r2, #1
 8007c3a:	0412      	lsls	r2, r2, #16
 8007c3c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007c40:	4311      	orrs	r1, r2
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6952      	ldr	r2, [r2, #20]
 8007c46:	3a01      	subs	r2, #1
 8007c48:	0612      	lsls	r2, r2, #24
 8007c4a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	4924      	ldr	r1, [pc, #144]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007c56:	4b23      	ldr	r3, [pc, #140]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5a:	f023 020c 	bic.w	r2, r3, #12
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	4920      	ldr	r1, [pc, #128]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007c68:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	491c      	ldr	r1, [pc, #112]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007c76:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c7c:	f023 0310 	bic.w	r3, r3, #16
 8007c80:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c82:	4b18      	ldr	r3, [pc, #96]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c8a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	69d2      	ldr	r2, [r2, #28]
 8007c92:	00d2      	lsls	r2, r2, #3
 8007c94:	4913      	ldr	r1, [pc, #76]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007c9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9e:	4a11      	ldr	r2, [pc, #68]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007ca0:	f043 0310 	orr.w	r3, r3, #16
 8007ca4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a0e      	ldr	r2, [pc, #56]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cb0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cb2:	f7fb fa81 	bl	80031b8 <HAL_GetTick>
 8007cb6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cb8:	e008      	b.n	8007ccc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cba:	f7fb fa7d 	bl	80031b8 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e006      	b.n	8007cda <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ccc:	4b05      	ldr	r3, [pc, #20]	@ (8007ce4 <RCCEx_PLL3_Config+0x128>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0f0      	beq.n	8007cba <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	46020c00 	.word	0x46020c00
 8007ce8:	80800000 	.word	0x80800000

08007cec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e0fb      	b.n	8007ef6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a7f      	ldr	r2, [pc, #508]	@ (8007f00 <HAL_SPI_Init+0x214>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d004      	beq.n	8007d12 <HAL_SPI_Init+0x26>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a7d      	ldr	r2, [pc, #500]	@ (8007f04 <HAL_SPI_Init+0x218>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	e000      	b.n	8007d14 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007d12:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a78      	ldr	r2, [pc, #480]	@ (8007f00 <HAL_SPI_Init+0x214>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d004      	beq.n	8007d2e <HAL_SPI_Init+0x42>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a76      	ldr	r2, [pc, #472]	@ (8007f04 <HAL_SPI_Init+0x218>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d105      	bne.n	8007d3a <HAL_SPI_Init+0x4e>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2b0f      	cmp	r3, #15
 8007d34:	d901      	bls.n	8007d3a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e0dd      	b.n	8007ef6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fdb8 	bl	80088b0 <SPI_GetPacketSize>
 8007d40:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a6e      	ldr	r2, [pc, #440]	@ (8007f00 <HAL_SPI_Init+0x214>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d004      	beq.n	8007d56 <HAL_SPI_Init+0x6a>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a6c      	ldr	r2, [pc, #432]	@ (8007f04 <HAL_SPI_Init+0x218>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d102      	bne.n	8007d5c <HAL_SPI_Init+0x70>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d816      	bhi.n	8007d8a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d60:	4a69      	ldr	r2, [pc, #420]	@ (8007f08 <HAL_SPI_Init+0x21c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00e      	beq.n	8007d84 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a68      	ldr	r2, [pc, #416]	@ (8007f0c <HAL_SPI_Init+0x220>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d009      	beq.n	8007d84 <HAL_SPI_Init+0x98>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a66      	ldr	r2, [pc, #408]	@ (8007f10 <HAL_SPI_Init+0x224>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d004      	beq.n	8007d84 <HAL_SPI_Init+0x98>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a65      	ldr	r2, [pc, #404]	@ (8007f14 <HAL_SPI_Init+0x228>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d104      	bne.n	8007d8e <HAL_SPI_Init+0xa2>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b10      	cmp	r3, #16
 8007d88:	d901      	bls.n	8007d8e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e0b3      	b.n	8007ef6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f8e1 	bl	8007f6a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0201 	bic.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007dca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007dd4:	d119      	bne.n	8007e0a <HAL_SPI_Init+0x11e>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dde:	d103      	bne.n	8007de8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d008      	beq.n	8007dfa <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10c      	bne.n	8007e0a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007df4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007df8:	d107      	bne.n	8007e0a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00f      	beq.n	8007e36 <HAL_SPI_Init+0x14a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	2b06      	cmp	r3, #6
 8007e1c:	d90b      	bls.n	8007e36 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	e007      	b.n	8007e46 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69da      	ldr	r2, [r3, #28]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e58:	ea42 0103 	orr.w	r1, r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eb2:	ea42 0103 	orr.w	r1, r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00a      	beq.n	8007ee4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	46002000 	.word	0x46002000
 8007f04:	56002000 	.word	0x56002000
 8007f08:	40013000 	.word	0x40013000
 8007f0c:	50013000 	.word	0x50013000
 8007f10:	40003800 	.word	0x40003800
 8007f14:	50003800 	.word	0x50003800

08007f18 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e01b      	b.n	8007f62 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0201 	bic.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f81b 	bl	8007f7e <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State = HAL_SPI_STATE_RESET;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
	...

08007f94 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3320      	adds	r3, #32
 8007faa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fac:	f7fb f904 	bl	80031b8 <HAL_GetTick>
 8007fb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d001      	beq.n	8007fc2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e1f3      	b.n	80083aa <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <HAL_SPI_Transmit+0x3a>
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e1eb      	b.n	80083aa <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_SPI_Transmit+0x4c>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e1e4      	b.n	80083aa <HAL_SPI_Transmit+0x416>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2203      	movs	r2, #3
 8007fec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	88fa      	ldrh	r2, [r7, #6]
 800800a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008038:	d108      	bne.n	800804c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	e009      	b.n	8008060 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800805e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	0c1b      	lsrs	r3, r3, #16
 8008068:	041b      	lsls	r3, r3, #16
 800806a:	88f9      	ldrh	r1, [r7, #6]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	430b      	orrs	r3, r1
 8008072:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10c      	bne.n	80080ac <HAL_SPI_Transmit+0x118>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800809a:	d107      	bne.n	80080ac <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	2b0f      	cmp	r3, #15
 80080b2:	d95b      	bls.n	800816c <HAL_SPI_Transmit+0x1d8>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a8f      	ldr	r2, [pc, #572]	@ (80082f8 <HAL_SPI_Transmit+0x364>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d04f      	beq.n	800815e <HAL_SPI_Transmit+0x1ca>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a8e      	ldr	r2, [pc, #568]	@ (80082fc <HAL_SPI_Transmit+0x368>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d04a      	beq.n	800815e <HAL_SPI_Transmit+0x1ca>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a8c      	ldr	r2, [pc, #560]	@ (8008300 <HAL_SPI_Transmit+0x36c>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d045      	beq.n	800815e <HAL_SPI_Transmit+0x1ca>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a8b      	ldr	r2, [pc, #556]	@ (8008304 <HAL_SPI_Transmit+0x370>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d147      	bne.n	800816c <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80080dc:	e03f      	b.n	800815e <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d114      	bne.n	8008116 <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6812      	ldr	r2, [r2, #0]
 80080f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008114:	e023      	b.n	800815e <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008116:	f7fb f84f 	bl	80031b8 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d803      	bhi.n	800812e <HAL_SPI_Transmit+0x19a>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800812c:	d102      	bne.n	8008134 <HAL_SPI_Transmit+0x1a0>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d114      	bne.n	800815e <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 faed 	bl	8008714 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008140:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e125      	b.n	80083aa <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1b9      	bne.n	80080de <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800816a:	e0f8      	b.n	800835e <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	2b07      	cmp	r3, #7
 8008172:	f240 80ed 	bls.w	8008350 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008176:	e05d      	b.n	8008234 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b02      	cmp	r3, #2
 8008184:	d132      	bne.n	80081ec <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800818c:	b29b      	uxth	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	d918      	bls.n	80081c4 <HAL_SPI_Transmit+0x230>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d014      	beq.n	80081c4 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6812      	ldr	r2, [r2, #0]
 80081a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081aa:	1d1a      	adds	r2, r3, #4
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	3b02      	subs	r3, #2
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081c2:	e037      	b.n	8008234 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c8:	881a      	ldrh	r2, [r3, #0]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d2:	1c9a      	adds	r2, r3, #2
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081ea:	e023      	b.n	8008234 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ec:	f7fa ffe4 	bl	80031b8 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d803      	bhi.n	8008204 <HAL_SPI_Transmit+0x270>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008202:	d102      	bne.n	800820a <HAL_SPI_Transmit+0x276>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d114      	bne.n	8008234 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fa82 	bl	8008714 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008216:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e0ba      	b.n	80083aa <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800823a:	b29b      	uxth	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d19b      	bne.n	8008178 <HAL_SPI_Transmit+0x1e4>
 8008240:	e08d      	b.n	800835e <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b02      	cmp	r3, #2
 800824e:	d15b      	bne.n	8008308 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008256:	b29b      	uxth	r3, r3
 8008258:	2b03      	cmp	r3, #3
 800825a:	d918      	bls.n	800828e <HAL_SPI_Transmit+0x2fa>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008260:	2b40      	cmp	r3, #64	@ 0x40
 8008262:	d914      	bls.n	800828e <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b04      	subs	r3, #4
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800828c:	e060      	b.n	8008350 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008294:	b29b      	uxth	r3, r3
 8008296:	2b01      	cmp	r3, #1
 8008298:	d917      	bls.n	80082ca <HAL_SPI_Transmit+0x336>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d013      	beq.n	80082ca <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082a6:	881a      	ldrh	r2, [r3, #0]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b0:	1c9a      	adds	r2, r3, #2
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b02      	subs	r3, #2
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082c8:	e042      	b.n	8008350 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3320      	adds	r3, #32
 80082d4:	7812      	ldrb	r2, [r2, #0]
 80082d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	3b01      	subs	r3, #1
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082f4:	e02c      	b.n	8008350 <HAL_SPI_Transmit+0x3bc>
 80082f6:	bf00      	nop
 80082f8:	40013000 	.word	0x40013000
 80082fc:	50013000 	.word	0x50013000
 8008300:	40003800 	.word	0x40003800
 8008304:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008308:	f7fa ff56 	bl	80031b8 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d803      	bhi.n	8008320 <HAL_SPI_Transmit+0x38c>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800831e:	d102      	bne.n	8008326 <HAL_SPI_Transmit+0x392>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d114      	bne.n	8008350 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f9f4 	bl	8008714 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008332:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e02c      	b.n	80083aa <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008356:	b29b      	uxth	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	f47f af72 	bne.w	8008242 <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2200      	movs	r2, #0
 8008366:	2108      	movs	r1, #8
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fa73 	bl	8008854 <SPI_WaitOnFlagUntilTimeout>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800837a:	f043 0220 	orr.w	r2, r3, #32
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f9c5 	bl	8008714 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 80083a8:	2300      	movs	r3, #0
  }
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop

080083b4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	4613      	mov	r3, r2
 80083c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3330      	adds	r3, #48	@ 0x30
 80083ca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083cc:	f7fa fef4 	bl	80031b8 <HAL_GetTick>
 80083d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d001      	beq.n	80083e2 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 80083de:	2302      	movs	r3, #2
 80083e0:	e17e      	b.n	80086e0 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <HAL_SPI_Receive+0x3a>
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e176      	b.n	80086e0 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d101      	bne.n	8008400 <HAL_SPI_Receive+0x4c>
 80083fc:	2302      	movs	r3, #2
 80083fe:	e16f      	b.n	80086e0 <HAL_SPI_Receive+0x32c>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2204      	movs	r2, #4
 800840c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	88fa      	ldrh	r2, [r7, #6]
 8008422:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	88fa      	ldrh	r2, [r7, #6]
 800842a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008458:	d108      	bne.n	800846c <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	e009      	b.n	8008480 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800847e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	0c1b      	lsrs	r3, r3, #16
 8008488:	041b      	lsls	r3, r3, #16
 800848a:	88f9      	ldrh	r1, [r7, #6]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	6812      	ldr	r2, [r2, #0]
 8008490:	430b      	orrs	r3, r1
 8008492:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10c      	bne.n	80084cc <HAL_SPI_Receive+0x118>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084ba:	d107      	bne.n	80084cc <HAL_SPI_Receive+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	2b0f      	cmp	r3, #15
 80084d2:	d95c      	bls.n	800858e <HAL_SPI_Receive+0x1da>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a83      	ldr	r2, [pc, #524]	@ (80086e8 <HAL_SPI_Receive+0x334>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d050      	beq.n	8008580 <HAL_SPI_Receive+0x1cc>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a82      	ldr	r2, [pc, #520]	@ (80086ec <HAL_SPI_Receive+0x338>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d04b      	beq.n	8008580 <HAL_SPI_Receive+0x1cc>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a80      	ldr	r2, [pc, #512]	@ (80086f0 <HAL_SPI_Receive+0x33c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d046      	beq.n	8008580 <HAL_SPI_Receive+0x1cc>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a7f      	ldr	r2, [pc, #508]	@ (80086f4 <HAL_SPI_Receive+0x340>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d148      	bne.n	800858e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80084fc:	e040      	b.n	8008580 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	695a      	ldr	r2, [r3, #20]
 8008504:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008508:	4013      	ands	r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d014      	beq.n	8008538 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008516:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008518:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800851e:	1d1a      	adds	r2, r3, #4
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008536:	e023      	b.n	8008580 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008538:	f7fa fe3e 	bl	80031b8 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d803      	bhi.n	8008550 <HAL_SPI_Receive+0x19c>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800854e:	d102      	bne.n	8008556 <HAL_SPI_Receive+0x1a2>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d114      	bne.n	8008580 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f8dc 	bl	8008714 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008562:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e0af      	b.n	80086e0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008586:	b29b      	uxth	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1b8      	bne.n	80084fe <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800858c:	e095      	b.n	80086ba <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	2b07      	cmp	r3, #7
 8008594:	f240 808b 	bls.w	80086ae <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008598:	e03f      	b.n	800861a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d114      	bne.n	80085d2 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	8812      	ldrh	r2, [r2, #0]
 80085b0:	b292      	uxth	r2, r2
 80085b2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b8:	1c9a      	adds	r2, r3, #2
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	3b01      	subs	r3, #1
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80085d0:	e023      	b.n	800861a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085d2:	f7fa fdf1 	bl	80031b8 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d803      	bhi.n	80085ea <HAL_SPI_Receive+0x236>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085e8:	d102      	bne.n	80085f0 <HAL_SPI_Receive+0x23c>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d114      	bne.n	800861a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 f88f 	bl	8008714 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e062      	b.n	80086e0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1b9      	bne.n	800859a <HAL_SPI_Receive+0x1e6>
 8008626:	e048      	b.n	80086ba <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b01      	cmp	r3, #1
 8008634:	d117      	bne.n	8008666 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008642:	7812      	ldrb	r2, [r2, #0]
 8008644:	b2d2      	uxtb	r2, r2
 8008646:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008664:	e023      	b.n	80086ae <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008666:	f7fa fda7 	bl	80031b8 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d803      	bhi.n	800867e <HAL_SPI_Receive+0x2ca>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800867c:	d102      	bne.n	8008684 <HAL_SPI_Receive+0x2d0>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d114      	bne.n	80086ae <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 f845 	bl	8008714 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008690:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e018      	b.n	80086e0 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1b6      	bne.n	8008628 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f82a 	bl	8008714 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e000      	b.n	80086e0 <HAL_SPI_Receive+0x32c>
  }
  else
  {
    return HAL_OK;
 80086de:	2300      	movs	r3, #0
  }
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40013000 	.word	0x40013000
 80086ec:	50013000 	.word	0x50013000
 80086f0:	40003800 	.word	0x40003800
 80086f4:	50003800 	.word	0x50003800

080086f8 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008706:	b2db      	uxtb	r3, r3
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0208 	orr.w	r2, r2, #8
 8008732:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699a      	ldr	r2, [r3, #24]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0210 	orr.w	r2, r2, #16
 8008742:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 0201 	bic.w	r2, r2, #1
 8008752:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008762:	f023 0303 	bic.w	r3, r3, #3
 8008766:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008776:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b04      	cmp	r3, #4
 8008782:	d014      	beq.n	80087ae <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00f      	beq.n	80087ae <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008794:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699a      	ldr	r2, [r3, #24]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0220 	orr.w	r2, r2, #32
 80087ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d014      	beq.n	80087e4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00f      	beq.n	80087e4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ca:	f043 0204 	orr.w	r2, r3, #4
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699a      	ldr	r2, [r3, #24]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00f      	beq.n	800880e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087f4:	f043 0201 	orr.w	r2, r3, #1
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	699a      	ldr	r2, [r3, #24]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800880c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00f      	beq.n	8008838 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800881e:	f043 0208 	orr.w	r2, r3, #8
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699a      	ldr	r2, [r3, #24]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008836:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008848:	bf00      	nop
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	4613      	mov	r3, r2
 8008862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008864:	e010      	b.n	8008888 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008866:	f7fa fca7 	bl	80031b8 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d803      	bhi.n	800887e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800887c:	d102      	bne.n	8008884 <SPI_WaitOnFlagUntilTimeout+0x30>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e00f      	b.n	80088a8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695a      	ldr	r2, [r3, #20]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4013      	ands	r3, r2
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	429a      	cmp	r2, r3
 8008896:	bf0c      	ite	eq
 8008898:	2301      	moveq	r3, #1
 800889a:	2300      	movne	r3, #0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d0df      	beq.n	8008866 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	3307      	adds	r3, #7
 80088ce:	08db      	lsrs	r3, r3, #3
 80088d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d12e      	bne.n	800895a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008902:	2b01      	cmp	r3, #1
 8008904:	d101      	bne.n	800890a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008906:	2302      	movs	r3, #2
 8008908:	e028      	b.n	800895c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2202      	movs	r2, #2
 8008916:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0201 	bic.w	r2, r2, #1
 8008928:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008936:	ea42 0103 	orr.w	r1, r2, r3
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	e000      	b.n	800895c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
  }
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e042      	b.n	8008a00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008980:	2b00      	cmp	r3, #0
 8008982:	d106      	bne.n	8008992 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7f8 f883 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2224      	movs	r2, #36	@ 0x24
 8008996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f022 0201 	bic.w	r2, r2, #1
 80089a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa68 	bl	8008e88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f8c3 	bl	8008b44 <UART_SetConfig>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e01b      	b.n	8008a00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0201 	orr.w	r2, r2, #1
 80089f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fae7 	bl	8008fcc <UART_CheckIdleState>
 80089fe:	4603      	mov	r3, r0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	@ 0x28
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	4613      	mov	r3, r2
 8008a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a1e:	2b20      	cmp	r3, #32
 8008a20:	f040 808b 	bne.w	8008b3a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <HAL_UART_Transmit+0x28>
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e083      	b.n	8008b3c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3e:	2b80      	cmp	r3, #128	@ 0x80
 8008a40:	d107      	bne.n	8008a52 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a50:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2221      	movs	r2, #33	@ 0x21
 8008a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a62:	f7fa fba9 	bl	80031b8 <HAL_GetTick>
 8008a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	88fa      	ldrh	r2, [r7, #6]
 8008a6c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	88fa      	ldrh	r2, [r7, #6]
 8008a74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a80:	d108      	bne.n	8008a94 <HAL_UART_Transmit+0x8c>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d104      	bne.n	8008a94 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	61bb      	str	r3, [r7, #24]
 8008a92:	e003      	b.n	8008a9c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a9c:	e030      	b.n	8008b00 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2180      	movs	r1, #128	@ 0x80
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 fb39 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e03d      	b.n	8008b3c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10b      	bne.n	8008ade <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ad4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	3302      	adds	r3, #2
 8008ada:	61bb      	str	r3, [r7, #24]
 8008adc:	e007      	b.n	8008aee <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	3301      	adds	r3, #1
 8008aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1c8      	bne.n	8008a9e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2200      	movs	r2, #0
 8008b14:	2140      	movs	r1, #64	@ 0x40
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 fb02 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e006      	b.n	8008b3c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e000      	b.n	8008b3c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008b3a:	2302      	movs	r3, #2
  }
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3720      	adds	r7, #32
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b48:	b094      	sub	sp, #80	@ 0x50
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	4b7e      	ldr	r3, [pc, #504]	@ (8008d54 <UART_SetConfig+0x210>)
 8008b5a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	431a      	orrs	r2, r3
 8008b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4977      	ldr	r1, [pc, #476]	@ (8008d58 <UART_SetConfig+0x214>)
 8008b7c:	4019      	ands	r1, r3
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b84:	430b      	orrs	r3, r1
 8008b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b94:	68d9      	ldr	r1, [r3, #12]
 8008b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	ea40 0301 	orr.w	r3, r0, r1
 8008b9e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4b6a      	ldr	r3, [pc, #424]	@ (8008d54 <UART_SetConfig+0x210>)
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d009      	beq.n	8008bc4 <UART_SetConfig+0x80>
 8008bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	4b69      	ldr	r3, [pc, #420]	@ (8008d5c <UART_SetConfig+0x218>)
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d004      	beq.n	8008bc4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbc:	6a1a      	ldr	r2, [r3, #32]
 8008bbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008bce:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be2:	f023 000f 	bic.w	r0, r3, #15
 8008be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	ea40 0301 	orr.w	r3, r0, r1
 8008bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4b59      	ldr	r3, [pc, #356]	@ (8008d60 <UART_SetConfig+0x21c>)
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d102      	bne.n	8008c04 <UART_SetConfig+0xc0>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c02:	e029      	b.n	8008c58 <UART_SetConfig+0x114>
 8008c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	4b56      	ldr	r3, [pc, #344]	@ (8008d64 <UART_SetConfig+0x220>)
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d102      	bne.n	8008c14 <UART_SetConfig+0xd0>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c12:	e021      	b.n	8008c58 <UART_SetConfig+0x114>
 8008c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	4b53      	ldr	r3, [pc, #332]	@ (8008d68 <UART_SetConfig+0x224>)
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d102      	bne.n	8008c24 <UART_SetConfig+0xe0>
 8008c1e:	2304      	movs	r3, #4
 8008c20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c22:	e019      	b.n	8008c58 <UART_SetConfig+0x114>
 8008c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	4b50      	ldr	r3, [pc, #320]	@ (8008d6c <UART_SetConfig+0x228>)
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d102      	bne.n	8008c34 <UART_SetConfig+0xf0>
 8008c2e:	2308      	movs	r3, #8
 8008c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c32:	e011      	b.n	8008c58 <UART_SetConfig+0x114>
 8008c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	4b4d      	ldr	r3, [pc, #308]	@ (8008d70 <UART_SetConfig+0x22c>)
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d102      	bne.n	8008c44 <UART_SetConfig+0x100>
 8008c3e:	2310      	movs	r3, #16
 8008c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c42:	e009      	b.n	8008c58 <UART_SetConfig+0x114>
 8008c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	4b42      	ldr	r3, [pc, #264]	@ (8008d54 <UART_SetConfig+0x210>)
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d102      	bne.n	8008c54 <UART_SetConfig+0x110>
 8008c4e:	2320      	movs	r3, #32
 8008c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c52:	e001      	b.n	8008c58 <UART_SetConfig+0x114>
 8008c54:	2300      	movs	r3, #0
 8008c56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8008d54 <UART_SetConfig+0x210>)
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d005      	beq.n	8008c6e <UART_SetConfig+0x12a>
 8008c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	4b3d      	ldr	r3, [pc, #244]	@ (8008d5c <UART_SetConfig+0x218>)
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	f040 8085 	bne.w	8008d78 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c70:	2200      	movs	r2, #0
 8008c72:	623b      	str	r3, [r7, #32]
 8008c74:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c7a:	f7fd fd25 	bl	80066c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c7e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 80e8 	beq.w	8008e58 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8c:	4a39      	ldr	r2, [pc, #228]	@ (8008d74 <UART_SetConfig+0x230>)
 8008c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c96:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c9a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	4413      	add	r3, r2
 8008ca6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d305      	bcc.n	8008cb8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d903      	bls.n	8008cc0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008cbe:	e048      	b.n	8008d52 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	61bb      	str	r3, [r7, #24]
 8008cc6:	61fa      	str	r2, [r7, #28]
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ccc:	4a29      	ldr	r2, [pc, #164]	@ (8008d74 <UART_SetConfig+0x230>)
 8008cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	617a      	str	r2, [r7, #20]
 8008cda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ce2:	f7f7 fad1 	bl	8000288 <__aeabi_uldivmod>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4610      	mov	r0, r2
 8008cec:	4619      	mov	r1, r3
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	020b      	lsls	r3, r1, #8
 8008cf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cfc:	0202      	lsls	r2, r0, #8
 8008cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d00:	6849      	ldr	r1, [r1, #4]
 8008d02:	0849      	lsrs	r1, r1, #1
 8008d04:	2000      	movs	r0, #0
 8008d06:	460c      	mov	r4, r1
 8008d08:	4605      	mov	r5, r0
 8008d0a:	eb12 0804 	adds.w	r8, r2, r4
 8008d0e:	eb43 0905 	adc.w	r9, r3, r5
 8008d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	60bb      	str	r3, [r7, #8]
 8008d1a:	60fa      	str	r2, [r7, #12]
 8008d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d20:	4640      	mov	r0, r8
 8008d22:	4649      	mov	r1, r9
 8008d24:	f7f7 fab0 	bl	8000288 <__aeabi_uldivmod>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d36:	d308      	bcc.n	8008d4a <UART_SetConfig+0x206>
 8008d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d3e:	d204      	bcs.n	8008d4a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d46:	60da      	str	r2, [r3, #12]
 8008d48:	e003      	b.n	8008d52 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008d50:	e082      	b.n	8008e58 <UART_SetConfig+0x314>
 8008d52:	e081      	b.n	8008e58 <UART_SetConfig+0x314>
 8008d54:	46002400 	.word	0x46002400
 8008d58:	cfff69f3 	.word	0xcfff69f3
 8008d5c:	56002400 	.word	0x56002400
 8008d60:	40013800 	.word	0x40013800
 8008d64:	40004400 	.word	0x40004400
 8008d68:	40004800 	.word	0x40004800
 8008d6c:	40004c00 	.word	0x40004c00
 8008d70:	40005000 	.word	0x40005000
 8008d74:	0800a5d4 	.word	0x0800a5d4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d80:	d13c      	bne.n	8008dfc <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d84:	2200      	movs	r2, #0
 8008d86:	603b      	str	r3, [r7, #0]
 8008d88:	607a      	str	r2, [r7, #4]
 8008d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d8e:	f7fd fc9b 	bl	80066c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d92:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d05e      	beq.n	8008e58 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9e:	4a39      	ldr	r2, [pc, #228]	@ (8008e84 <UART_SetConfig+0x340>)
 8008da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da4:	461a      	mov	r2, r3
 8008da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dac:	005a      	lsls	r2, r3, #1
 8008dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	085b      	lsrs	r3, r3, #1
 8008db4:	441a      	add	r2, r3
 8008db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc2:	2b0f      	cmp	r3, #15
 8008dc4:	d916      	bls.n	8008df4 <UART_SetConfig+0x2b0>
 8008dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dcc:	d212      	bcs.n	8008df4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f023 030f 	bic.w	r3, r3, #15
 8008dd6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dda:	085b      	lsrs	r3, r3, #1
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008de6:	4313      	orrs	r3, r2
 8008de8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008df0:	60da      	str	r2, [r3, #12]
 8008df2:	e031      	b.n	8008e58 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008dfa:	e02d      	b.n	8008e58 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dfe:	2200      	movs	r2, #0
 8008e00:	469a      	mov	sl, r3
 8008e02:	4693      	mov	fp, r2
 8008e04:	4650      	mov	r0, sl
 8008e06:	4659      	mov	r1, fp
 8008e08:	f7fd fc5e 	bl	80066c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e0c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d021      	beq.n	8008e58 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e18:	4a1a      	ldr	r2, [pc, #104]	@ (8008e84 <UART_SetConfig+0x340>)
 8008e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e22:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	441a      	add	r2, r3
 8008e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3a:	2b0f      	cmp	r3, #15
 8008e3c:	d909      	bls.n	8008e52 <UART_SetConfig+0x30e>
 8008e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e44:	d205      	bcs.n	8008e52 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60da      	str	r2, [r3, #12]
 8008e50:	e002      	b.n	8008e58 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e62:	2201      	movs	r2, #1
 8008e64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	2200      	movs	r2, #0
 8008e72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e74:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3750      	adds	r7, #80	@ 0x50
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e82:	bf00      	nop
 8008e84:	0800a5d4 	.word	0x0800a5d4

08008e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01a      	beq.n	8008f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f86:	d10a      	bne.n	8008f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	605a      	str	r2, [r3, #4]
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b098      	sub	sp, #96	@ 0x60
 8008fd0:	af02      	add	r7, sp, #8
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fdc:	f7fa f8ec 	bl	80031b8 <HAL_GetTick>
 8008fe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d12f      	bne.n	8009050 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f88e 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d022      	beq.n	8009050 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800901a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800901e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009028:	647b      	str	r3, [r7, #68]	@ 0x44
 800902a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800902e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e6      	bne.n	800900a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2220      	movs	r2, #32
 8009040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e063      	b.n	8009118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b04      	cmp	r3, #4
 800905c:	d149      	bne.n	80090f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800905e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009066:	2200      	movs	r2, #0
 8009068:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f857 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d03c      	beq.n	80090f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	623b      	str	r3, [r7, #32]
   return(result);
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800908c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009096:	633b      	str	r3, [r7, #48]	@ 0x30
 8009098:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800909c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e6      	bne.n	8009078 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3308      	adds	r3, #8
 80090b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f023 0301 	bic.w	r3, r3, #1
 80090c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090ca:	61fa      	str	r2, [r7, #28]
 80090cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	69b9      	ldr	r1, [r7, #24]
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	617b      	str	r3, [r7, #20]
   return(result);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e5      	bne.n	80090aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e012      	b.n	8009118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3758      	adds	r7, #88	@ 0x58
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	4613      	mov	r3, r2
 800912e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009130:	e04f      	b.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009138:	d04b      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800913a:	f7fa f83d 	bl	80031b8 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	429a      	cmp	r2, r3
 8009148:	d302      	bcc.n	8009150 <UART_WaitOnFlagUntilTimeout+0x30>
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e04e      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	d037      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b80      	cmp	r3, #128	@ 0x80
 8009166:	d034      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b40      	cmp	r3, #64	@ 0x40
 800916c:	d031      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	f003 0308 	and.w	r3, r3, #8
 8009178:	2b08      	cmp	r3, #8
 800917a:	d110      	bne.n	800919e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2208      	movs	r2, #8
 8009182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 f838 	bl	80091fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2208      	movs	r2, #8
 800918e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e029      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091ac:	d111      	bne.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f81e 	bl	80091fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e00f      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69da      	ldr	r2, [r3, #28]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4013      	ands	r3, r2
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	429a      	cmp	r2, r3
 80091e0:	bf0c      	ite	eq
 80091e2:	2301      	moveq	r3, #1
 80091e4:	2300      	movne	r3, #0
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	461a      	mov	r2, r3
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d0a0      	beq.n	8009132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b095      	sub	sp, #84	@ 0x54
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009220:	643b      	str	r3, [r7, #64]	@ 0x40
 8009222:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e6      	bne.n	8009202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	61fb      	str	r3, [r7, #28]
   return(result);
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800924a:	f023 0301 	bic.w	r3, r3, #1
 800924e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3308      	adds	r3, #8
 8009256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800925a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800925e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e3      	bne.n	8009234 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009270:	2b01      	cmp	r3, #1
 8009272:	d118      	bne.n	80092a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	60bb      	str	r3, [r7, #8]
   return(result);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	f023 0310 	bic.w	r3, r3, #16
 8009288:	647b      	str	r3, [r7, #68]	@ 0x44
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009292:	61bb      	str	r3, [r7, #24]
 8009294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009296:	6979      	ldr	r1, [r7, #20]
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	e841 2300 	strex	r3, r2, [r1]
 800929e:	613b      	str	r3, [r7, #16]
   return(result);
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e6      	bne.n	8009274 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80092ba:	bf00      	nop
 80092bc:	3754      	adds	r7, #84	@ 0x54
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b085      	sub	sp, #20
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_UARTEx_DisableFifoMode+0x16>
 80092d8:	2302      	movs	r3, #2
 80092da:	e027      	b.n	800932c <HAL_UARTEx_DisableFifoMode+0x66>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2224      	movs	r2, #36	@ 0x24
 80092e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 0201 	bic.w	r2, r2, #1
 8009302:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800930a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800934c:	2302      	movs	r3, #2
 800934e:	e02d      	b.n	80093ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2224      	movs	r2, #36	@ 0x24
 800935c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 0201 	bic.w	r2, r2, #1
 8009376:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f84f 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2220      	movs	r2, #32
 800939e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093c8:	2302      	movs	r3, #2
 80093ca:	e02d      	b.n	8009428 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2224      	movs	r2, #36	@ 0x24
 80093d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0201 	bic.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f811 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800943c:	2b00      	cmp	r3, #0
 800943e:	d108      	bne.n	8009452 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009450:	e031      	b.n	80094b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009452:	2308      	movs	r3, #8
 8009454:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009456:	2308      	movs	r3, #8
 8009458:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	0e5b      	lsrs	r3, r3, #25
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	0f5b      	lsrs	r3, r3, #29
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	7b3a      	ldrb	r2, [r7, #12]
 800947e:	4911      	ldr	r1, [pc, #68]	@ (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009480:	5c8a      	ldrb	r2, [r1, r2]
 8009482:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009486:	7b3a      	ldrb	r2, [r7, #12]
 8009488:	490f      	ldr	r1, [pc, #60]	@ (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 800948a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800948c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009490:	b29a      	uxth	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	7b7a      	ldrb	r2, [r7, #13]
 800949c:	4909      	ldr	r1, [pc, #36]	@ (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 800949e:	5c8a      	ldrb	r2, [r1, r2]
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094a4:	7b7a      	ldrb	r2, [r7, #13]
 80094a6:	4908      	ldr	r1, [pc, #32]	@ (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 80094a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	0800a5ec 	.word	0x0800a5ec
 80094c8:	0800a5f4 	.word	0x0800a5f4

080094cc <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08e      	sub	sp, #56	@ 0x38
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 80094da:	2301      	movs	r3, #1
 80094dc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d131      	bne.n	800954c <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case CUSTOM_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 80094e8:	6838      	ldr	r0, [r7, #0]
 80094ea:	f000 f877 	bl	80095dc <LSM6DSV16X_0_Probe>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 80094f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094f8:	e064      	b.n	80095c4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80094fa:	4a34      	ldr	r2, [pc, #208]	@ (80095cc <CUSTOM_MOTION_SENSOR_Init+0x100>)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	4932      	ldr	r1, [pc, #200]	@ (80095d0 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800950c:	f107 010c 	add.w	r1, r7, #12
 8009510:	4610      	mov	r0, r2
 8009512:	4798      	blx	r3
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800951a:	f06f 0306 	mvn.w	r3, #6
 800951e:	e051      	b.n	80095c4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 8009520:	7b3b      	ldrb	r3, [r7, #12]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d103      	bne.n	800952e <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 8009526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009528:	f043 0302 	orr.w	r3, r3, #2
 800952c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800952e:	7b7b      	ldrb	r3, [r7, #13]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d103      	bne.n	800953c <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8009534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009536:	f043 0301 	orr.w	r3, r3, #1
 800953a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d108      	bne.n	8009554 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 8009542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009544:	f043 0304 	orr.w	r3, r3, #4
 8009548:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800954a:	e003      	b.n	8009554 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800954c:	f06f 0301 	mvn.w	r3, #1
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8009552:	e000      	b.n	8009556 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 8009554:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800955c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955e:	e031      	b.n	80095c4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8009560:	2300      	movs	r3, #0
 8009562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009564:	e02a      	b.n	80095bc <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	4013      	ands	r3, r2
 800956c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956e:	429a      	cmp	r2, r3
 8009570:	d11e      	bne.n	80095b0 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 8009572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	4013      	ands	r3, r2
 8009578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800957a:	429a      	cmp	r2, r3
 800957c:	d118      	bne.n	80095b0 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800957e:	4a15      	ldr	r2, [pc, #84]	@ (80095d4 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009586:	4814      	ldr	r0, [pc, #80]	@ (80095d8 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	4613      	mov	r3, r2
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	4413      	add	r3, r2
 8009590:	440b      	add	r3, r1
 8009592:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	490d      	ldr	r1, [pc, #52]	@ (80095d0 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80095a0:	4610      	mov	r0, r2
 80095a2:	4798      	blx	r3
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80095aa:	f06f 0304 	mvn.w	r3, #4
 80095ae:	e009      	b.n	80095c4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 80095b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 80095b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b8:	3301      	adds	r3, #1
 80095ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d9d1      	bls.n	8009566 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 80095c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3738      	adds	r7, #56	@ 0x38
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20000260 	.word	0x20000260
 80095d0:	20000250 	.word	0x20000250
 80095d4:	20000064 	.word	0x20000064
 80095d8:	20000254 	.word	0x20000254

080095dc <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b094      	sub	sp, #80	@ 0x50
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_SPI_4WIRES_BUS; /* SPI 4-Wires */
 80095e8:	2301      	movs	r3, #1
 80095ea:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = 0x0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = CUSTOM_LSM6DSV16X_0_Init;
 80095f2:	4b50      	ldr	r3, [pc, #320]	@ (8009734 <LSM6DSV16X_0_Probe+0x158>)
 80095f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = CUSTOM_LSM6DSV16X_0_DeInit;
 80095f6:	4b50      	ldr	r3, [pc, #320]	@ (8009738 <LSM6DSV16X_0_Probe+0x15c>)
 80095f8:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = CUSTOM_LSM6DSV16X_0_ReadReg;
 80095fa:	4b50      	ldr	r3, [pc, #320]	@ (800973c <LSM6DSV16X_0_Probe+0x160>)
 80095fc:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = CUSTOM_LSM6DSV16X_0_WriteReg;
 80095fe:	4b50      	ldr	r3, [pc, #320]	@ (8009740 <LSM6DSV16X_0_Probe+0x164>)
 8009600:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 8009602:	4b50      	ldr	r3, [pc, #320]	@ (8009744 <LSM6DSV16X_0_Probe+0x168>)
 8009604:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = HAL_Delay;
 8009606:	4b50      	ldr	r3, [pc, #320]	@ (8009748 <LSM6DSV16X_0_Probe+0x16c>)
 8009608:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800960a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800960e:	4619      	mov	r1, r3
 8009610:	484e      	ldr	r0, [pc, #312]	@ (800974c <LSM6DSV16X_0_Probe+0x170>)
 8009612:	f7f7 fbdd 	bl	8000dd0 <LSM6DSV16X_RegisterBusIO>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800961c:	f06f 0306 	mvn.w	r3, #6
 8009620:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009622:	e082      	b.n	800972a <LSM6DSV16X_0_Probe+0x14e>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8009624:	2100      	movs	r1, #0
 8009626:	4849      	ldr	r0, [pc, #292]	@ (800974c <LSM6DSV16X_0_Probe+0x170>)
 8009628:	f7f8 fb5f 	bl	8001cea <LSM6DSV16X_Set_Mem_Bank>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009632:	f06f 0306 	mvn.w	r3, #6
 8009636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009638:	e077      	b.n	800972a <LSM6DSV16X_0_Probe+0x14e>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800963a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800963e:	4619      	mov	r1, r3
 8009640:	4842      	ldr	r0, [pc, #264]	@ (800974c <LSM6DSV16X_0_Probe+0x170>)
 8009642:	f7f7 fcf5 	bl	8001030 <LSM6DSV16X_ReadID>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800964c:	f06f 0306 	mvn.w	r3, #6
 8009650:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009652:	e06a      	b.n	800972a <LSM6DSV16X_0_Probe+0x14e>
  }
  else if (id != (uint8_t)LSM6DSV16X_ID)
 8009654:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009658:	2b70      	cmp	r3, #112	@ 0x70
 800965a:	d003      	beq.n	8009664 <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800965c:	f06f 0306 	mvn.w	r3, #6
 8009660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009662:	e062      	b.n	800972a <LSM6DSV16X_0_Probe+0x14e>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 8009664:	f107 030c 	add.w	r3, r7, #12
 8009668:	4619      	mov	r1, r3
 800966a:	4838      	ldr	r0, [pc, #224]	@ (800974c <LSM6DSV16X_0_Probe+0x170>)
 800966c:	f7f7 fcf6 	bl	800105c <LSM6DSV16X_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009670:	7b7b      	ldrb	r3, [r7, #13]
 8009672:	461a      	mov	r2, r3
 8009674:	7b3b      	ldrb	r3, [r7, #12]
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	431a      	orrs	r2, r3
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4313      	orrs	r3, r2
 8009680:	4a33      	ldr	r2, [pc, #204]	@ (8009750 <LSM6DSV16X_0_Probe+0x174>)
 8009682:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 8009684:	4b33      	ldr	r3, [pc, #204]	@ (8009754 <LSM6DSV16X_0_Probe+0x178>)
 8009686:	4a31      	ldr	r2, [pc, #196]	@ (800974c <LSM6DSV16X_0_Probe+0x170>)
 8009688:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800968a:	4b33      	ldr	r3, [pc, #204]	@ (8009758 <LSM6DSV16X_0_Probe+0x17c>)
 800968c:	4a33      	ldr	r2, [pc, #204]	@ (800975c <LSM6DSV16X_0_Probe+0x180>)
 800968e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d11d      	bne.n	80096d2 <LSM6DSV16X_0_Probe+0xf6>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d018      	beq.n	80096d2 <LSM6DSV16X_0_Probe+0xf6>
 80096a0:	7b7b      	ldrb	r3, [r7, #13]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d115      	bne.n	80096d2 <LSM6DSV16X_0_Probe+0xf6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80096a6:	4b2e      	ldr	r3, [pc, #184]	@ (8009760 <LSM6DSV16X_0_Probe+0x184>)
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	4a2e      	ldr	r2, [pc, #184]	@ (8009764 <LSM6DSV16X_0_Probe+0x188>)
 80096ac:	492e      	ldr	r1, [pc, #184]	@ (8009768 <LSM6DSV16X_0_Probe+0x18c>)
 80096ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[CUSTOM_LSM6DSV16X_0]->Init(MotionCompObj[CUSTOM_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 80096b2:	4b29      	ldr	r3, [pc, #164]	@ (8009758 <LSM6DSV16X_0_Probe+0x17c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a26      	ldr	r2, [pc, #152]	@ (8009754 <LSM6DSV16X_0_Probe+0x178>)
 80096ba:	6812      	ldr	r2, [r2, #0]
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <LSM6DSV16X_0_Probe+0xf2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80096c6:	f06f 0304 	mvn.w	r3, #4
 80096ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096cc:	e001      	b.n	80096d2 <LSM6DSV16X_0_Probe+0xf6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80096d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11d      	bne.n	8009714 <LSM6DSV16X_0_Probe+0x138>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d018      	beq.n	8009714 <LSM6DSV16X_0_Probe+0x138>
 80096e2:	7b3b      	ldrb	r3, [r7, #12]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d115      	bne.n	8009714 <LSM6DSV16X_0_Probe+0x138>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80096e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009760 <LSM6DSV16X_0_Probe+0x184>)
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009764 <LSM6DSV16X_0_Probe+0x188>)
 80096ee:	491f      	ldr	r1, [pc, #124]	@ (800976c <LSM6DSV16X_0_Probe+0x190>)
 80096f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[CUSTOM_LSM6DSV16X_0]->Init(MotionCompObj[CUSTOM_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 80096f4:	4b18      	ldr	r3, [pc, #96]	@ (8009758 <LSM6DSV16X_0_Probe+0x17c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a16      	ldr	r2, [pc, #88]	@ (8009754 <LSM6DSV16X_0_Probe+0x178>)
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	4610      	mov	r0, r2
 8009700:	4798      	blx	r3
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <LSM6DSV16X_0_Probe+0x134>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009708:	f06f 0304 	mvn.w	r3, #4
 800970c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800970e:	e001      	b.n	8009714 <LSM6DSV16X_0_Probe+0x138>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009710:	2300      	movs	r3, #0
 8009712:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d107      	bne.n	800972a <LSM6DSV16X_0_Probe+0x14e>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <LSM6DSV16X_0_Probe+0x14e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009724:	f06f 0304 	mvn.w	r3, #4
 8009728:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800972a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800972c:	4618      	mov	r0, r3
 800972e:	3750      	adds	r7, #80	@ 0x50
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	08009771 	.word	0x08009771
 8009738:	08009795 	.word	0x08009795
 800973c:	08009829 	.word	0x08009829
 8009740:	080097b9 	.word	0x080097b9
 8009744:	08002e11 	.word	0x08002e11
 8009748:	080031d1 	.word	0x080031d1
 800974c:	20000268 	.word	0x20000268
 8009750:	20000264 	.word	0x20000264
 8009754:	20000250 	.word	0x20000250
 8009758:	20000260 	.word	0x20000260
 800975c:	20000004 	.word	0x20000004
 8009760:	20000064 	.word	0x20000064
 8009764:	20000254 	.word	0x20000254
 8009768:	20000038 	.word	0x20000038
 800976c:	20000014 	.word	0x20000014

08009770 <CUSTOM_LSM6DSV16X_0_Init>:
/**
  * @brief  Initialize SPI bus for LSM6DSV16X
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSV16X_0_Init(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8009776:	f06f 0305 	mvn.w	r3, #5
 800977a:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSV16X_0_SPI_Init() == BSP_ERROR_NONE)
 800977c:	f7f9 fab8 	bl	8002cf0 <BSP_SPI2_Init>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d101      	bne.n	800978a <CUSTOM_LSM6DSV16X_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8009786:	2300      	movs	r3, #0
 8009788:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800978a:	687b      	ldr	r3, [r7, #4]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <CUSTOM_LSM6DSV16X_0_DeInit>:
/**
  * @brief  DeInitialize SPI bus for LSM6DSV16X
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSV16X_0_DeInit(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800979a:	f06f 0305 	mvn.w	r3, #5
 800979e:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSV16X_0_SPI_DeInit() == BSP_ERROR_NONE)
 80097a0:	f7f9 fad6 	bl	8002d50 <BSP_SPI2_DeInit>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <CUSTOM_LSM6DSV16X_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	607b      	str	r3, [r7, #4]
  }

  return ret;
 80097ae:	687b      	ldr	r3, [r7, #4]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <CUSTOM_LSM6DSV16X_0_WriteReg>:
  * @param  pdata the pointer to the data to be written
  * @param  len the length of the data to be written
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSV16X_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60ba      	str	r2, [r7, #8]
 80097c0:	461a      	mov	r2, r3
 80097c2:	4603      	mov	r3, r0
 80097c4:	81fb      	strh	r3, [r7, #14]
 80097c6:	460b      	mov	r3, r1
 80097c8:	81bb      	strh	r3, [r7, #12]
 80097ca:	4613      	mov	r3, r2
 80097cc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 80097d2:	89bb      	ldrh	r3, [r7, #12]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSV16X_0_CS_PORT, CUSTOM_LSM6DSV16X_0_CS_PIN, GPIO_PIN_RESET);
 80097d8:	2200      	movs	r2, #0
 80097da:	2120      	movs	r1, #32
 80097dc:	4811      	ldr	r0, [pc, #68]	@ (8009824 <CUSTOM_LSM6DSV16X_0_WriteReg+0x6c>)
 80097de:	f7fa fa2b 	bl	8003c38 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSV16X_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 80097e2:	f107 0313 	add.w	r3, r7, #19
 80097e6:	2101      	movs	r1, #1
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7f9 fad9 	bl	8002da0 <BSP_SPI2_Send>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <CUSTOM_LSM6DSV16X_0_WriteReg+0x42>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80097f4:	f06f 0305 	mvn.w	r3, #5
 80097f8:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSV16X_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 80097fa:	88fb      	ldrh	r3, [r7, #6]
 80097fc:	4619      	mov	r1, r3
 80097fe:	68b8      	ldr	r0, [r7, #8]
 8009800:	f7f9 face 	bl	8002da0 <BSP_SPI2_Send>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <CUSTOM_LSM6DSV16X_0_WriteReg+0x58>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800980a:	f06f 0305 	mvn.w	r3, #5
 800980e:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSV16X_0_CS_PORT, CUSTOM_LSM6DSV16X_0_CS_PIN, GPIO_PIN_SET);
 8009810:	2201      	movs	r2, #1
 8009812:	2120      	movs	r1, #32
 8009814:	4803      	ldr	r0, [pc, #12]	@ (8009824 <CUSTOM_LSM6DSV16X_0_WriteReg+0x6c>)
 8009816:	f7fa fa0f 	bl	8003c38 <HAL_GPIO_WritePin>

  return ret;
 800981a:	697b      	ldr	r3, [r7, #20]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	42022000 	.word	0x42022000

08009828 <CUSTOM_LSM6DSV16X_0_ReadReg>:
  * @param  pdata the pointer to the data to be read
  * @param  len the length of the data to be read
  * @retval BSP status
  */
static int32_t CUSTOM_LSM6DSV16X_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60ba      	str	r2, [r7, #8]
 8009830:	461a      	mov	r2, r3
 8009832:	4603      	mov	r3, r0
 8009834:	81fb      	strh	r3, [r7, #14]
 8009836:	460b      	mov	r3, r1
 8009838:	81bb      	strh	r3, [r7, #12]
 800983a:	4613      	mov	r3, r2
 800983c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800983e:	2300      	movs	r3, #0
 8009840:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8009842:	89bb      	ldrh	r3, [r7, #12]
 8009844:	b2db      	uxtb	r3, r3
 8009846:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 8009848:	7cfb      	ldrb	r3, [r7, #19]
 800984a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800984e:	b2db      	uxtb	r3, r3
 8009850:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSV16X_0_CS_PORT, CUSTOM_LSM6DSV16X_0_CS_PIN, GPIO_PIN_RESET);
 8009852:	2200      	movs	r2, #0
 8009854:	2120      	movs	r1, #32
 8009856:	4812      	ldr	r0, [pc, #72]	@ (80098a0 <CUSTOM_LSM6DSV16X_0_ReadReg+0x78>)
 8009858:	f7fa f9ee 	bl	8003c38 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSV16X_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800985c:	f107 0313 	add.w	r3, r7, #19
 8009860:	2101      	movs	r1, #1
 8009862:	4618      	mov	r0, r3
 8009864:	f7f9 fa9c 	bl	8002da0 <BSP_SPI2_Send>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <CUSTOM_LSM6DSV16X_0_ReadReg+0x4c>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800986e:	f06f 0305 	mvn.w	r3, #5
 8009872:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSV16X_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 8009874:	88fb      	ldrh	r3, [r7, #6]
 8009876:	4619      	mov	r1, r3
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	f7f9 faad 	bl	8002dd8 <BSP_SPI2_Recv>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <CUSTOM_LSM6DSV16X_0_ReadReg+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8009884:	f06f 0305 	mvn.w	r3, #5
 8009888:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSV16X_0_CS_PORT, CUSTOM_LSM6DSV16X_0_CS_PIN, GPIO_PIN_SET);
 800988a:	2201      	movs	r2, #1
 800988c:	2120      	movs	r1, #32
 800988e:	4804      	ldr	r0, [pc, #16]	@ (80098a0 <CUSTOM_LSM6DSV16X_0_ReadReg+0x78>)
 8009890:	f7fa f9d2 	bl	8003c38 <HAL_GPIO_WritePin>

  return ret;
 8009894:	697b      	ldr	r3, [r7, #20]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	42022000 	.word	0x42022000

080098a4 <CUSTOM_MOTION_SENSOR_Write_Register>:
  * @param  Reg address to be read
  * @param  Data value to be written
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
 80098b0:	4613      	mov	r3, r2
 80098b2:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d112      	bne.n	80098e0 <CUSTOM_MOTION_SENSOR_Write_Register+0x3c>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case CUSTOM_LSM6DSV16X_0:
      if (LSM6DSV16X_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 80098ba:	4a0e      	ldr	r2, [pc, #56]	@ (80098f4 <CUSTOM_MOTION_SENSOR_Write_Register+0x50>)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098c2:	78ba      	ldrb	r2, [r7, #2]
 80098c4:	78f9      	ldrb	r1, [r7, #3]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7f8 f9f4 	bl	8001cb4 <LSM6DSV16X_Write_Reg>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <CUSTOM_MOTION_SENSOR_Write_Register+0x36>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80098d2:	f06f 0304 	mvn.w	r3, #4
 80098d6:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80098d8:	e006      	b.n	80098e8 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
        ret = BSP_ERROR_NONE;
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]
      break;
 80098de:	e003      	b.n	80098e8 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80098e0:	f06f 0301 	mvn.w	r3, #1
 80098e4:	60fb      	str	r3, [r7, #12]
      break;
 80098e6:	bf00      	nop
  }

  return ret;
 80098e8:	68fb      	ldr	r3, [r7, #12]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	20000250 	.word	0x20000250

080098f8 <std>:
 80098f8:	2300      	movs	r3, #0
 80098fa:	b510      	push	{r4, lr}
 80098fc:	4604      	mov	r4, r0
 80098fe:	6083      	str	r3, [r0, #8]
 8009900:	8181      	strh	r1, [r0, #12]
 8009902:	4619      	mov	r1, r3
 8009904:	6643      	str	r3, [r0, #100]	@ 0x64
 8009906:	81c2      	strh	r2, [r0, #14]
 8009908:	2208      	movs	r2, #8
 800990a:	6183      	str	r3, [r0, #24]
 800990c:	e9c0 3300 	strd	r3, r3, [r0]
 8009910:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009914:	305c      	adds	r0, #92	@ 0x5c
 8009916:	f000 f90f 	bl	8009b38 <memset>
 800991a:	4b0d      	ldr	r3, [pc, #52]	@ (8009950 <std+0x58>)
 800991c:	6224      	str	r4, [r4, #32]
 800991e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009920:	4b0c      	ldr	r3, [pc, #48]	@ (8009954 <std+0x5c>)
 8009922:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009924:	4b0c      	ldr	r3, [pc, #48]	@ (8009958 <std+0x60>)
 8009926:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009928:	4b0c      	ldr	r3, [pc, #48]	@ (800995c <std+0x64>)
 800992a:	6323      	str	r3, [r4, #48]	@ 0x30
 800992c:	4b0c      	ldr	r3, [pc, #48]	@ (8009960 <std+0x68>)
 800992e:	429c      	cmp	r4, r3
 8009930:	d006      	beq.n	8009940 <std+0x48>
 8009932:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009936:	4294      	cmp	r4, r2
 8009938:	d002      	beq.n	8009940 <std+0x48>
 800993a:	33d0      	adds	r3, #208	@ 0xd0
 800993c:	429c      	cmp	r4, r3
 800993e:	d105      	bne.n	800994c <std+0x54>
 8009940:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009948:	f000 b928 	b.w	8009b9c <__retarget_lock_init_recursive>
 800994c:	bd10      	pop	{r4, pc}
 800994e:	bf00      	nop
 8009950:	08009e59 	.word	0x08009e59
 8009954:	08009e7b 	.word	0x08009e7b
 8009958:	08009eb3 	.word	0x08009eb3
 800995c:	08009ed7 	.word	0x08009ed7
 8009960:	200002a0 	.word	0x200002a0

08009964 <stdio_exit_handler>:
 8009964:	4a02      	ldr	r2, [pc, #8]	@ (8009970 <stdio_exit_handler+0xc>)
 8009966:	4903      	ldr	r1, [pc, #12]	@ (8009974 <stdio_exit_handler+0x10>)
 8009968:	4803      	ldr	r0, [pc, #12]	@ (8009978 <stdio_exit_handler+0x14>)
 800996a:	f000 b869 	b.w	8009a40 <_fwalk_sglue>
 800996e:	bf00      	nop
 8009970:	20000084 	.word	0x20000084
 8009974:	08009df1 	.word	0x08009df1
 8009978:	20000094 	.word	0x20000094

0800997c <cleanup_stdio>:
 800997c:	6841      	ldr	r1, [r0, #4]
 800997e:	4b0c      	ldr	r3, [pc, #48]	@ (80099b0 <cleanup_stdio+0x34>)
 8009980:	4299      	cmp	r1, r3
 8009982:	b510      	push	{r4, lr}
 8009984:	4604      	mov	r4, r0
 8009986:	d001      	beq.n	800998c <cleanup_stdio+0x10>
 8009988:	f000 fa32 	bl	8009df0 <_fflush_r>
 800998c:	68a1      	ldr	r1, [r4, #8]
 800998e:	4b09      	ldr	r3, [pc, #36]	@ (80099b4 <cleanup_stdio+0x38>)
 8009990:	4299      	cmp	r1, r3
 8009992:	d002      	beq.n	800999a <cleanup_stdio+0x1e>
 8009994:	4620      	mov	r0, r4
 8009996:	f000 fa2b 	bl	8009df0 <_fflush_r>
 800999a:	68e1      	ldr	r1, [r4, #12]
 800999c:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <cleanup_stdio+0x3c>)
 800999e:	4299      	cmp	r1, r3
 80099a0:	d004      	beq.n	80099ac <cleanup_stdio+0x30>
 80099a2:	4620      	mov	r0, r4
 80099a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a8:	f000 ba22 	b.w	8009df0 <_fflush_r>
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	bf00      	nop
 80099b0:	200002a0 	.word	0x200002a0
 80099b4:	20000308 	.word	0x20000308
 80099b8:	20000370 	.word	0x20000370

080099bc <global_stdio_init.part.0>:
 80099bc:	b510      	push	{r4, lr}
 80099be:	4b0b      	ldr	r3, [pc, #44]	@ (80099ec <global_stdio_init.part.0+0x30>)
 80099c0:	2104      	movs	r1, #4
 80099c2:	4c0b      	ldr	r4, [pc, #44]	@ (80099f0 <global_stdio_init.part.0+0x34>)
 80099c4:	4a0b      	ldr	r2, [pc, #44]	@ (80099f4 <global_stdio_init.part.0+0x38>)
 80099c6:	4620      	mov	r0, r4
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f7ff ff94 	bl	80098f8 <std>
 80099d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099d4:	2201      	movs	r2, #1
 80099d6:	2109      	movs	r1, #9
 80099d8:	f7ff ff8e 	bl	80098f8 <std>
 80099dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099e0:	2202      	movs	r2, #2
 80099e2:	2112      	movs	r1, #18
 80099e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e8:	f7ff bf86 	b.w	80098f8 <std>
 80099ec:	200003d8 	.word	0x200003d8
 80099f0:	200002a0 	.word	0x200002a0
 80099f4:	08009965 	.word	0x08009965

080099f8 <__sfp_lock_acquire>:
 80099f8:	4801      	ldr	r0, [pc, #4]	@ (8009a00 <__sfp_lock_acquire+0x8>)
 80099fa:	f000 b8d0 	b.w	8009b9e <__retarget_lock_acquire_recursive>
 80099fe:	bf00      	nop
 8009a00:	200003dd 	.word	0x200003dd

08009a04 <__sfp_lock_release>:
 8009a04:	4801      	ldr	r0, [pc, #4]	@ (8009a0c <__sfp_lock_release+0x8>)
 8009a06:	f000 b8cb 	b.w	8009ba0 <__retarget_lock_release_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	200003dd 	.word	0x200003dd

08009a10 <__sinit>:
 8009a10:	b510      	push	{r4, lr}
 8009a12:	4604      	mov	r4, r0
 8009a14:	f7ff fff0 	bl	80099f8 <__sfp_lock_acquire>
 8009a18:	6a23      	ldr	r3, [r4, #32]
 8009a1a:	b11b      	cbz	r3, 8009a24 <__sinit+0x14>
 8009a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a20:	f7ff bff0 	b.w	8009a04 <__sfp_lock_release>
 8009a24:	4b04      	ldr	r3, [pc, #16]	@ (8009a38 <__sinit+0x28>)
 8009a26:	6223      	str	r3, [r4, #32]
 8009a28:	4b04      	ldr	r3, [pc, #16]	@ (8009a3c <__sinit+0x2c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1f5      	bne.n	8009a1c <__sinit+0xc>
 8009a30:	f7ff ffc4 	bl	80099bc <global_stdio_init.part.0>
 8009a34:	e7f2      	b.n	8009a1c <__sinit+0xc>
 8009a36:	bf00      	nop
 8009a38:	0800997d 	.word	0x0800997d
 8009a3c:	200003d8 	.word	0x200003d8

08009a40 <_fwalk_sglue>:
 8009a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a44:	4607      	mov	r7, r0
 8009a46:	4688      	mov	r8, r1
 8009a48:	4614      	mov	r4, r2
 8009a4a:	2600      	movs	r6, #0
 8009a4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a50:	f1b9 0901 	subs.w	r9, r9, #1
 8009a54:	d505      	bpl.n	8009a62 <_fwalk_sglue+0x22>
 8009a56:	6824      	ldr	r4, [r4, #0]
 8009a58:	2c00      	cmp	r4, #0
 8009a5a:	d1f7      	bne.n	8009a4c <_fwalk_sglue+0xc>
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d907      	bls.n	8009a78 <_fwalk_sglue+0x38>
 8009a68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	d003      	beq.n	8009a78 <_fwalk_sglue+0x38>
 8009a70:	4629      	mov	r1, r5
 8009a72:	4638      	mov	r0, r7
 8009a74:	47c0      	blx	r8
 8009a76:	4306      	orrs	r6, r0
 8009a78:	3568      	adds	r5, #104	@ 0x68
 8009a7a:	e7e9      	b.n	8009a50 <_fwalk_sglue+0x10>

08009a7c <_puts_r>:
 8009a7c:	6a03      	ldr	r3, [r0, #32]
 8009a7e:	b570      	push	{r4, r5, r6, lr}
 8009a80:	4605      	mov	r5, r0
 8009a82:	460e      	mov	r6, r1
 8009a84:	6884      	ldr	r4, [r0, #8]
 8009a86:	b90b      	cbnz	r3, 8009a8c <_puts_r+0x10>
 8009a88:	f7ff ffc2 	bl	8009a10 <__sinit>
 8009a8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a8e:	07db      	lsls	r3, r3, #31
 8009a90:	d405      	bmi.n	8009a9e <_puts_r+0x22>
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	0598      	lsls	r0, r3, #22
 8009a96:	d402      	bmi.n	8009a9e <_puts_r+0x22>
 8009a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a9a:	f000 f880 	bl	8009b9e <__retarget_lock_acquire_recursive>
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	0719      	lsls	r1, r3, #28
 8009aa2:	d502      	bpl.n	8009aaa <_puts_r+0x2e>
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d135      	bne.n	8009b16 <_puts_r+0x9a>
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4628      	mov	r0, r5
 8009aae:	f000 fa55 	bl	8009f5c <__swsetup_r>
 8009ab2:	b380      	cbz	r0, 8009b16 <_puts_r+0x9a>
 8009ab4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009ab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009aba:	07da      	lsls	r2, r3, #31
 8009abc:	d405      	bmi.n	8009aca <_puts_r+0x4e>
 8009abe:	89a3      	ldrh	r3, [r4, #12]
 8009ac0:	059b      	lsls	r3, r3, #22
 8009ac2:	d402      	bmi.n	8009aca <_puts_r+0x4e>
 8009ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ac6:	f000 f86b 	bl	8009ba0 <__retarget_lock_release_recursive>
 8009aca:	4628      	mov	r0, r5
 8009acc:	bd70      	pop	{r4, r5, r6, pc}
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	da04      	bge.n	8009adc <_puts_r+0x60>
 8009ad2:	69a2      	ldr	r2, [r4, #24]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	dc17      	bgt.n	8009b08 <_puts_r+0x8c>
 8009ad8:	290a      	cmp	r1, #10
 8009ada:	d015      	beq.n	8009b08 <_puts_r+0x8c>
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	6022      	str	r2, [r4, #0]
 8009ae2:	7019      	strb	r1, [r3, #0]
 8009ae4:	68a3      	ldr	r3, [r4, #8]
 8009ae6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009aea:	3b01      	subs	r3, #1
 8009aec:	60a3      	str	r3, [r4, #8]
 8009aee:	2900      	cmp	r1, #0
 8009af0:	d1ed      	bne.n	8009ace <_puts_r+0x52>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	da11      	bge.n	8009b1a <_puts_r+0x9e>
 8009af6:	4622      	mov	r2, r4
 8009af8:	210a      	movs	r1, #10
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 f9ef 	bl	8009ede <__swbuf_r>
 8009b00:	3001      	adds	r0, #1
 8009b02:	d0d7      	beq.n	8009ab4 <_puts_r+0x38>
 8009b04:	250a      	movs	r5, #10
 8009b06:	e7d7      	b.n	8009ab8 <_puts_r+0x3c>
 8009b08:	4622      	mov	r2, r4
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f000 f9e7 	bl	8009ede <__swbuf_r>
 8009b10:	3001      	adds	r0, #1
 8009b12:	d1e7      	bne.n	8009ae4 <_puts_r+0x68>
 8009b14:	e7ce      	b.n	8009ab4 <_puts_r+0x38>
 8009b16:	3e01      	subs	r6, #1
 8009b18:	e7e4      	b.n	8009ae4 <_puts_r+0x68>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	6022      	str	r2, [r4, #0]
 8009b20:	220a      	movs	r2, #10
 8009b22:	701a      	strb	r2, [r3, #0]
 8009b24:	e7ee      	b.n	8009b04 <_puts_r+0x88>
	...

08009b28 <puts>:
 8009b28:	4b02      	ldr	r3, [pc, #8]	@ (8009b34 <puts+0xc>)
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	6818      	ldr	r0, [r3, #0]
 8009b2e:	f7ff bfa5 	b.w	8009a7c <_puts_r>
 8009b32:	bf00      	nop
 8009b34:	20000090 	.word	0x20000090

08009b38 <memset>:
 8009b38:	4402      	add	r2, r0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d100      	bne.n	8009b42 <memset+0xa>
 8009b40:	4770      	bx	lr
 8009b42:	f803 1b01 	strb.w	r1, [r3], #1
 8009b46:	e7f9      	b.n	8009b3c <memset+0x4>

08009b48 <__errno>:
 8009b48:	4b01      	ldr	r3, [pc, #4]	@ (8009b50 <__errno+0x8>)
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	20000090 	.word	0x20000090

08009b54 <__libc_init_array>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	4d0d      	ldr	r5, [pc, #52]	@ (8009b8c <__libc_init_array+0x38>)
 8009b58:	2600      	movs	r6, #0
 8009b5a:	4c0d      	ldr	r4, [pc, #52]	@ (8009b90 <__libc_init_array+0x3c>)
 8009b5c:	1b64      	subs	r4, r4, r5
 8009b5e:	10a4      	asrs	r4, r4, #2
 8009b60:	42a6      	cmp	r6, r4
 8009b62:	d109      	bne.n	8009b78 <__libc_init_array+0x24>
 8009b64:	4d0b      	ldr	r5, [pc, #44]	@ (8009b94 <__libc_init_array+0x40>)
 8009b66:	2600      	movs	r6, #0
 8009b68:	4c0b      	ldr	r4, [pc, #44]	@ (8009b98 <__libc_init_array+0x44>)
 8009b6a:	f000 fb71 	bl	800a250 <_init>
 8009b6e:	1b64      	subs	r4, r4, r5
 8009b70:	10a4      	asrs	r4, r4, #2
 8009b72:	42a6      	cmp	r6, r4
 8009b74:	d105      	bne.n	8009b82 <__libc_init_array+0x2e>
 8009b76:	bd70      	pop	{r4, r5, r6, pc}
 8009b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	4798      	blx	r3
 8009b80:	e7ee      	b.n	8009b60 <__libc_init_array+0xc>
 8009b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b86:	3601      	adds	r6, #1
 8009b88:	4798      	blx	r3
 8009b8a:	e7f2      	b.n	8009b72 <__libc_init_array+0x1e>
 8009b8c:	0800a604 	.word	0x0800a604
 8009b90:	0800a604 	.word	0x0800a604
 8009b94:	0800a604 	.word	0x0800a604
 8009b98:	0800a608 	.word	0x0800a608

08009b9c <__retarget_lock_init_recursive>:
 8009b9c:	4770      	bx	lr

08009b9e <__retarget_lock_acquire_recursive>:
 8009b9e:	4770      	bx	lr

08009ba0 <__retarget_lock_release_recursive>:
 8009ba0:	4770      	bx	lr
	...

08009ba4 <sbrk_aligned>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8009be4 <sbrk_aligned+0x40>)
 8009ba8:	460c      	mov	r4, r1
 8009baa:	4605      	mov	r5, r0
 8009bac:	6831      	ldr	r1, [r6, #0]
 8009bae:	b911      	cbnz	r1, 8009bb6 <sbrk_aligned+0x12>
 8009bb0:	f000 fae2 	bl	800a178 <_sbrk_r>
 8009bb4:	6030      	str	r0, [r6, #0]
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 fadd 	bl	800a178 <_sbrk_r>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	d103      	bne.n	8009bca <sbrk_aligned+0x26>
 8009bc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	bd70      	pop	{r4, r5, r6, pc}
 8009bca:	1cc4      	adds	r4, r0, #3
 8009bcc:	f024 0403 	bic.w	r4, r4, #3
 8009bd0:	42a0      	cmp	r0, r4
 8009bd2:	d0f8      	beq.n	8009bc6 <sbrk_aligned+0x22>
 8009bd4:	1a21      	subs	r1, r4, r0
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f000 face 	bl	800a178 <_sbrk_r>
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d1f2      	bne.n	8009bc6 <sbrk_aligned+0x22>
 8009be0:	e7ef      	b.n	8009bc2 <sbrk_aligned+0x1e>
 8009be2:	bf00      	nop
 8009be4:	200003e0 	.word	0x200003e0

08009be8 <_malloc_r>:
 8009be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bec:	1ccd      	adds	r5, r1, #3
 8009bee:	4606      	mov	r6, r0
 8009bf0:	f025 0503 	bic.w	r5, r5, #3
 8009bf4:	3508      	adds	r5, #8
 8009bf6:	2d0c      	cmp	r5, #12
 8009bf8:	bf38      	it	cc
 8009bfa:	250c      	movcc	r5, #12
 8009bfc:	2d00      	cmp	r5, #0
 8009bfe:	db01      	blt.n	8009c04 <_malloc_r+0x1c>
 8009c00:	42a9      	cmp	r1, r5
 8009c02:	d904      	bls.n	8009c0e <_malloc_r+0x26>
 8009c04:	230c      	movs	r3, #12
 8009c06:	6033      	str	r3, [r6, #0]
 8009c08:	2000      	movs	r0, #0
 8009c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ce4 <_malloc_r+0xfc>
 8009c12:	f000 f915 	bl	8009e40 <__malloc_lock>
 8009c16:	f8d8 3000 	ldr.w	r3, [r8]
 8009c1a:	461c      	mov	r4, r3
 8009c1c:	bb44      	cbnz	r4, 8009c70 <_malloc_r+0x88>
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4630      	mov	r0, r6
 8009c22:	f7ff ffbf 	bl	8009ba4 <sbrk_aligned>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	4604      	mov	r4, r0
 8009c2a:	d158      	bne.n	8009cde <_malloc_r+0xf6>
 8009c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8009c30:	4627      	mov	r7, r4
 8009c32:	2f00      	cmp	r7, #0
 8009c34:	d143      	bne.n	8009cbe <_malloc_r+0xd6>
 8009c36:	2c00      	cmp	r4, #0
 8009c38:	d04b      	beq.n	8009cd2 <_malloc_r+0xea>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	4630      	mov	r0, r6
 8009c40:	eb04 0903 	add.w	r9, r4, r3
 8009c44:	f000 fa98 	bl	800a178 <_sbrk_r>
 8009c48:	4581      	cmp	r9, r0
 8009c4a:	d142      	bne.n	8009cd2 <_malloc_r+0xea>
 8009c4c:	6821      	ldr	r1, [r4, #0]
 8009c4e:	4630      	mov	r0, r6
 8009c50:	1a6d      	subs	r5, r5, r1
 8009c52:	4629      	mov	r1, r5
 8009c54:	f7ff ffa6 	bl	8009ba4 <sbrk_aligned>
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d03a      	beq.n	8009cd2 <_malloc_r+0xea>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	442b      	add	r3, r5
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	f8d8 3000 	ldr.w	r3, [r8]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	bb62      	cbnz	r2, 8009cc4 <_malloc_r+0xdc>
 8009c6a:	f8c8 7000 	str.w	r7, [r8]
 8009c6e:	e00f      	b.n	8009c90 <_malloc_r+0xa8>
 8009c70:	6822      	ldr	r2, [r4, #0]
 8009c72:	1b52      	subs	r2, r2, r5
 8009c74:	d420      	bmi.n	8009cb8 <_malloc_r+0xd0>
 8009c76:	2a0b      	cmp	r2, #11
 8009c78:	d917      	bls.n	8009caa <_malloc_r+0xc2>
 8009c7a:	1961      	adds	r1, r4, r5
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	6025      	str	r5, [r4, #0]
 8009c80:	bf18      	it	ne
 8009c82:	6059      	strne	r1, [r3, #4]
 8009c84:	6863      	ldr	r3, [r4, #4]
 8009c86:	bf08      	it	eq
 8009c88:	f8c8 1000 	streq.w	r1, [r8]
 8009c8c:	5162      	str	r2, [r4, r5]
 8009c8e:	604b      	str	r3, [r1, #4]
 8009c90:	4630      	mov	r0, r6
 8009c92:	f000 f8db 	bl	8009e4c <__malloc_unlock>
 8009c96:	f104 000b 	add.w	r0, r4, #11
 8009c9a:	1d23      	adds	r3, r4, #4
 8009c9c:	f020 0007 	bic.w	r0, r0, #7
 8009ca0:	1ac2      	subs	r2, r0, r3
 8009ca2:	bf1c      	itt	ne
 8009ca4:	1a1b      	subne	r3, r3, r0
 8009ca6:	50a3      	strne	r3, [r4, r2]
 8009ca8:	e7af      	b.n	8009c0a <_malloc_r+0x22>
 8009caa:	6862      	ldr	r2, [r4, #4]
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	bf0c      	ite	eq
 8009cb0:	f8c8 2000 	streq.w	r2, [r8]
 8009cb4:	605a      	strne	r2, [r3, #4]
 8009cb6:	e7eb      	b.n	8009c90 <_malloc_r+0xa8>
 8009cb8:	4623      	mov	r3, r4
 8009cba:	6864      	ldr	r4, [r4, #4]
 8009cbc:	e7ae      	b.n	8009c1c <_malloc_r+0x34>
 8009cbe:	463c      	mov	r4, r7
 8009cc0:	687f      	ldr	r7, [r7, #4]
 8009cc2:	e7b6      	b.n	8009c32 <_malloc_r+0x4a>
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	d1fb      	bne.n	8009cc4 <_malloc_r+0xdc>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	6053      	str	r3, [r2, #4]
 8009cd0:	e7de      	b.n	8009c90 <_malloc_r+0xa8>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	6033      	str	r3, [r6, #0]
 8009cd8:	f000 f8b8 	bl	8009e4c <__malloc_unlock>
 8009cdc:	e794      	b.n	8009c08 <_malloc_r+0x20>
 8009cde:	6005      	str	r5, [r0, #0]
 8009ce0:	e7d6      	b.n	8009c90 <_malloc_r+0xa8>
 8009ce2:	bf00      	nop
 8009ce4:	200003e4 	.word	0x200003e4

08009ce8 <__sflush_r>:
 8009ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf0:	0716      	lsls	r6, r2, #28
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	d454      	bmi.n	8009da2 <__sflush_r+0xba>
 8009cf8:	684b      	ldr	r3, [r1, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dc02      	bgt.n	8009d04 <__sflush_r+0x1c>
 8009cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dd48      	ble.n	8009d96 <__sflush_r+0xae>
 8009d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	d045      	beq.n	8009d96 <__sflush_r+0xae>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d10:	682f      	ldr	r7, [r5, #0]
 8009d12:	6a21      	ldr	r1, [r4, #32]
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	d030      	beq.n	8009d7a <__sflush_r+0x92>
 8009d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	0759      	lsls	r1, r3, #29
 8009d1e:	d505      	bpl.n	8009d2c <__sflush_r+0x44>
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	1ad2      	subs	r2, r2, r3
 8009d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d26:	b10b      	cbz	r3, 8009d2c <__sflush_r+0x44>
 8009d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d2a:	1ad2      	subs	r2, r2, r3
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d30:	6a21      	ldr	r1, [r4, #32]
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b0      	blx	r6
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	d106      	bne.n	8009d4a <__sflush_r+0x62>
 8009d3c:	6829      	ldr	r1, [r5, #0]
 8009d3e:	291d      	cmp	r1, #29
 8009d40:	d82b      	bhi.n	8009d9a <__sflush_r+0xb2>
 8009d42:	4a2a      	ldr	r2, [pc, #168]	@ (8009dec <__sflush_r+0x104>)
 8009d44:	410a      	asrs	r2, r1
 8009d46:	07d6      	lsls	r6, r2, #31
 8009d48:	d427      	bmi.n	8009d9a <__sflush_r+0xb2>
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	04d9      	lsls	r1, r3, #19
 8009d4e:	6062      	str	r2, [r4, #4]
 8009d50:	6922      	ldr	r2, [r4, #16]
 8009d52:	6022      	str	r2, [r4, #0]
 8009d54:	d504      	bpl.n	8009d60 <__sflush_r+0x78>
 8009d56:	1c42      	adds	r2, r0, #1
 8009d58:	d101      	bne.n	8009d5e <__sflush_r+0x76>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	b903      	cbnz	r3, 8009d60 <__sflush_r+0x78>
 8009d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d62:	602f      	str	r7, [r5, #0]
 8009d64:	b1b9      	cbz	r1, 8009d96 <__sflush_r+0xae>
 8009d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	d002      	beq.n	8009d74 <__sflush_r+0x8c>
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f000 fa24 	bl	800a1bc <_free_r>
 8009d74:	2300      	movs	r3, #0
 8009d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d78:	e00d      	b.n	8009d96 <__sflush_r+0xae>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b0      	blx	r6
 8009d80:	4602      	mov	r2, r0
 8009d82:	1c50      	adds	r0, r2, #1
 8009d84:	d1c9      	bne.n	8009d1a <__sflush_r+0x32>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0c6      	beq.n	8009d1a <__sflush_r+0x32>
 8009d8c:	2b1d      	cmp	r3, #29
 8009d8e:	d001      	beq.n	8009d94 <__sflush_r+0xac>
 8009d90:	2b16      	cmp	r3, #22
 8009d92:	d11d      	bne.n	8009dd0 <__sflush_r+0xe8>
 8009d94:	602f      	str	r7, [r5, #0]
 8009d96:	2000      	movs	r0, #0
 8009d98:	e021      	b.n	8009dde <__sflush_r+0xf6>
 8009d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d9e:	b21b      	sxth	r3, r3
 8009da0:	e01a      	b.n	8009dd8 <__sflush_r+0xf0>
 8009da2:	690f      	ldr	r7, [r1, #16]
 8009da4:	2f00      	cmp	r7, #0
 8009da6:	d0f6      	beq.n	8009d96 <__sflush_r+0xae>
 8009da8:	0793      	lsls	r3, r2, #30
 8009daa:	680e      	ldr	r6, [r1, #0]
 8009dac:	600f      	str	r7, [r1, #0]
 8009dae:	bf0c      	ite	eq
 8009db0:	694b      	ldreq	r3, [r1, #20]
 8009db2:	2300      	movne	r3, #0
 8009db4:	eba6 0807 	sub.w	r8, r6, r7
 8009db8:	608b      	str	r3, [r1, #8]
 8009dba:	f1b8 0f00 	cmp.w	r8, #0
 8009dbe:	ddea      	ble.n	8009d96 <__sflush_r+0xae>
 8009dc0:	4643      	mov	r3, r8
 8009dc2:	463a      	mov	r2, r7
 8009dc4:	6a21      	ldr	r1, [r4, #32]
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009dca:	47b0      	blx	r6
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	dc08      	bgt.n	8009de2 <__sflush_r+0xfa>
 8009dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de2:	4407      	add	r7, r0
 8009de4:	eba8 0800 	sub.w	r8, r8, r0
 8009de8:	e7e7      	b.n	8009dba <__sflush_r+0xd2>
 8009dea:	bf00      	nop
 8009dec:	dfbffffe 	.word	0xdfbffffe

08009df0 <_fflush_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	690b      	ldr	r3, [r1, #16]
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b913      	cbnz	r3, 8009e00 <_fflush_r+0x10>
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	b118      	cbz	r0, 8009e0a <_fflush_r+0x1a>
 8009e02:	6a03      	ldr	r3, [r0, #32]
 8009e04:	b90b      	cbnz	r3, 8009e0a <_fflush_r+0x1a>
 8009e06:	f7ff fe03 	bl	8009a10 <__sinit>
 8009e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0f3      	beq.n	8009dfa <_fflush_r+0xa>
 8009e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e14:	07d0      	lsls	r0, r2, #31
 8009e16:	d404      	bmi.n	8009e22 <_fflush_r+0x32>
 8009e18:	0599      	lsls	r1, r3, #22
 8009e1a:	d402      	bmi.n	8009e22 <_fflush_r+0x32>
 8009e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e1e:	f7ff febe 	bl	8009b9e <__retarget_lock_acquire_recursive>
 8009e22:	4628      	mov	r0, r5
 8009e24:	4621      	mov	r1, r4
 8009e26:	f7ff ff5f 	bl	8009ce8 <__sflush_r>
 8009e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	07da      	lsls	r2, r3, #31
 8009e30:	d4e4      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	059b      	lsls	r3, r3, #22
 8009e36:	d4e1      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e3a:	f7ff feb1 	bl	8009ba0 <__retarget_lock_release_recursive>
 8009e3e:	e7dd      	b.n	8009dfc <_fflush_r+0xc>

08009e40 <__malloc_lock>:
 8009e40:	4801      	ldr	r0, [pc, #4]	@ (8009e48 <__malloc_lock+0x8>)
 8009e42:	f7ff beac 	b.w	8009b9e <__retarget_lock_acquire_recursive>
 8009e46:	bf00      	nop
 8009e48:	200003dc 	.word	0x200003dc

08009e4c <__malloc_unlock>:
 8009e4c:	4801      	ldr	r0, [pc, #4]	@ (8009e54 <__malloc_unlock+0x8>)
 8009e4e:	f7ff bea7 	b.w	8009ba0 <__retarget_lock_release_recursive>
 8009e52:	bf00      	nop
 8009e54:	200003dc 	.word	0x200003dc

08009e58 <__sread>:
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e60:	f000 f978 	bl	800a154 <_read_r>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	bfab      	itete	ge
 8009e68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e6c:	181b      	addge	r3, r3, r0
 8009e6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e72:	bfac      	ite	ge
 8009e74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e76:	81a3      	strhlt	r3, [r4, #12]
 8009e78:	bd10      	pop	{r4, pc}

08009e7a <__swrite>:
 8009e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7e:	461f      	mov	r7, r3
 8009e80:	898b      	ldrh	r3, [r1, #12]
 8009e82:	4605      	mov	r5, r0
 8009e84:	460c      	mov	r4, r1
 8009e86:	05db      	lsls	r3, r3, #23
 8009e88:	4616      	mov	r6, r2
 8009e8a:	d505      	bpl.n	8009e98 <__swrite+0x1e>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e94:	f000 f94c 	bl	800a130 <_lseek_r>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	4632      	mov	r2, r6
 8009e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eae:	f000 b973 	b.w	800a198 <_write_r>

08009eb2 <__sseek>:
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eba:	f000 f939 	bl	800a130 <_lseek_r>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	bf15      	itete	ne
 8009ec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009eca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ece:	81a3      	strheq	r3, [r4, #12]
 8009ed0:	bf18      	it	ne
 8009ed2:	81a3      	strhne	r3, [r4, #12]
 8009ed4:	bd10      	pop	{r4, pc}

08009ed6 <__sclose>:
 8009ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eda:	f000 b8f7 	b.w	800a0cc <_close_r>

08009ede <__swbuf_r>:
 8009ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee0:	460e      	mov	r6, r1
 8009ee2:	4614      	mov	r4, r2
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	b118      	cbz	r0, 8009ef0 <__swbuf_r+0x12>
 8009ee8:	6a03      	ldr	r3, [r0, #32]
 8009eea:	b90b      	cbnz	r3, 8009ef0 <__swbuf_r+0x12>
 8009eec:	f7ff fd90 	bl	8009a10 <__sinit>
 8009ef0:	69a3      	ldr	r3, [r4, #24]
 8009ef2:	60a3      	str	r3, [r4, #8]
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	071a      	lsls	r2, r3, #28
 8009ef8:	d501      	bpl.n	8009efe <__swbuf_r+0x20>
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	b943      	cbnz	r3, 8009f10 <__swbuf_r+0x32>
 8009efe:	4621      	mov	r1, r4
 8009f00:	4628      	mov	r0, r5
 8009f02:	f000 f82b 	bl	8009f5c <__swsetup_r>
 8009f06:	b118      	cbz	r0, 8009f10 <__swbuf_r+0x32>
 8009f08:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	b2f6      	uxtb	r6, r6
 8009f14:	6922      	ldr	r2, [r4, #16]
 8009f16:	4637      	mov	r7, r6
 8009f18:	1a98      	subs	r0, r3, r2
 8009f1a:	6963      	ldr	r3, [r4, #20]
 8009f1c:	4283      	cmp	r3, r0
 8009f1e:	dc05      	bgt.n	8009f2c <__swbuf_r+0x4e>
 8009f20:	4621      	mov	r1, r4
 8009f22:	4628      	mov	r0, r5
 8009f24:	f7ff ff64 	bl	8009df0 <_fflush_r>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d1ed      	bne.n	8009f08 <__swbuf_r+0x2a>
 8009f2c:	68a3      	ldr	r3, [r4, #8]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	60a3      	str	r3, [r4, #8]
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	6022      	str	r2, [r4, #0]
 8009f38:	701e      	strb	r6, [r3, #0]
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	6962      	ldr	r2, [r4, #20]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d004      	beq.n	8009f4c <__swbuf_r+0x6e>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	07db      	lsls	r3, r3, #31
 8009f46:	d5e1      	bpl.n	8009f0c <__swbuf_r+0x2e>
 8009f48:	2e0a      	cmp	r6, #10
 8009f4a:	d1df      	bne.n	8009f0c <__swbuf_r+0x2e>
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f7ff ff4e 	bl	8009df0 <_fflush_r>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d0d9      	beq.n	8009f0c <__swbuf_r+0x2e>
 8009f58:	e7d6      	b.n	8009f08 <__swbuf_r+0x2a>
	...

08009f5c <__swsetup_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4b29      	ldr	r3, [pc, #164]	@ (800a004 <__swsetup_r+0xa8>)
 8009f60:	4605      	mov	r5, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	b118      	cbz	r0, 8009f70 <__swsetup_r+0x14>
 8009f68:	6a03      	ldr	r3, [r0, #32]
 8009f6a:	b90b      	cbnz	r3, 8009f70 <__swsetup_r+0x14>
 8009f6c:	f7ff fd50 	bl	8009a10 <__sinit>
 8009f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f74:	0719      	lsls	r1, r3, #28
 8009f76:	d422      	bmi.n	8009fbe <__swsetup_r+0x62>
 8009f78:	06da      	lsls	r2, r3, #27
 8009f7a:	d407      	bmi.n	8009f8c <__swsetup_r+0x30>
 8009f7c:	2209      	movs	r2, #9
 8009f7e:	602a      	str	r2, [r5, #0]
 8009f80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	e033      	b.n	8009ff4 <__swsetup_r+0x98>
 8009f8c:	0758      	lsls	r0, r3, #29
 8009f8e:	d512      	bpl.n	8009fb6 <__swsetup_r+0x5a>
 8009f90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f92:	b141      	cbz	r1, 8009fa6 <__swsetup_r+0x4a>
 8009f94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f98:	4299      	cmp	r1, r3
 8009f9a:	d002      	beq.n	8009fa2 <__swsetup_r+0x46>
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	f000 f90d 	bl	800a1bc <_free_r>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fa6:	89a3      	ldrh	r3, [r4, #12]
 8009fa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fac:	81a3      	strh	r3, [r4, #12]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	6063      	str	r3, [r4, #4]
 8009fb2:	6923      	ldr	r3, [r4, #16]
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	f043 0308 	orr.w	r3, r3, #8
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	6923      	ldr	r3, [r4, #16]
 8009fc0:	b94b      	cbnz	r3, 8009fd6 <__swsetup_r+0x7a>
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fcc:	d003      	beq.n	8009fd6 <__swsetup_r+0x7a>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f000 f83e 	bl	800a052 <__smakebuf_r>
 8009fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fda:	f013 0201 	ands.w	r2, r3, #1
 8009fde:	d00a      	beq.n	8009ff6 <__swsetup_r+0x9a>
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	60a2      	str	r2, [r4, #8]
 8009fe4:	6962      	ldr	r2, [r4, #20]
 8009fe6:	4252      	negs	r2, r2
 8009fe8:	61a2      	str	r2, [r4, #24]
 8009fea:	6922      	ldr	r2, [r4, #16]
 8009fec:	b942      	cbnz	r2, 800a000 <__swsetup_r+0xa4>
 8009fee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ff2:	d1c5      	bne.n	8009f80 <__swsetup_r+0x24>
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
 8009ff6:	0799      	lsls	r1, r3, #30
 8009ff8:	bf58      	it	pl
 8009ffa:	6962      	ldrpl	r2, [r4, #20]
 8009ffc:	60a2      	str	r2, [r4, #8]
 8009ffe:	e7f4      	b.n	8009fea <__swsetup_r+0x8e>
 800a000:	2000      	movs	r0, #0
 800a002:	e7f7      	b.n	8009ff4 <__swsetup_r+0x98>
 800a004:	20000090 	.word	0x20000090

0800a008 <__swhatbuf_r>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	460c      	mov	r4, r1
 800a00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a010:	b096      	sub	sp, #88	@ 0x58
 800a012:	4615      	mov	r5, r2
 800a014:	2900      	cmp	r1, #0
 800a016:	461e      	mov	r6, r3
 800a018:	da0c      	bge.n	800a034 <__swhatbuf_r+0x2c>
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	2100      	movs	r1, #0
 800a01e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a022:	bf14      	ite	ne
 800a024:	2340      	movne	r3, #64	@ 0x40
 800a026:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a02a:	2000      	movs	r0, #0
 800a02c:	6031      	str	r1, [r6, #0]
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	b016      	add	sp, #88	@ 0x58
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	466a      	mov	r2, sp
 800a036:	f000 f859 	bl	800a0ec <_fstat_r>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	dbed      	blt.n	800a01a <__swhatbuf_r+0x12>
 800a03e:	9901      	ldr	r1, [sp, #4]
 800a040:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a044:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a048:	4259      	negs	r1, r3
 800a04a:	4159      	adcs	r1, r3
 800a04c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a050:	e7eb      	b.n	800a02a <__swhatbuf_r+0x22>

0800a052 <__smakebuf_r>:
 800a052:	898b      	ldrh	r3, [r1, #12]
 800a054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a056:	079d      	lsls	r5, r3, #30
 800a058:	4606      	mov	r6, r0
 800a05a:	460c      	mov	r4, r1
 800a05c:	d507      	bpl.n	800a06e <__smakebuf_r+0x1c>
 800a05e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a062:	6023      	str	r3, [r4, #0]
 800a064:	6123      	str	r3, [r4, #16]
 800a066:	2301      	movs	r3, #1
 800a068:	6163      	str	r3, [r4, #20]
 800a06a:	b003      	add	sp, #12
 800a06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a06e:	ab01      	add	r3, sp, #4
 800a070:	466a      	mov	r2, sp
 800a072:	f7ff ffc9 	bl	800a008 <__swhatbuf_r>
 800a076:	9f00      	ldr	r7, [sp, #0]
 800a078:	4605      	mov	r5, r0
 800a07a:	4630      	mov	r0, r6
 800a07c:	4639      	mov	r1, r7
 800a07e:	f7ff fdb3 	bl	8009be8 <_malloc_r>
 800a082:	b948      	cbnz	r0, 800a098 <__smakebuf_r+0x46>
 800a084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a088:	059a      	lsls	r2, r3, #22
 800a08a:	d4ee      	bmi.n	800a06a <__smakebuf_r+0x18>
 800a08c:	f023 0303 	bic.w	r3, r3, #3
 800a090:	f043 0302 	orr.w	r3, r3, #2
 800a094:	81a3      	strh	r3, [r4, #12]
 800a096:	e7e2      	b.n	800a05e <__smakebuf_r+0xc>
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	6020      	str	r0, [r4, #0]
 800a09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	9b01      	ldr	r3, [sp, #4]
 800a0a4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0a8:	b15b      	cbz	r3, 800a0c2 <__smakebuf_r+0x70>
 800a0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f000 f82e 	bl	800a110 <_isatty_r>
 800a0b4:	b128      	cbz	r0, 800a0c2 <__smakebuf_r+0x70>
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	f023 0303 	bic.w	r3, r3, #3
 800a0bc:	f043 0301 	orr.w	r3, r3, #1
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	431d      	orrs	r5, r3
 800a0c6:	81a5      	strh	r5, [r4, #12]
 800a0c8:	e7cf      	b.n	800a06a <__smakebuf_r+0x18>
	...

0800a0cc <_close_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	4d05      	ldr	r5, [pc, #20]	@ (800a0e8 <_close_r+0x1c>)
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	602b      	str	r3, [r5, #0]
 800a0d8:	f7f6 fdae 	bl	8000c38 <_close>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_close_r+0x1a>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_close_r+0x1a>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	200003e8 	.word	0x200003e8

0800a0ec <_fstat_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	4d06      	ldr	r5, [pc, #24]	@ (800a10c <_fstat_r+0x20>)
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	602b      	str	r3, [r5, #0]
 800a0fa:	f7f6 fda9 	bl	8000c50 <_fstat>
 800a0fe:	1c43      	adds	r3, r0, #1
 800a100:	d102      	bne.n	800a108 <_fstat_r+0x1c>
 800a102:	682b      	ldr	r3, [r5, #0]
 800a104:	b103      	cbz	r3, 800a108 <_fstat_r+0x1c>
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	bd38      	pop	{r3, r4, r5, pc}
 800a10a:	bf00      	nop
 800a10c:	200003e8 	.word	0x200003e8

0800a110 <_isatty_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	2300      	movs	r3, #0
 800a114:	4d05      	ldr	r5, [pc, #20]	@ (800a12c <_isatty_r+0x1c>)
 800a116:	4604      	mov	r4, r0
 800a118:	4608      	mov	r0, r1
 800a11a:	602b      	str	r3, [r5, #0]
 800a11c:	f7f6 fda8 	bl	8000c70 <_isatty>
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	d102      	bne.n	800a12a <_isatty_r+0x1a>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	b103      	cbz	r3, 800a12a <_isatty_r+0x1a>
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	200003e8 	.word	0x200003e8

0800a130 <_lseek_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4604      	mov	r4, r0
 800a134:	4d06      	ldr	r5, [pc, #24]	@ (800a150 <_lseek_r+0x20>)
 800a136:	4608      	mov	r0, r1
 800a138:	4611      	mov	r1, r2
 800a13a:	2200      	movs	r2, #0
 800a13c:	602a      	str	r2, [r5, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	f7f6 fda1 	bl	8000c86 <_lseek>
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d102      	bne.n	800a14e <_lseek_r+0x1e>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	b103      	cbz	r3, 800a14e <_lseek_r+0x1e>
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	200003e8 	.word	0x200003e8

0800a154 <_read_r>:
 800a154:	b538      	push	{r3, r4, r5, lr}
 800a156:	4604      	mov	r4, r0
 800a158:	4d06      	ldr	r5, [pc, #24]	@ (800a174 <_read_r+0x20>)
 800a15a:	4608      	mov	r0, r1
 800a15c:	4611      	mov	r1, r2
 800a15e:	2200      	movs	r2, #0
 800a160:	602a      	str	r2, [r5, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	f7f6 fd2f 	bl	8000bc6 <_read>
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	d102      	bne.n	800a172 <_read_r+0x1e>
 800a16c:	682b      	ldr	r3, [r5, #0]
 800a16e:	b103      	cbz	r3, 800a172 <_read_r+0x1e>
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	200003e8 	.word	0x200003e8

0800a178 <_sbrk_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	2300      	movs	r3, #0
 800a17c:	4d05      	ldr	r5, [pc, #20]	@ (800a194 <_sbrk_r+0x1c>)
 800a17e:	4604      	mov	r4, r0
 800a180:	4608      	mov	r0, r1
 800a182:	602b      	str	r3, [r5, #0]
 800a184:	f7f6 fd8c 	bl	8000ca0 <_sbrk>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_sbrk_r+0x1a>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_sbrk_r+0x1a>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	200003e8 	.word	0x200003e8

0800a198 <_write_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	4604      	mov	r4, r0
 800a19c:	4d06      	ldr	r5, [pc, #24]	@ (800a1b8 <_write_r+0x20>)
 800a19e:	4608      	mov	r0, r1
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	602a      	str	r2, [r5, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	f7f6 fd2a 	bl	8000c00 <_write>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_write_r+0x1e>
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_write_r+0x1e>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	200003e8 	.word	0x200003e8

0800a1bc <_free_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	4605      	mov	r5, r0
 800a1c0:	2900      	cmp	r1, #0
 800a1c2:	d041      	beq.n	800a248 <_free_r+0x8c>
 800a1c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c8:	1f0c      	subs	r4, r1, #4
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	bfb8      	it	lt
 800a1ce:	18e4      	addlt	r4, r4, r3
 800a1d0:	f7ff fe36 	bl	8009e40 <__malloc_lock>
 800a1d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a24c <_free_r+0x90>)
 800a1d6:	6813      	ldr	r3, [r2, #0]
 800a1d8:	b933      	cbnz	r3, 800a1e8 <_free_r+0x2c>
 800a1da:	6063      	str	r3, [r4, #4]
 800a1dc:	6014      	str	r4, [r2, #0]
 800a1de:	4628      	mov	r0, r5
 800a1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e4:	f7ff be32 	b.w	8009e4c <__malloc_unlock>
 800a1e8:	42a3      	cmp	r3, r4
 800a1ea:	d908      	bls.n	800a1fe <_free_r+0x42>
 800a1ec:	6820      	ldr	r0, [r4, #0]
 800a1ee:	1821      	adds	r1, r4, r0
 800a1f0:	428b      	cmp	r3, r1
 800a1f2:	bf01      	itttt	eq
 800a1f4:	6819      	ldreq	r1, [r3, #0]
 800a1f6:	685b      	ldreq	r3, [r3, #4]
 800a1f8:	1809      	addeq	r1, r1, r0
 800a1fa:	6021      	streq	r1, [r4, #0]
 800a1fc:	e7ed      	b.n	800a1da <_free_r+0x1e>
 800a1fe:	461a      	mov	r2, r3
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	b10b      	cbz	r3, 800a208 <_free_r+0x4c>
 800a204:	42a3      	cmp	r3, r4
 800a206:	d9fa      	bls.n	800a1fe <_free_r+0x42>
 800a208:	6811      	ldr	r1, [r2, #0]
 800a20a:	1850      	adds	r0, r2, r1
 800a20c:	42a0      	cmp	r0, r4
 800a20e:	d10b      	bne.n	800a228 <_free_r+0x6c>
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	4401      	add	r1, r0
 800a214:	1850      	adds	r0, r2, r1
 800a216:	6011      	str	r1, [r2, #0]
 800a218:	4283      	cmp	r3, r0
 800a21a:	d1e0      	bne.n	800a1de <_free_r+0x22>
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	4408      	add	r0, r1
 800a222:	6053      	str	r3, [r2, #4]
 800a224:	6010      	str	r0, [r2, #0]
 800a226:	e7da      	b.n	800a1de <_free_r+0x22>
 800a228:	d902      	bls.n	800a230 <_free_r+0x74>
 800a22a:	230c      	movs	r3, #12
 800a22c:	602b      	str	r3, [r5, #0]
 800a22e:	e7d6      	b.n	800a1de <_free_r+0x22>
 800a230:	6820      	ldr	r0, [r4, #0]
 800a232:	1821      	adds	r1, r4, r0
 800a234:	428b      	cmp	r3, r1
 800a236:	bf02      	ittt	eq
 800a238:	6819      	ldreq	r1, [r3, #0]
 800a23a:	685b      	ldreq	r3, [r3, #4]
 800a23c:	1809      	addeq	r1, r1, r0
 800a23e:	6063      	str	r3, [r4, #4]
 800a240:	bf08      	it	eq
 800a242:	6021      	streq	r1, [r4, #0]
 800a244:	6054      	str	r4, [r2, #4]
 800a246:	e7ca      	b.n	800a1de <_free_r+0x22>
 800a248:	bd38      	pop	{r3, r4, r5, pc}
 800a24a:	bf00      	nop
 800a24c:	200003e4 	.word	0x200003e4

0800a250 <_init>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	bf00      	nop
 800a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a256:	bc08      	pop	{r3}
 800a258:	469e      	mov	lr, r3
 800a25a:	4770      	bx	lr

0800a25c <_fini>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	bf00      	nop
 800a260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a262:	bc08      	pop	{r3}
 800a264:	469e      	mov	lr, r3
 800a266:	4770      	bx	lr
